
STM32F103_MOS_6502_CPU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d34  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001fe0  08006f18  08006f18  00016f18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ef8  08008ef8  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08008ef8  08008ef8  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008ef8  08008ef8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ef8  08008ef8  00018ef8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008efc  08008efc  00018efc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08008f00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000081a8  20000074  08008f74  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000821c  08008f74  0002821c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002122e  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000423c  00000000  00000000  000412cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00012320  00000000  00000000  00045507  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001130  00000000  00000000  00057828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001c70  00000000  00000000  00058958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d189  00000000  00000000  0005a5c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c4cc  00000000  00000000  00077751  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009d20c  00000000  00000000  00093c1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00130e29  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003d70  00000000  00000000  00130e7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000074 	.word	0x20000074
 8000200:	00000000 	.word	0x00000000
 8000204:	08006f00 	.word	0x08006f00

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000078 	.word	0x20000078
 8000220:	08006f00 	.word	0x08006f00

08000224 <strcmp>:
 8000224:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000228:	f811 3b01 	ldrb.w	r3, [r1], #1
 800022c:	2a01      	cmp	r2, #1
 800022e:	bf28      	it	cs
 8000230:	429a      	cmpcs	r2, r3
 8000232:	d0f7      	beq.n	8000224 <strcmp>
 8000234:	1ad0      	subs	r0, r2, r3
 8000236:	4770      	bx	lr

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <Delay>:
	LCD_CURSOR_X = 0;
	// Draw the new cursor
	LCD_DrawChar(LCD_CURSOR_X * WIDTH_EN_CHAR, LCD_CURSOR_Y * HEIGHT_EN_CHAR, CURSOR_CHAR);
}

void Delay ( __IO uint32_t nCount ){  for ( ; nCount != 0; nCount -- );}
 8000248:	b082      	sub	sp, #8
 800024a:	9001      	str	r0, [sp, #4]
 800024c:	9b01      	ldr	r3, [sp, #4]
 800024e:	b90b      	cbnz	r3, 8000254 <Delay+0xc>
 8000250:	b002      	add	sp, #8
 8000252:	4770      	bx	lr
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	3b01      	subs	r3, #1
 8000258:	9301      	str	r3, [sp, #4]
 800025a:	e7f7      	b.n	800024c <Delay+0x4>

0800025c <LCD_Rst>:
}



void LCD_Rst ( void )
{			
 800025c:	b538      	push	{r3, r4, r5, lr}
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_RESET);
 800025e:	4d0a      	ldr	r5, [pc, #40]	; (8000288 <LCD_Rst+0x2c>)
	Delay ( 0xAFFf<<2 ); 					   
 8000260:	4c0a      	ldr	r4, [pc, #40]	; (800028c <LCD_Rst+0x30>)
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_RESET);
 8000262:	4628      	mov	r0, r5
 8000264:	2200      	movs	r2, #0
 8000266:	2102      	movs	r1, #2
 8000268:	f002 fd0e 	bl	8002c88 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 					   
 800026c:	4620      	mov	r0, r4
 800026e:	f7ff ffeb 	bl	8000248 <Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_SET);
 8000272:	2201      	movs	r2, #1
 8000274:	4628      	mov	r0, r5
 8000276:	2102      	movs	r1, #2
 8000278:	f002 fd06 	bl	8002c88 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 	
 800027c:	4620      	mov	r0, r4
}
 800027e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	Delay ( 0xAFFf<<2 ); 	
 8000282:	f7ff bfe1 	b.w	8000248 <Delay>
 8000286:	bf00      	nop
 8000288:	40011800 	.word	0x40011800
 800028c:	0002bffc 	.word	0x0002bffc

08000290 <LCD_REG_Config>:



void LCD_Write_Cmd ( uint16_t usCmd )
{
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000290:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000294:	23cf      	movs	r3, #207	; 0xcf
	return ( * ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) );	
}


void LCD_REG_Config ( void )
{
 8000296:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 800029a:	2100      	movs	r1, #0
 800029c:	2081      	movs	r0, #129	; 0x81
 800029e:	2730      	movs	r7, #48	; 0x30
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 80002a0:	24ed      	movs	r4, #237	; 0xed
 80002a2:	8013      	strh	r3, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 80002a4:	4b5c      	ldr	r3, [pc, #368]	; (8000418 <LCD_REG_Config+0x188>)
 80002a6:	f04f 0c03 	mov.w	ip, #3
 80002aa:	8019      	strh	r1, [r3, #0]
 80002ac:	8018      	strh	r0, [r3, #0]
 80002ae:	801f      	strh	r7, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 80002b0:	8014      	strh	r4, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 80002b2:	2464      	movs	r4, #100	; 0x64
 80002b4:	801c      	strh	r4, [r3, #0]
 80002b6:	2412      	movs	r4, #18
 80002b8:	f8a3 c000 	strh.w	ip, [r3]
 80002bc:	801c      	strh	r4, [r3, #0]
 80002be:	8018      	strh	r0, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 80002c0:	20e8      	movs	r0, #232	; 0xe8
 80002c2:	8010      	strh	r0, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 80002c4:	2085      	movs	r0, #133	; 0x85
 80002c6:	f04f 0810 	mov.w	r8, #16
 80002ca:	8018      	strh	r0, [r3, #0]
 80002cc:	2078      	movs	r0, #120	; 0x78
 80002ce:	f8a3 8000 	strh.w	r8, [r3]
 80002d2:	8018      	strh	r0, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 80002d4:	20cb      	movs	r0, #203	; 0xcb
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 80002d6:	f04f 0e39 	mov.w	lr, #57	; 0x39
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 80002da:	8010      	strh	r0, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 80002dc:	202c      	movs	r0, #44	; 0x2c
 80002de:	f8a3 e000 	strh.w	lr, [r3]
 80002e2:	8018      	strh	r0, [r3, #0]
 80002e4:	2034      	movs	r0, #52	; 0x34
 80002e6:	8019      	strh	r1, [r3, #0]
 80002e8:	8018      	strh	r0, [r3, #0]
 80002ea:	2002      	movs	r0, #2
 80002ec:	8018      	strh	r0, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 80002ee:	20f7      	movs	r0, #247	; 0xf7
 80002f0:	8010      	strh	r0, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 80002f2:	2020      	movs	r0, #32
 80002f4:	8018      	strh	r0, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 80002f6:	20ea      	movs	r0, #234	; 0xea
 80002f8:	8010      	strh	r0, [r2, #0]
 80002fa:	20b1      	movs	r0, #177	; 0xb1
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 80002fc:	8019      	strh	r1, [r3, #0]
 80002fe:	f04f 091b 	mov.w	r9, #27
 8000302:	8019      	strh	r1, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000304:	8010      	strh	r0, [r2, #0]
 8000306:	20b6      	movs	r0, #182	; 0xb6
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000308:	8019      	strh	r1, [r3, #0]
 800030a:	f8a3 9000 	strh.w	r9, [r3]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 800030e:	8010      	strh	r0, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000310:	200a      	movs	r0, #10
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000312:	24c0      	movs	r4, #192	; 0xc0
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000314:	8018      	strh	r0, [r3, #0]
 8000316:	20a2      	movs	r0, #162	; 0xa2
 8000318:	8018      	strh	r0, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 800031a:	8014      	strh	r4, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 800031c:	2435      	movs	r4, #53	; 0x35
 800031e:	801c      	strh	r4, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000320:	24c1      	movs	r4, #193	; 0xc1
 8000322:	25c5      	movs	r5, #197	; 0xc5
 8000324:	8014      	strh	r4, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000326:	2411      	movs	r4, #17
 8000328:	801c      	strh	r4, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 800032a:	8015      	strh	r5, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 800032c:	2545      	movs	r5, #69	; 0x45
 800032e:	801d      	strh	r5, [r3, #0]
 8000330:	801d      	strh	r5, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000332:	25c7      	movs	r5, #199	; 0xc7
 8000334:	8015      	strh	r5, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000336:	8018      	strh	r0, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000338:	20f2      	movs	r0, #242	; 0xf2
 800033a:	2626      	movs	r6, #38	; 0x26
 800033c:	8010      	strh	r0, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 800033e:	2501      	movs	r5, #1
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000340:	20e0      	movs	r0, #224	; 0xe0
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000342:	8019      	strh	r1, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000344:	8016      	strh	r6, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000346:	801d      	strh	r5, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000348:	8010      	strh	r0, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 800034a:	200f      	movs	r0, #15
 800034c:	8018      	strh	r0, [r3, #0]
 800034e:	801e      	strh	r6, [r3, #0]
 8000350:	2624      	movs	r6, #36	; 0x24
 8000352:	801e      	strh	r6, [r3, #0]
 8000354:	260b      	movs	r6, #11
 8000356:	801e      	strh	r6, [r3, #0]
 8000358:	260e      	movs	r6, #14
 800035a:	f04f 0a54 	mov.w	sl, #84	; 0x54
 800035e:	801e      	strh	r6, [r3, #0]
 8000360:	2609      	movs	r6, #9
 8000362:	801e      	strh	r6, [r3, #0]
 8000364:	f8a3 a000 	strh.w	sl, [r3]
 8000368:	f04f 0aa8 	mov.w	sl, #168	; 0xa8
 800036c:	f8a3 a000 	strh.w	sl, [r3]
 8000370:	f04f 0a46 	mov.w	sl, #70	; 0x46
 8000374:	f8a3 a000 	strh.w	sl, [r3]
 8000378:	f04f 0a0c 	mov.w	sl, #12
 800037c:	f8a3 a000 	strh.w	sl, [r3]
 8000380:	f04f 0a17 	mov.w	sl, #23
 8000384:	f8a3 a000 	strh.w	sl, [r3]
 8000388:	801e      	strh	r6, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 800038a:	f04f 0ae1 	mov.w	sl, #225	; 0xe1
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 800038e:	2607      	movs	r6, #7
 8000390:	8018      	strh	r0, [r3, #0]
 8000392:	801e      	strh	r6, [r3, #0]
 8000394:	8019      	strh	r1, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000396:	f8a2 a000 	strh.w	sl, [r2]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 800039a:	f04f 0a19 	mov.w	sl, #25
 800039e:	8019      	strh	r1, [r3, #0]
 80003a0:	f8a3 a000 	strh.w	sl, [r3]
 80003a4:	f8a3 9000 	strh.w	r9, [r3]
 80003a8:	f04f 0904 	mov.w	r9, #4
 80003ac:	f8a3 9000 	strh.w	r9, [r3]
 80003b0:	f8a3 8000 	strh.w	r8, [r3]
 80003b4:	801e      	strh	r6, [r3, #0]
 80003b6:	f04f 0847 	mov.w	r8, #71	; 0x47
 80003ba:	262a      	movs	r6, #42	; 0x2a
 80003bc:	801e      	strh	r6, [r3, #0]
 80003be:	f8a3 8000 	strh.w	r8, [r3]
 80003c2:	f8a3 e000 	strh.w	lr, [r3]
 80003c6:	f8a3 c000 	strh.w	ip, [r3]
 80003ca:	f04f 0c06 	mov.w	ip, #6
 80003ce:	f8a3 c000 	strh.w	ip, [r3]
 80003d2:	f8a3 c000 	strh.w	ip, [r3]
 80003d6:	801f      	strh	r7, [r3, #0]
 80003d8:	2738      	movs	r7, #56	; 0x38
 80003da:	801f      	strh	r7, [r3, #0]
 80003dc:	8018      	strh	r0, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 80003de:	2036      	movs	r0, #54	; 0x36
 80003e0:	8010      	strh	r0, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 80003e2:	2068      	movs	r0, #104	; 0x68
 80003e4:	8018      	strh	r0, [r3, #0]
 80003e6:	20ef      	movs	r0, #239	; 0xef
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 80003e8:	8016      	strh	r6, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 80003ea:	8019      	strh	r1, [r3, #0]
 80003ec:	8019      	strh	r1, [r3, #0]
 80003ee:	8019      	strh	r1, [r3, #0]
 80003f0:	8018      	strh	r0, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 80003f2:	202b      	movs	r0, #43	; 0x2b
 80003f4:	8010      	strh	r0, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 80003f6:	8019      	strh	r1, [r3, #0]
 80003f8:	8019      	strh	r1, [r3, #0]
 80003fa:	213f      	movs	r1, #63	; 0x3f
 80003fc:	801d      	strh	r5, [r3, #0]
 80003fe:	8019      	strh	r1, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000400:	213a      	movs	r1, #58	; 0x3a
 8000402:	8011      	strh	r1, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000404:	2155      	movs	r1, #85	; 0x55
	LCD_Write_Cmd ( 0x3a ); 
	LCD_Write_Data ( 0x55 );
	
	/* Sleep Out (11h)  */
	LCD_Write_Cmd ( 0x11 );	
	Delay ( 0xAFFf<<2 );
 8000406:	4805      	ldr	r0, [pc, #20]	; (800041c <LCD_REG_Config+0x18c>)
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000408:	8019      	strh	r1, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 800040a:	8014      	strh	r4, [r2, #0]
	Delay ( 0xAFFf<<2 );
 800040c:	f7ff ff1c 	bl	8000248 <Delay>
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000410:	2329      	movs	r3, #41	; 0x29
 8000412:	8013      	strh	r3, [r2, #0]
	
	/* Display ON (29h) */
	LCD_Write_Cmd ( 0x29 ); 
	
	
}
 8000414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000418:	60020000 	.word	0x60020000
 800041c:	0002bffc 	.word	0x0002bffc

08000420 <LCD_OpenWindow>:



void LCD_OpenWindow ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight )
{	
 8000420:	b570      	push	{r4, r5, r6, lr}
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000422:	f04f 46c0 	mov.w	r6, #1610612736	; 0x60000000
 8000426:	242a      	movs	r4, #42	; 0x2a
 8000428:	8034      	strh	r4, [r6, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 800042a:	4c0f      	ldr	r4, [pc, #60]	; (8000468 <LCD_OpenWindow+0x48>)
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 				
	LCD_Write_Data ( usCOLUMN >> 8  );	 
 800042c:	0a05      	lsrs	r5, r0, #8
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 800042e:	8025      	strh	r5, [r4, #0]
	LCD_Write_Data ( usCOLUMN & 0xff  );	 
 8000430:	b2c5      	uxtb	r5, r0
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000432:	8025      	strh	r5, [r4, #0]
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );
 8000434:	1885      	adds	r5, r0, r2
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 8000436:	3a01      	subs	r2, #1
 8000438:	4410      	add	r0, r2
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 800043a:	222b      	movs	r2, #43	; 0x2b
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );
 800043c:	3d01      	subs	r5, #1
 800043e:	f3c5 250f 	ubfx	r5, r5, #8, #16
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 8000442:	b2c0      	uxtb	r0, r0
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000444:	8025      	strh	r5, [r4, #0]
 8000446:	8020      	strh	r0, [r4, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000448:	8032      	strh	r2, [r6, #0]

	LCD_Write_Cmd ( CMD_Set_PAGE ); 			     
	LCD_Write_Data ( usPAGE >> 8  );
 800044a:	0a0a      	lsrs	r2, r1, #8
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 800044c:	8022      	strh	r2, [r4, #0]
	LCD_Write_Data ( usPAGE & 0xff  );
 800044e:	b2ca      	uxtb	r2, r1
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000450:	8022      	strh	r2, [r4, #0]
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 8000452:	18ca      	adds	r2, r1, r3
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 8000454:	3b01      	subs	r3, #1
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 8000456:	3a01      	subs	r2, #1
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 8000458:	4419      	add	r1, r3
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 800045a:	f3c2 220f 	ubfx	r2, r2, #8, #16
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 800045e:	b2c9      	uxtb	r1, r1
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000460:	8022      	strh	r2, [r4, #0]
 8000462:	8021      	strh	r1, [r4, #0]
	
}
 8000464:	bd70      	pop	{r4, r5, r6, pc}
 8000466:	bf00      	nop
 8000468:	60020000 	.word	0x60020000

0800046c <LCD_FillColor>:
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 800046c:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000470:	222c      	movs	r2, #44	; 0x2c
 8000472:	801a      	strh	r2, [r3, #0]
	uint32_t i = 0;
	
	/* memory write */
	LCD_Write_Cmd ( CMD_SetPixel );	
		
	for ( i = 0; i < usPoint; i ++ )
 8000474:	2300      	movs	r3, #0
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000476:	4a03      	ldr	r2, [pc, #12]	; (8000484 <LCD_FillColor+0x18>)
	for ( i = 0; i < usPoint; i ++ )
 8000478:	4283      	cmp	r3, r0
 800047a:	d100      	bne.n	800047e <LCD_FillColor+0x12>
		LCD_Write_Data ( usColor );
		
}
 800047c:	4770      	bx	lr
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 800047e:	8011      	strh	r1, [r2, #0]
	for ( i = 0; i < usPoint; i ++ )
 8000480:	3301      	adds	r3, #1
 8000482:	e7f9      	b.n	8000478 <LCD_FillColor+0xc>
 8000484:	60020000 	.word	0x60020000

08000488 <LCD_Clear>:




void LCD_Clear ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor )
{
 8000488:	b570      	push	{r4, r5, r6, lr}
 800048a:	4614      	mov	r4, r2
 800048c:	461d      	mov	r5, r3
 800048e:	f8bd 6010 	ldrh.w	r6, [sp, #16]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 8000492:	f7ff ffc5 	bl	8000420 <LCD_OpenWindow>
	LCD_FillColor ( usWidth * usHeight, usColor );		
 8000496:	4631      	mov	r1, r6
 8000498:	fb05 f004 	mul.w	r0, r5, r4
	
}
 800049c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	LCD_FillColor ( usWidth * usHeight, usColor );		
 80004a0:	f7ff bfe4 	b.w	800046c <LCD_FillColor>

080004a4 <LCD_INIT>:
{
 80004a4:	b507      	push	{r0, r1, r2, lr}
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_RESET);	
 80004a6:	2200      	movs	r2, #0
 80004a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004ac:	4808      	ldr	r0, [pc, #32]	; (80004d0 <LCD_INIT+0x2c>)
 80004ae:	f002 fbeb 	bl	8002c88 <HAL_GPIO_WritePin>
	LCD_Rst();
 80004b2:	f7ff fed3 	bl	800025c <LCD_Rst>
	LCD_REG_Config();
 80004b6:	f7ff feeb 	bl	8000290 <LCD_REG_Config>
	LCD_Clear (0, 0, 320, 240, BACKGROUND);
 80004ba:	2100      	movs	r1, #0
 80004bc:	23f0      	movs	r3, #240	; 0xf0
 80004be:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80004c2:	4608      	mov	r0, r1
 80004c4:	9100      	str	r1, [sp, #0]
 80004c6:	f7ff ffdf 	bl	8000488 <LCD_Clear>
}
 80004ca:	b003      	add	sp, #12
 80004cc:	f85d fb04 	ldr.w	pc, [sp], #4
 80004d0:	40011400 	.word	0x40011400

080004d4 <LCD_DrawChar>:
	
}   


void LCD_DrawChar ( uint16_t usC, uint16_t usP, const char cChar )
{
 80004d4:	b570      	push	{r4, r5, r6, lr}
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	
	ucRelativePositon = cChar;
	
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 80004d6:	230a      	movs	r3, #10
{
 80004d8:	4614      	mov	r4, r2
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 80004da:	2208      	movs	r2, #8
 80004dc:	f7ff ffa0 	bl	8000420 <LCD_OpenWindow>
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 80004e0:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 80004e4:	222c      	movs	r2, #44	; 0x2c
 80004e6:	801a      	strh	r2, [r3, #0]
	
	LCD_Write_Cmd ( CMD_SetPixel );	
	
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 80004e8:	230a      	movs	r3, #10
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 80004ea:	f44f 65fd 	mov.w	r5, #2024	; 0x7e8
 80004ee:	490c      	ldr	r1, [pc, #48]	; (8000520 <LCD_DrawChar+0x4c>)
 80004f0:	fb03 1104 	mla	r1, r3, r4, r1
 80004f4:	4c0b      	ldr	r4, [pc, #44]	; (8000524 <LCD_DrawChar+0x50>)
	{
		ucTemp = ucAscii_1006 [ ucRelativePositon ] [ ucPage ];
 80004f6:	2208      	movs	r2, #8
 80004f8:	f811 0b01 	ldrb.w	r0, [r1], #1
		
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
		{
			if ( ucTemp & 0x01 )
 80004fc:	f010 0601 	ands.w	r6, r0, #1
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8000500:	f102 32ff 	add.w	r2, r2, #4294967295
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000504:	bf14      	ite	ne
 8000506:	8025      	strhne	r5, [r4, #0]
 8000508:	8026      	strheq	r6, [r4, #0]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 800050a:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
				LCD_Write_Data ( 0x07e8 ); // Matrix Green
			
			else
				LCD_Write_Data (  0x0000 );								
			
			ucTemp >>= 1;		
 800050e:	ea4f 0050 	mov.w	r0, r0, lsr #1
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8000512:	d1f3      	bne.n	80004fc <LCD_DrawChar+0x28>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8000514:	3b01      	subs	r3, #1
 8000516:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 800051a:	d1ec      	bne.n	80004f6 <LCD_DrawChar+0x22>
			
		}
		
	}
	
}
 800051c:	bd70      	pop	{r4, r5, r6, pc}
 800051e:	bf00      	nop
 8000520:	08006f58 	.word	0x08006f58
 8000524:	60020000 	.word	0x60020000

08000528 <LCD_CursorForward>:
	LCD_CURSOR_X %= 40;
 8000528:	2228      	movs	r2, #40	; 0x28
	++LCD_CURSOR_X;
 800052a:	4b09      	ldr	r3, [pc, #36]	; (8000550 <LCD_CursorForward+0x28>)
 800052c:	7818      	ldrb	r0, [r3, #0]
 800052e:	3001      	adds	r0, #1
	LCD_CURSOR_X %= 40;
 8000530:	b2c0      	uxtb	r0, r0
 8000532:	fbb0 f1f2 	udiv	r1, r0, r2
 8000536:	fb02 0011 	mls	r0, r2, r1, r0
 800053a:	b2c0      	uxtb	r0, r0
 800053c:	7018      	strb	r0, [r3, #0]
	LCD_DrawChar(LCD_CURSOR_X * WIDTH_EN_CHAR, LCD_CURSOR_Y * HEIGHT_EN_CHAR, CURSOR_CHAR);
 800053e:	4b05      	ldr	r3, [pc, #20]	; (8000554 <LCD_CursorForward+0x2c>)
 8000540:	22db      	movs	r2, #219	; 0xdb
 8000542:	7819      	ldrb	r1, [r3, #0]
 8000544:	00c0      	lsls	r0, r0, #3
 8000546:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800054a:	0049      	lsls	r1, r1, #1
 800054c:	f7ff bfc2 	b.w	80004d4 <LCD_DrawChar>
 8000550:	20000090 	.word	0x20000090
 8000554:	20000091 	.word	0x20000091

08000558 <LCD_CursorNewline>:
void LCD_CursorNewline ( void ) {
 8000558:	b513      	push	{r0, r1, r4, lr}
	if (++LCD_CURSOR_Y > 24) {
 800055a:	4c0f      	ldr	r4, [pc, #60]	; (8000598 <LCD_CursorNewline+0x40>)
 800055c:	7823      	ldrb	r3, [r4, #0]
 800055e:	3301      	adds	r3, #1
 8000560:	b2db      	uxtb	r3, r3
 8000562:	2b18      	cmp	r3, #24
 8000564:	d80d      	bhi.n	8000582 <LCD_CursorNewline+0x2a>
 8000566:	7023      	strb	r3, [r4, #0]
	LCD_CURSOR_X = 0;
 8000568:	2000      	movs	r0, #0
	LCD_DrawChar(LCD_CURSOR_X * WIDTH_EN_CHAR, LCD_CURSOR_Y * HEIGHT_EN_CHAR, CURSOR_CHAR);
 800056a:	22db      	movs	r2, #219	; 0xdb
 800056c:	7821      	ldrb	r1, [r4, #0]
	LCD_CURSOR_X = 0;
 800056e:	4b0b      	ldr	r3, [pc, #44]	; (800059c <LCD_CursorNewline+0x44>)
	LCD_DrawChar(LCD_CURSOR_X * WIDTH_EN_CHAR, LCD_CURSOR_Y * HEIGHT_EN_CHAR, CURSOR_CHAR);
 8000570:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8000574:	0049      	lsls	r1, r1, #1
	LCD_CURSOR_X = 0;
 8000576:	7018      	strb	r0, [r3, #0]
}
 8000578:	b002      	add	sp, #8
 800057a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	LCD_DrawChar(LCD_CURSOR_X * WIDTH_EN_CHAR, LCD_CURSOR_Y * HEIGHT_EN_CHAR, CURSOR_CHAR);
 800057e:	f7ff bfa9 	b.w	80004d4 <LCD_DrawChar>
		LCD_CURSOR_Y = 0;
 8000582:	2100      	movs	r1, #0
		LCD_Clear(0, 0, 320, 240, BACKGROUND);
 8000584:	23f0      	movs	r3, #240	; 0xf0
 8000586:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800058a:	4608      	mov	r0, r1
 800058c:	9100      	str	r1, [sp, #0]
		LCD_CURSOR_Y = 0;
 800058e:	7021      	strb	r1, [r4, #0]
		LCD_Clear(0, 0, 320, 240, BACKGROUND);
 8000590:	f7ff ff7a 	bl	8000488 <LCD_Clear>
 8000594:	e7e8      	b.n	8000568 <LCD_CursorNewline+0x10>
 8000596:	bf00      	nop
 8000598:	20000091 	.word	0x20000091
 800059c:	20000090 	.word	0x20000090

080005a0 <LCD_DrawString>:
}



void LCD_DrawString ( uint16_t usC, uint16_t usP, const char * pStr )
{
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	4604      	mov	r4, r0
 80005a4:	460d      	mov	r5, r1
 80005a6:	1e56      	subs	r6, r2, #1
	while ( * pStr != '\0' )
 80005a8:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 80005ac:	b902      	cbnz	r2, 80005b0 <LCD_DrawString+0x10>
		
		usC += WIDTH_EN_CHAR;
		
	}
	
}
 80005ae:	bd70      	pop	{r4, r5, r6, pc}
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 80005b0:	f5b4 7f9c 	cmp.w	r4, #312	; 0x138
			usP += HEIGHT_EN_CHAR;
 80005b4:	bf82      	ittt	hi
 80005b6:	350a      	addhi	r5, #10
 80005b8:	b2ad      	uxthhi	r5, r5
			usC = LCD_DispWindow_Start_COLUMN;
 80005ba:	2400      	movhi	r4, #0
		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 80005bc:	2de6      	cmp	r5, #230	; 0xe6
			usP = LCD_DispWindow_Start_PAGE;
 80005be:	bf84      	itt	hi
 80005c0:	2500      	movhi	r5, #0
			usC = LCD_DispWindow_Start_COLUMN;
 80005c2:	462c      	movhi	r4, r5
		LCD_DrawChar ( usC, usP, * pStr );
 80005c4:	4629      	mov	r1, r5
 80005c6:	4620      	mov	r0, r4
		usC += WIDTH_EN_CHAR;
 80005c8:	3408      	adds	r4, #8
		LCD_DrawChar ( usC, usP, * pStr );
 80005ca:	f7ff ff83 	bl	80004d4 <LCD_DrawChar>
		usC += WIDTH_EN_CHAR;
 80005ce:	b2a4      	uxth	r4, r4
 80005d0:	e7ea      	b.n	80005a8 <LCD_DrawString+0x8>
	...

080005d4 <writelineTerminal>:
}

/**
 * Write string with line ending to UART & LCD (STM32)
 */
void writelineTerminal(char *buffer) {
 80005d4:	b538      	push	{r3, r4, r5, lr}
 80005d6:	4604      	mov	r4, r0
  // UART
  HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY); HAL_UART_Transmit(&huart1, (uint8_t *)UART_LINE_ENDING, strlen(UART_LINE_ENDING), HAL_MAX_DELAY);
 80005d8:	f7ff fe2e 	bl	8000238 <strlen>
 80005dc:	4d0e      	ldr	r5, [pc, #56]	; (8000618 <writelineTerminal+0x44>)
 80005de:	4621      	mov	r1, r4
 80005e0:	b282      	uxth	r2, r0
 80005e2:	f04f 33ff 	mov.w	r3, #4294967295
 80005e6:	4628      	mov	r0, r5
 80005e8:	f003 fb9d 	bl	8003d26 <HAL_UART_Transmit>
 80005ec:	f04f 33ff 	mov.w	r3, #4294967295
 80005f0:	2202      	movs	r2, #2
 80005f2:	4628      	mov	r0, r5
 80005f4:	4909      	ldr	r1, [pc, #36]	; (800061c <writelineTerminal+0x48>)
 80005f6:	f003 fb96 	bl	8003d26 <HAL_UART_Transmit>

  // LCD
  LCD_DrawString(LCD_CURSOR_X * FONT_WIDTH, LCD_CURSOR_Y * FONT_HEIGHT, buffer);
 80005fa:	4b09      	ldr	r3, [pc, #36]	; (8000620 <writelineTerminal+0x4c>)
 80005fc:	4622      	mov	r2, r4
 80005fe:	7819      	ldrb	r1, [r3, #0]
 8000600:	4b08      	ldr	r3, [pc, #32]	; (8000624 <writelineTerminal+0x50>)
 8000602:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8000606:	7818      	ldrb	r0, [r3, #0]
 8000608:	0049      	lsls	r1, r1, #1
 800060a:	00c0      	lsls	r0, r0, #3
 800060c:	f7ff ffc8 	bl	80005a0 <LCD_DrawString>
  LCD_CursorNewline();
}
 8000610:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  LCD_CursorNewline();
 8000614:	f7ff bfa0 	b.w	8000558 <LCD_CursorNewline>
 8000618:	20008160 	.word	0x20008160
 800061c:	08007958 	.word	0x08007958
 8000620:	20000091 	.word	0x20000091
 8000624:	20000090 	.word	0x20000090

08000628 <writeTerminal>:

/**
 * Write string to UART & LCD without line ending (STM32)
 */
void writeTerminal(char *buffer) {
 8000628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800062c:	4604      	mov	r4, r0
  // UART
  HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 800062e:	f7ff fe03 	bl	8000238 <strlen>

  // LCD
  uint8_t tempX = LCD_CURSOR_X;
  uint8_t tempY = LCD_CURSOR_Y;
  for (uint8_t i = 0; i < strlen(buffer); i++) {
 8000632:	2600      	movs	r6, #0
  HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000634:	f04f 33ff 	mov.w	r3, #4294967295
 8000638:	b282      	uxth	r2, r0
 800063a:	4621      	mov	r1, r4
 800063c:	480e      	ldr	r0, [pc, #56]	; (8000678 <writeTerminal+0x50>)
 800063e:	f003 fb72 	bl	8003d26 <HAL_UART_Transmit>
  uint8_t tempX = LCD_CURSOR_X;
 8000642:	4b0e      	ldr	r3, [pc, #56]	; (800067c <writeTerminal+0x54>)
 8000644:	f893 8000 	ldrb.w	r8, [r3]
  uint8_t tempY = LCD_CURSOR_Y;
 8000648:	4b0d      	ldr	r3, [pc, #52]	; (8000680 <writeTerminal+0x58>)
 800064a:	781d      	ldrb	r5, [r3, #0]
  for (uint8_t i = 0; i < strlen(buffer); i++) {
 800064c:	4620      	mov	r0, r4
 800064e:	f7ff fdf3 	bl	8000238 <strlen>
 8000652:	b2f7      	uxtb	r7, r6
 8000654:	42b8      	cmp	r0, r7
 8000656:	f106 0601 	add.w	r6, r6, #1
 800065a:	d809      	bhi.n	8000670 <writeTerminal+0x48>
    LCD_CursorForward();
  }
  LCD_DrawString(tempX * FONT_WIDTH, tempY * FONT_HEIGHT, buffer);
 800065c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8000660:	4622      	mov	r2, r4
 8000662:	0069      	lsls	r1, r5, #1
 8000664:	ea4f 00c8 	mov.w	r0, r8, lsl #3
}
 8000668:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  LCD_DrawString(tempX * FONT_WIDTH, tempY * FONT_HEIGHT, buffer);
 800066c:	f7ff bf98 	b.w	80005a0 <LCD_DrawString>
    LCD_CursorForward();
 8000670:	f7ff ff5a 	bl	8000528 <LCD_CursorForward>
  for (uint8_t i = 0; i < strlen(buffer); i++) {
 8000674:	e7ea      	b.n	800064c <writeTerminal+0x24>
 8000676:	bf00      	nop
 8000678:	20008160 	.word	0x20008160
 800067c:	20000090 	.word	0x20000090
 8000680:	20000091 	.word	0x20000091

08000684 <writeTerminalChar>:

/**
 * Write char to UART & LCD without line ending (STM32)
 */
void writeTerminalChar(char *buffer) {
 8000684:	b573      	push	{r0, r1, r4, r5, r6, lr}
  // UART
  HAL_UART_Transmit(&huart1, (uint8_t *)buffer, 1, HAL_MAX_DELAY);
 8000686:	2201      	movs	r2, #1
 8000688:	4601      	mov	r1, r0
void writeTerminalChar(char *buffer) {
 800068a:	4605      	mov	r5, r0
  HAL_UART_Transmit(&huart1, (uint8_t *)buffer, 1, HAL_MAX_DELAY);
 800068c:	f04f 33ff 	mov.w	r3, #4294967295
 8000690:	480b      	ldr	r0, [pc, #44]	; (80006c0 <writeTerminalChar+0x3c>)
 8000692:	f003 fb48 	bl	8003d26 <HAL_UART_Transmit>

  // LCD
  uint8_t tempX = LCD_CURSOR_X;
 8000696:	4b0b      	ldr	r3, [pc, #44]	; (80006c4 <writeTerminalChar+0x40>)
 8000698:	781e      	ldrb	r6, [r3, #0]
  uint8_t tempY = LCD_CURSOR_Y;
 800069a:	4b0b      	ldr	r3, [pc, #44]	; (80006c8 <writeTerminalChar+0x44>)
 800069c:	781c      	ldrb	r4, [r3, #0]
  char tempChar[2] = {0x00};
 800069e:	2300      	movs	r3, #0
 80006a0:	f8ad 3004 	strh.w	r3, [sp, #4]
  tempChar[0] = buffer[0];
 80006a4:	782b      	ldrb	r3, [r5, #0]
  tempChar[1] = '\0';
  LCD_CursorForward();
  LCD_DrawString(tempX * FONT_WIDTH, tempY * FONT_HEIGHT, tempChar);
 80006a6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  tempChar[0] = buffer[0];
 80006aa:	f88d 3004 	strb.w	r3, [sp, #4]
  LCD_CursorForward();
 80006ae:	f7ff ff3b 	bl	8000528 <LCD_CursorForward>
  LCD_DrawString(tempX * FONT_WIDTH, tempY * FONT_HEIGHT, tempChar);
 80006b2:	aa01      	add	r2, sp, #4
 80006b4:	0061      	lsls	r1, r4, #1
 80006b6:	00f0      	lsls	r0, r6, #3
 80006b8:	f7ff ff72 	bl	80005a0 <LCD_DrawString>
}
 80006bc:	b002      	add	sp, #8
 80006be:	bd70      	pop	{r4, r5, r6, pc}
 80006c0:	20008160 	.word	0x20008160
 80006c4:	20000090 	.word	0x20000090
 80006c8:	20000091 	.word	0x20000091

080006cc <handleOutput>:
}

/**
 * Write character to UART & LCD (MOS 6502)
 */
void handleOutput(uint8_t value) {
 80006cc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  if (value == 13) {
 80006ce:	280d      	cmp	r0, #13
void handleOutput(uint8_t value) {
 80006d0:	f88d 000f 	strb.w	r0, [sp, #15]
  if (value == 13) {
 80006d4:	d128      	bne.n	8000728 <handleOutput+0x5c>
    // UART Newline
    HAL_UART_Transmit(&huart1, (uint8_t *)UART_LINE_ENDING, strlen(UART_LINE_ENDING), HAL_MAX_DELAY);
    // LCD Newline
    LCD_Clear(LCD_CURSOR_X * FONT_WIDTH, LCD_CURSOR_Y * FONT_HEIGHT, FONT_WIDTH, FONT_HEIGHT, BLACK);
 80006d6:	2400      	movs	r4, #0
 80006d8:	4d16      	ldr	r5, [pc, #88]	; (8000734 <handleOutput+0x68>)
    HAL_UART_Transmit(&huart1, (uint8_t *)UART_LINE_ENDING, strlen(UART_LINE_ENDING), HAL_MAX_DELAY);
 80006da:	f04f 33ff 	mov.w	r3, #4294967295
 80006de:	2202      	movs	r2, #2
 80006e0:	4915      	ldr	r1, [pc, #84]	; (8000738 <handleOutput+0x6c>)
 80006e2:	4816      	ldr	r0, [pc, #88]	; (800073c <handleOutput+0x70>)
    LCD_Clear(LCD_CURSOR_X * FONT_WIDTH, LCD_CURSOR_Y * FONT_HEIGHT, FONT_WIDTH, FONT_HEIGHT, BLACK);
 80006e4:	4e16      	ldr	r6, [pc, #88]	; (8000740 <handleOutput+0x74>)
    HAL_UART_Transmit(&huart1, (uint8_t *)UART_LINE_ENDING, strlen(UART_LINE_ENDING), HAL_MAX_DELAY);
 80006e6:	f003 fb1e 	bl	8003d26 <HAL_UART_Transmit>
    LCD_Clear(LCD_CURSOR_X * FONT_WIDTH, LCD_CURSOR_Y * FONT_HEIGHT, FONT_WIDTH, FONT_HEIGHT, BLACK);
 80006ea:	7829      	ldrb	r1, [r5, #0]
 80006ec:	7830      	ldrb	r0, [r6, #0]
 80006ee:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80006f2:	230a      	movs	r3, #10
 80006f4:	2208      	movs	r2, #8
 80006f6:	9400      	str	r4, [sp, #0]
 80006f8:	0049      	lsls	r1, r1, #1
 80006fa:	00c0      	lsls	r0, r0, #3
 80006fc:	f7ff fec4 	bl	8000488 <LCD_Clear>
    if (++LCD_CURSOR_Y > 23) {
 8000700:	782b      	ldrb	r3, [r5, #0]
 8000702:	3301      	adds	r3, #1
 8000704:	b2db      	uxtb	r3, r3
 8000706:	2b17      	cmp	r3, #23
 8000708:	d804      	bhi.n	8000714 <handleOutput+0x48>
 800070a:	702b      	strb	r3, [r5, #0]
		  LCD_CURSOR_Y = 0;
		  // Clear the screen
		  LCD_Clear(0, 0, 320, 240, BACKGROUND);
	  }
	  LCD_CURSOR_X = 0;
 800070c:	2300      	movs	r3, #0
 800070e:	7033      	strb	r3, [r6, #0]
  }
  else {
    writeTerminalChar((char *)&value);
  }
}
 8000710:	b004      	add	sp, #16
 8000712:	bd70      	pop	{r4, r5, r6, pc}
		  LCD_Clear(0, 0, 320, 240, BACKGROUND);
 8000714:	23f0      	movs	r3, #240	; 0xf0
 8000716:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800071a:	4621      	mov	r1, r4
 800071c:	4620      	mov	r0, r4
 800071e:	9400      	str	r4, [sp, #0]
		  LCD_CURSOR_Y = 0;
 8000720:	702c      	strb	r4, [r5, #0]
		  LCD_Clear(0, 0, 320, 240, BACKGROUND);
 8000722:	f7ff feb1 	bl	8000488 <LCD_Clear>
 8000726:	e7f1      	b.n	800070c <handleOutput+0x40>
    writeTerminalChar((char *)&value);
 8000728:	f10d 000f 	add.w	r0, sp, #15
 800072c:	f7ff ffaa 	bl	8000684 <writeTerminalChar>
}
 8000730:	e7ee      	b.n	8000710 <handleOutput+0x44>
 8000732:	bf00      	nop
 8000734:	20000091 	.word	0x20000091
 8000738:	08007958 	.word	0x08007958
 800073c:	20008160 	.word	0x20008160
 8000740:	20000090 	.word	0x20000090

08000744 <write6502>:
  if (address < RAM_SIZE) {
 8000744:	0403      	lsls	r3, r0, #16
 8000746:	d402      	bmi.n	800074e <write6502+0xa>
    RAM[address] = value;
 8000748:	4b06      	ldr	r3, [pc, #24]	; (8000764 <write6502+0x20>)
 800074a:	5419      	strb	r1, [r3, r0]
  if (address == PIA_DISPLAY_REG) {
 800074c:	4770      	bx	lr
 800074e:	f24d 0312 	movw	r3, #53266	; 0xd012
 8000752:	4298      	cmp	r0, r3
 8000754:	d105      	bne.n	8000762 <write6502+0x1e>
    pia.display_register = value;
 8000756:	4b04      	ldr	r3, [pc, #16]	; (8000768 <write6502+0x24>)
    handleOutput(value);
 8000758:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    pia.display_register = value;
 800075c:	7099      	strb	r1, [r3, #2]
    handleOutput(value);
 800075e:	f7ff bfb5 	b.w	80006cc <handleOutput>
}
 8000762:	4770      	bx	lr
 8000764:	20000092 	.word	0x20000092
 8000768:	200081a9 	.word	0x200081a9

0800076c <initApple1>:

/**
 * Initialize Apple I
 */
void initApple1(void) {
 800076c:	b538      	push	{r3, r4, r5, lr}
  // Wait for space key to be pressed in UART
  do {
    HAL_Delay(1000);
    writelineTerminal("Press <space> to boot Apple I");
 800076e:	4c18      	ldr	r4, [pc, #96]	; (80007d0 <initApple1+0x64>)
    handleInput((char *)keyboardBuffer);
 8000770:	4d18      	ldr	r5, [pc, #96]	; (80007d4 <initApple1+0x68>)
    HAL_Delay(1000);
 8000772:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000776:	f002 f87f 	bl	8002878 <HAL_Delay>
    writelineTerminal("Press <space> to boot Apple I");
 800077a:	4620      	mov	r0, r4
 800077c:	f7ff ff2a 	bl	80005d4 <writelineTerminal>
    handleInput((char *)keyboardBuffer);
 8000780:	4814      	ldr	r0, [pc, #80]	; (80007d4 <initApple1+0x68>)
 8000782:	f000 f835 	bl	80007f0 <handleInput>
  } while (keyboardBuffer[0] != SPACE_KEY);
 8000786:	782b      	ldrb	r3, [r5, #0]
 8000788:	2b20      	cmp	r3, #32
 800078a:	d1f2      	bne.n	8000772 <initApple1+0x6>
  keyboardBuffer[0] = 0x00;
 800078c:	2400      	movs	r4, #0

  // Initialize CPU
  writeTerminal("Initializing CPU...");
 800078e:	4812      	ldr	r0, [pc, #72]	; (80007d8 <initApple1+0x6c>)
  keyboardBuffer[0] = 0x00;
 8000790:	702c      	strb	r4, [r5, #0]
  writeTerminal("Initializing CPU...");
 8000792:	f7ff ff49 	bl	8000628 <writeTerminal>
  reset6502(); writelineTerminal(" Complete");
 8000796:	f000 fa25 	bl	8000be4 <reset6502>
 800079a:	4810      	ldr	r0, [pc, #64]	; (80007dc <initApple1+0x70>)
 800079c:	f7ff ff1a 	bl	80005d4 <writelineTerminal>

  // Initialize RAM
  writeTerminal("Initializing RAM...");
 80007a0:	480f      	ldr	r0, [pc, #60]	; (80007e0 <initApple1+0x74>)
 80007a2:	f7ff ff41 	bl	8000628 <writeTerminal>
  for (uint16_t i = 0; i < RAM_SIZE; i++) {
    RAM[i] = 0x00;
 80007a6:	4621      	mov	r1, r4
 80007a8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80007ac:	480d      	ldr	r0, [pc, #52]	; (80007e4 <initApple1+0x78>)
 80007ae:	f005 f8e0 	bl	8005972 <memset>
  }
  writelineTerminal(" Complete");
 80007b2:	480a      	ldr	r0, [pc, #40]	; (80007dc <initApple1+0x70>)
 80007b4:	f7ff ff0e 	bl	80005d4 <writelineTerminal>

  // Initialize PIA
  writeTerminal("Initializing PIA...");
 80007b8:	480b      	ldr	r0, [pc, #44]	; (80007e8 <initApple1+0x7c>)
 80007ba:	f7ff ff35 	bl	8000628 <writeTerminal>
  pia.keyboard_register = 0x00;
 80007be:	4b0b      	ldr	r3, [pc, #44]	; (80007ec <initApple1+0x80>)
  pia.keyboard_control = 0x00;
  pia.display_register = 0x00;
  writelineTerminal(" Complete");
 80007c0:	4806      	ldr	r0, [pc, #24]	; (80007dc <initApple1+0x70>)
  pia.keyboard_register = 0x00;
 80007c2:	701c      	strb	r4, [r3, #0]
  pia.keyboard_control = 0x00;
 80007c4:	705c      	strb	r4, [r3, #1]
  pia.display_register = 0x00;
 80007c6:	709c      	strb	r4, [r3, #2]
}
 80007c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  writelineTerminal(" Complete");
 80007cc:	f7ff bf02 	b.w	80005d4 <writelineTerminal>
 80007d0:	0800795b 	.word	0x0800795b
 80007d4:	200081a8 	.word	0x200081a8
 80007d8:	08007979 	.word	0x08007979
 80007dc:	0800798d 	.word	0x0800798d
 80007e0:	08007997 	.word	0x08007997
 80007e4:	20000092 	.word	0x20000092
 80007e8:	080079ab 	.word	0x080079ab
 80007ec:	200081a9 	.word	0x200081a9

080007f0 <handleInput>:
void handleInput(char *buffer) {
 80007f0:	b570      	push	{r4, r5, r6, lr}
 80007f2:	4604      	mov	r4, r0
  HAL_UART_Receive(&huart1, (uint8_t *)buffer, 1, KEYBOARD_READ_INTERVAL); // Read from UART
 80007f4:	230a      	movs	r3, #10
 80007f6:	2201      	movs	r2, #1
 80007f8:	4601      	mov	r1, r0
void handleInput(char *buffer) {
 80007fa:	b090      	sub	sp, #64	; 0x40
  HAL_UART_Receive(&huart1, (uint8_t *)buffer, 1, KEYBOARD_READ_INTERVAL); // Read from UART
 80007fc:	4823      	ldr	r0, [pc, #140]	; (800088c <handleInput+0x9c>)
 80007fe:	f003 fadd 	bl	8003dbc <HAL_UART_Receive>
  buffer[0] &= 0x7F; // Mask out MSB
 8000802:	7823      	ldrb	r3, [r4, #0]
 8000804:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  if (buffer[0] >= 'a' && buffer[0] <= 'z') {
 8000808:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800080c:	2a19      	cmp	r2, #25
  buffer[0] &= 0x7F; // Mask out MSB
 800080e:	7023      	strb	r3, [r4, #0]
  if (buffer[0] >= 'a' && buffer[0] <= 'z') {
 8000810:	d803      	bhi.n	800081a <handleInput+0x2a>
    buffer[0] -= 0x20;
 8000812:	3b20      	subs	r3, #32
    buffer[0] = '\r';
 8000814:	7023      	strb	r3, [r4, #0]
}
 8000816:	b010      	add	sp, #64	; 0x40
 8000818:	bd70      	pop	{r4, r5, r6, pc}
  else if (buffer[0] == '\n') {
 800081a:	2b0a      	cmp	r3, #10
 800081c:	d101      	bne.n	8000822 <handleInput+0x32>
    buffer[0] = '\r';
 800081e:	230d      	movs	r3, #13
 8000820:	e7f8      	b.n	8000814 <handleInput+0x24>
  else if (buffer[0] == '\b') {
 8000822:	2b08      	cmp	r3, #8
 8000824:	d101      	bne.n	800082a <handleInput+0x3a>
    buffer[0] = 0x5F;
 8000826:	235f      	movs	r3, #95	; 0x5f
 8000828:	e7f4      	b.n	8000814 <handleInput+0x24>
  else if (buffer[0] == 0x7F) {
 800082a:	2b7f      	cmp	r3, #127	; 0x7f
 800082c:	d0fb      	beq.n	8000826 <handleInput+0x36>
  else if (buffer[0] == 0x03) {
 800082e:	2b03      	cmp	r3, #3
 8000830:	d10e      	bne.n	8000850 <handleInput+0x60>
    writelineTerminal("[Ctrl + C] Resetting in 5 seconds...");
 8000832:	4817      	ldr	r0, [pc, #92]	; (8000890 <handleInput+0xa0>)
 8000834:	f7ff fece 	bl	80005d4 <writelineTerminal>
    HAL_Delay(5000);
 8000838:	f241 3088 	movw	r0, #5000	; 0x1388
 800083c:	f002 f81c 	bl	8002878 <HAL_Delay>
    keyboardBuffer[0] = SPACE_KEY;
 8000840:	2220      	movs	r2, #32
 8000842:	4b14      	ldr	r3, [pc, #80]	; (8000894 <handleInput+0xa4>)
 8000844:	701a      	strb	r2, [r3, #0]
}
 8000846:	b010      	add	sp, #64	; 0x40
 8000848:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    initApple1();
 800084c:	f7ff bf8e 	b.w	800076c <initApple1>
  else if (buffer[0] == 0x0C) {
 8000850:	2b0c      	cmp	r3, #12
 8000852:	d1e0      	bne.n	8000816 <handleInput+0x26>
    writelineTerminal("[Ctrl + L] Loading tapes...");
 8000854:	4810      	ldr	r0, [pc, #64]	; (8000898 <handleInput+0xa8>)
 8000856:	f7ff febd 	bl	80005d4 <writelineTerminal>
    writelineTerminal("Enter Filename: apple30th.0280.0FFF.bin");
 800085a:	4810      	ldr	r0, [pc, #64]	; (800089c <handleInput+0xac>)
 800085c:	f7ff feba 	bl	80005d4 <writelineTerminal>
    char filename[64] = "apple30th.0280.0FFF.bin";
 8000860:	466a      	mov	r2, sp
 8000862:	4615      	mov	r5, r2
 8000864:	4b0e      	ldr	r3, [pc, #56]	; (80008a0 <handleInput+0xb0>)
 8000866:	f103 0618 	add.w	r6, r3, #24
 800086a:	4614      	mov	r4, r2
 800086c:	6818      	ldr	r0, [r3, #0]
 800086e:	6859      	ldr	r1, [r3, #4]
 8000870:	3308      	adds	r3, #8
 8000872:	c403      	stmia	r4!, {r0, r1}
 8000874:	42b3      	cmp	r3, r6
 8000876:	4622      	mov	r2, r4
 8000878:	d1f7      	bne.n	800086a <handleInput+0x7a>
 800087a:	2228      	movs	r2, #40	; 0x28
 800087c:	2100      	movs	r1, #0
 800087e:	a806      	add	r0, sp, #24
 8000880:	f005 f877 	bl	8005972 <memset>
    tapeLoading(filename);
 8000884:	4628      	mov	r0, r5
 8000886:	f001 fdc5 	bl	8002414 <tapeLoading>
}
 800088a:	e7c4      	b.n	8000816 <handleInput+0x26>
 800088c:	20008160 	.word	0x20008160
 8000890:	080079bf 	.word	0x080079bf
 8000894:	200081a8 	.word	0x200081a8
 8000898:	080079e4 	.word	0x080079e4
 800089c:	08007a00 	.word	0x08007a00
 80008a0:	08006f18 	.word	0x08006f18

080008a4 <read6502>:
  if (address < RAM_SIZE) return RAM[address];
 80008a4:	0403      	lsls	r3, r0, #16
uint8_t read6502(uint16_t address) { // Memory mapping for Apple I
 80008a6:	b510      	push	{r4, lr}
  if (address < RAM_SIZE) return RAM[address];
 80008a8:	d402      	bmi.n	80008b0 <read6502+0xc>
 80008aa:	4b16      	ldr	r3, [pc, #88]	; (8000904 <read6502+0x60>)
    if (monitor_addr < 0x100) return monitor[monitor_addr];
 80008ac:	5c18      	ldrb	r0, [r3, r0]
 80008ae:	e005      	b.n	80008bc <read6502+0x18>
  if (address == PIA_KEYBOARD_REG) {
 80008b0:	f24d 0310 	movw	r3, #53264	; 0xd010
 80008b4:	4298      	cmp	r0, r3
 80008b6:	d102      	bne.n	80008be <read6502+0x1a>
    return pia.keyboard_register;
 80008b8:	4b13      	ldr	r3, [pc, #76]	; (8000908 <read6502+0x64>)
 80008ba:	7818      	ldrb	r0, [r3, #0]
}
 80008bc:	bd10      	pop	{r4, pc}
  if (address == PIA_KEYBOARD_CTRL) {
 80008be:	f24d 0311 	movw	r3, #53265	; 0xd011
 80008c2:	4298      	cmp	r0, r3
 80008c4:	d10f      	bne.n	80008e6 <read6502+0x42>
    handleInput((char *)keyboardBuffer);
 80008c6:	4c11      	ldr	r4, [pc, #68]	; (800090c <read6502+0x68>)
 80008c8:	4620      	mov	r0, r4
 80008ca:	f7ff ff91 	bl	80007f0 <handleInput>
    pia.keyboard_register = keyboardBuffer[0] | 0x80;
 80008ce:	7823      	ldrb	r3, [r4, #0]
 80008d0:	4a0d      	ldr	r2, [pc, #52]	; (8000908 <read6502+0x64>)
 80008d2:	f063 017f 	orn	r1, r3, #127	; 0x7f
 80008d6:	7011      	strb	r1, [r2, #0]
    if (keyboardBuffer[0] != 0x00) {
 80008d8:	b90b      	cbnz	r3, 80008de <read6502+0x3a>
      return 0x00;
 80008da:	2000      	movs	r0, #0
 80008dc:	e7ee      	b.n	80008bc <read6502+0x18>
      keyboardBuffer[0] = 0x00;
 80008de:	2300      	movs	r3, #0
      return 0x80;
 80008e0:	2080      	movs	r0, #128	; 0x80
      keyboardBuffer[0] = 0x00;
 80008e2:	7023      	strb	r3, [r4, #0]
      return 0x80;
 80008e4:	e7ea      	b.n	80008bc <read6502+0x18>
  if (address >= BASIC_START && address <= 0xEFFF) {
 80008e6:	f500 5300 	add.w	r3, r0, #8192	; 0x2000
 80008ea:	b29b      	uxth	r3, r3
 80008ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80008f0:	d202      	bcs.n	80008f8 <read6502+0x54>
      return BASIC[BASIC_addr];
 80008f2:	4a07      	ldr	r2, [pc, #28]	; (8000910 <read6502+0x6c>)
 80008f4:	5cd0      	ldrb	r0, [r2, r3]
 80008f6:	e7e1      	b.n	80008bc <read6502+0x18>
  if (address >= 0xF000) {
 80008f8:	f5b0 4f70 	cmp.w	r0, #61440	; 0xf000
 80008fc:	d3ed      	bcc.n	80008da <read6502+0x36>
    if (monitor_addr < 0x100) return monitor[monitor_addr];
 80008fe:	4b05      	ldr	r3, [pc, #20]	; (8000914 <read6502+0x70>)
 8000900:	b2c0      	uxtb	r0, r0
 8000902:	e7d3      	b.n	80008ac <read6502+0x8>
 8000904:	20000092 	.word	0x20000092
 8000908:	200081a9 	.word	0x200081a9
 800090c:	200081a8 	.word	0x200081a8
 8000910:	08007a28 	.word	0x08007a28
 8000914:	08008a28 	.word	0x08008a28

08000918 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000918:	b510      	push	{r4, lr}
 800091a:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800091c:	2214      	movs	r2, #20
 800091e:	2100      	movs	r1, #0
 8000920:	a808      	add	r0, sp, #32
 8000922:	f005 f826 	bl	8005972 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000926:	2214      	movs	r2, #20
 8000928:	2100      	movs	r1, #0
 800092a:	a801      	add	r0, sp, #4
 800092c:	f005 f821 	bl	8005972 <memset>
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000930:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000932:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000936:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000938:	e9cd 430d 	strd	r4, r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800093c:	e9cd 2306 	strd	r2, r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000940:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000944:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000946:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000948:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800094a:	f002 f9a3 	bl	8002c94 <HAL_RCC_OscConfig>
 800094e:	b108      	cbz	r0, 8000954 <SystemClock_Config+0x3c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000950:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000952:	e7fe      	b.n	8000952 <SystemClock_Config+0x3a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000954:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000956:	e9cd 3401 	strd	r3, r4, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800095a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800095e:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000960:	e9cd 3004 	strd	r3, r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000964:	4621      	mov	r1, r4
 8000966:	a801      	add	r0, sp, #4
 8000968:	f002 fb56 	bl	8003018 <HAL_RCC_ClockConfig>
 800096c:	b108      	cbz	r0, 8000972 <SystemClock_Config+0x5a>
 800096e:	b672      	cpsid	i
  while (1)
 8000970:	e7fe      	b.n	8000970 <SystemClock_Config+0x58>
}
 8000972:	b010      	add	sp, #64	; 0x40
 8000974:	bd10      	pop	{r4, pc}
	...

08000978 <main>:
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000978:	2510      	movs	r5, #16
{
 800097a:	b580      	push	{r7, lr}
 800097c:	b08c      	sub	sp, #48	; 0x30
  HAL_Init();
 800097e:	f001 ff57 	bl	8002830 <HAL_Init>
  SystemClock_Config();
 8000982:	f7ff ffc9 	bl	8000918 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000986:	462a      	mov	r2, r5
 8000988:	2100      	movs	r1, #0
 800098a:	a805      	add	r0, sp, #20
 800098c:	f004 fff1 	bl	8005972 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000990:	4b54      	ldr	r3, [pc, #336]	; (8000ae4 <main+0x16c>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000992:	2400      	movs	r4, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000994:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000996:	f04f 0801 	mov.w	r8, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800099a:	432a      	orrs	r2, r5
 800099c:	619a      	str	r2, [r3, #24]
 800099e:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009a0:	2703      	movs	r7, #3
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009a2:	402a      	ands	r2, r5
 80009a4:	9200      	str	r2, [sp, #0]
 80009a6:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009a8:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009aa:	f44f 5680 	mov.w	r6, #4096	; 0x1000
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80009b2:	619a      	str	r2, [r3, #24]
 80009b4:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_RESET);
 80009b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009ba:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80009be:	9201      	str	r2, [sp, #4]
 80009c0:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009c2:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_RESET);
 80009c4:	4848      	ldr	r0, [pc, #288]	; (8000ae8 <main+0x170>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009c6:	f042 0220 	orr.w	r2, r2, #32
 80009ca:	619a      	str	r2, [r3, #24]
 80009cc:	699a      	ldr	r2, [r3, #24]
 80009ce:	f002 0220 	and.w	r2, r2, #32
 80009d2:	9202      	str	r2, [sp, #8]
 80009d4:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d6:	699a      	ldr	r2, [r3, #24]
 80009d8:	f042 0204 	orr.w	r2, r2, #4
 80009dc:	619a      	str	r2, [r3, #24]
 80009de:	699a      	ldr	r2, [r3, #24]
 80009e0:	f002 0204 	and.w	r2, r2, #4
 80009e4:	9203      	str	r2, [sp, #12]
 80009e6:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009e8:	699a      	ldr	r2, [r3, #24]
 80009ea:	f042 0208 	orr.w	r2, r2, #8
 80009ee:	619a      	str	r2, [r3, #24]
 80009f0:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_RESET);
 80009f2:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009f4:	f003 0308 	and.w	r3, r3, #8
 80009f8:	9304      	str	r3, [sp, #16]
 80009fa:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_RESET);
 80009fc:	f002 f944 	bl	8002c88 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 8000a00:	2200      	movs	r2, #0
 8000a02:	2102      	movs	r1, #2
 8000a04:	4839      	ldr	r0, [pc, #228]	; (8000aec <main+0x174>)
 8000a06:	f002 f93f 	bl	8002c88 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 8000a0a:	4837      	ldr	r0, [pc, #220]	; (8000ae8 <main+0x170>)
 8000a0c:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a0e:	e9cd 6805 	strd	r6, r8, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a12:	e9cd 4707 	strd	r4, r7, [sp, #28]
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 8000a16:	f002 f849 	bl	8002aac <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SDIO_DETECT_Pin;
 8000a1a:	f44f 7380 	mov.w	r3, #256	; 0x100
  HAL_GPIO_Init(SDIO_DETECT_GPIO_Port, &GPIO_InitStruct);
 8000a1e:	4834      	ldr	r0, [pc, #208]	; (8000af0 <main+0x178>)
 8000a20:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a22:	e9cd 3405 	strd	r3, r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a26:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(SDIO_DETECT_GPIO_Port, &GPIO_InitStruct);
 8000a28:	f002 f840 	bl	8002aac <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_RST_Pin;
 8000a2c:	2302      	movs	r3, #2
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 8000a2e:	482f      	ldr	r0, [pc, #188]	; (8000aec <main+0x174>)
 8000a30:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a32:	e9cd 3805 	strd	r3, r8, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a36:	e9cd 4707 	strd	r4, r7, [sp, #28]
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 8000a3a:	f002 f837 	bl	8002aac <HAL_GPIO_Init>
  huart1.Init.BaudRate = 115200;
 8000a3e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart1.Instance = USART1;
 8000a42:	482c      	ldr	r0, [pc, #176]	; (8000af4 <main+0x17c>)
  huart1.Init.BaudRate = 115200;
 8000a44:	4a2c      	ldr	r2, [pc, #176]	; (8000af8 <main+0x180>)
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a46:	e9c0 4402 	strd	r4, r4, [r0, #8]
  huart1.Init.BaudRate = 115200;
 8000a4a:	e9c0 2300 	strd	r2, r3, [r0]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a4e:	230c      	movs	r3, #12
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a50:	6104      	str	r4, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a52:	e9c0 3405 	strd	r3, r4, [r0, #20]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a56:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a58:	f003 f936 	bl	8003cc8 <HAL_UART_Init>
 8000a5c:	4602      	mov	r2, r0
 8000a5e:	b108      	cbz	r0, 8000a64 <main+0xec>
 8000a60:	b672      	cpsid	i
  while (1)
 8000a62:	e7fe      	b.n	8000a62 <main+0xea>
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000a64:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000a68:	900b      	str	r0, [sp, #44]	; 0x2c
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000a6a:	4824      	ldr	r0, [pc, #144]	; (8000afc <main+0x184>)
  Timing.DataSetupTime = 255;
 8000a6c:	21ff      	movs	r1, #255	; 0xff
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000a6e:	6003      	str	r3, [r0, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000a70:	f503 7382 	add.w	r3, r3, #260	; 0x104
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8000a74:	e9c0 3201 	strd	r3, r2, [r0, #4]
  Timing.AddressSetupTime = 15;
 8000a78:	230f      	movs	r3, #15
  Timing.BusTurnAroundDuration = 15;
 8000a7a:	e9cd 1307 	strd	r1, r3, [sp, #28]
  Timing.AddressHoldTime = 15;
 8000a7e:	e9cd 3305 	strd	r3, r3, [sp, #20]
  Timing.DataLatency = 17;
 8000a82:	2311      	movs	r3, #17
  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000a84:	a905      	add	r1, sp, #20
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000a86:	e9c0 2203 	strd	r2, r2, [r0, #12]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000a8a:	e9c0 5205 	strd	r5, r2, [r0, #20]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8000a8e:	e9c0 2207 	strd	r2, r2, [r0, #28]
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8000a92:	e9c0 2609 	strd	r2, r6, [r0, #36]	; 0x24
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8000a96:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000a9a:	e9c0 220d 	strd	r2, r2, [r0, #52]	; 0x34
  Timing.CLKDivision = 16;
 8000a9e:	9509      	str	r5, [sp, #36]	; 0x24
  Timing.DataLatency = 17;
 8000aa0:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000aa2:	f003 f86f 	bl	8003b84 <HAL_SRAM_Init>
 8000aa6:	b108      	cbz	r0, 8000aac <main+0x134>
 8000aa8:	b672      	cpsid	i
  while (1)
 8000aaa:	e7fe      	b.n	8000aaa <main+0x132>
  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 8000aac:	4a14      	ldr	r2, [pc, #80]	; (8000b00 <main+0x188>)
 8000aae:	69d3      	ldr	r3, [r2, #28]
 8000ab0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ab4:	61d3      	str	r3, [r2, #28]
  hsd.Instance = SDIO;
 8000ab6:	4b13      	ldr	r3, [pc, #76]	; (8000b04 <main+0x18c>)
 8000ab8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000abc:	e9c3 2000 	strd	r2, r0, [r3]
  hsd.Init.ClockDiv = 4;
 8000ac0:	2204      	movs	r2, #4
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000ac2:	e9c3 0002 	strd	r0, r0, [r3, #8]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000ac6:	e9c3 0004 	strd	r0, r0, [r3, #16]
  hsd.Init.ClockDiv = 4;
 8000aca:	619a      	str	r2, [r3, #24]
  MX_FATFS_Init();
 8000acc:	f003 fd44 	bl	8004558 <MX_FATFS_Init>
  LCD_INIT(); // Initialize LCD
 8000ad0:	f7ff fce8 	bl	80004a4 <LCD_INIT>
  initApple1(); // Initialize Apple I
 8000ad4:	f7ff fe4a 	bl	800076c <initApple1>
    exec6502(INSTRUCTION_CHUNK);
 8000ad8:	f242 7010 	movw	r0, #10000	; 0x2710
 8000adc:	f000 ffe6 	bl	8001aac <exec6502>
  while (1)
 8000ae0:	e7fa      	b.n	8000ad8 <main+0x160>
 8000ae2:	bf00      	nop
 8000ae4:	40021000 	.word	0x40021000
 8000ae8:	40011400 	.word	0x40011400
 8000aec:	40011800 	.word	0x40011800
 8000af0:	40010c00 	.word	0x40010c00
 8000af4:	20008160 	.word	0x20008160
 8000af8:	40013800 	.word	0x40013800
 8000afc:	20008118 	.word	0x20008118
 8000b00:	40010000 	.word	0x40010000
 8000b04:	20008094 	.word	0x20008094

08000b08 <getvalue>:
    startpage = ea & 0xFF00;
    ea += (uint16_t)y;

}

static uint16_t getvalue() {
 8000b08:	b508      	push	{r3, lr}
    if (useaccum) return((uint16_t)a);
 8000b0a:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <getvalue+0x1c>)
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	b113      	cbz	r3, 8000b16 <getvalue+0xe>
 8000b10:	4b05      	ldr	r3, [pc, #20]	; (8000b28 <getvalue+0x20>)
 8000b12:	7818      	ldrb	r0, [r3, #0]
        else return((uint16_t)read6502(ea));
}
 8000b14:	bd08      	pop	{r3, pc}
        else return((uint16_t)read6502(ea));
 8000b16:	4b05      	ldr	r3, [pc, #20]	; (8000b2c <getvalue+0x24>)
 8000b18:	8818      	ldrh	r0, [r3, #0]
 8000b1a:	f7ff fec3 	bl	80008a4 <read6502>
 8000b1e:	b280      	uxth	r0, r0
 8000b20:	e7f8      	b.n	8000b14 <getvalue+0xc>
 8000b22:	bf00      	nop
 8000b24:	200081c7 	.word	0x200081c7
 8000b28:	200081ad 	.word	0x200081ad
 8000b2c:	200081b6 	.word	0x200081b6

08000b30 <bcc.part.0>:

void bcc() {
    if ((cpustatus & FLAG_CARRY) == 0) {
        oldpc = pc;
        pc += reladdr;
        if ((oldpc & 0xFF00) != (pc & 0xFF00)) clockticks6502 += 2; // check if jump crossed a page boundary
 8000b30:	4a02      	ldr	r2, [pc, #8]	; (8000b3c <bcc.part.0+0xc>)
 8000b32:	6813      	ldr	r3, [r2, #0]
 8000b34:	3302      	adds	r3, #2
 8000b36:	6013      	str	r3, [r2, #0]
            else clockticks6502++;
    }
}
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	200081b0 	.word	0x200081b0

08000b40 <dex.part.0>:

void dex() {
    x--;
   
    zerocalc(x);
    signcalc(x);
 8000b40:	4a02      	ldr	r2, [pc, #8]	; (8000b4c <dex.part.0+0xc>)
 8000b42:	7813      	ldrb	r3, [r2, #0]
 8000b44:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000b48:	7013      	strb	r3, [r2, #0]
}
 8000b4a:	4770      	bx	lr
 8000b4c:	200081b4 	.word	0x200081b4

08000b50 <push16>:
void push16(uint16_t pushval) {
 8000b50:	b538      	push	{r3, r4, r5, lr}
 8000b52:	4605      	mov	r5, r0
    write6502(BASE_STACK + sp, (pushval >> 8) & 0xFF);
 8000b54:	4c09      	ldr	r4, [pc, #36]	; (8000b7c <push16+0x2c>)
 8000b56:	0a29      	lsrs	r1, r5, #8
 8000b58:	7820      	ldrb	r0, [r4, #0]
 8000b5a:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8000b5e:	f7ff fdf1 	bl	8000744 <write6502>
    write6502(BASE_STACK + ((sp - 1) & 0xFF), pushval & 0xFF);
 8000b62:	7823      	ldrb	r3, [r4, #0]
 8000b64:	b2e9      	uxtb	r1, r5
 8000b66:	3b01      	subs	r3, #1
 8000b68:	b2db      	uxtb	r3, r3
 8000b6a:	f503 7080 	add.w	r0, r3, #256	; 0x100
 8000b6e:	f7ff fde9 	bl	8000744 <write6502>
    sp -= 2;
 8000b72:	7823      	ldrb	r3, [r4, #0]
 8000b74:	3b02      	subs	r3, #2
 8000b76:	7023      	strb	r3, [r4, #0]
}
 8000b78:	bd38      	pop	{r3, r4, r5, pc}
 8000b7a:	bf00      	nop
 8000b7c:	200081c6 	.word	0x200081c6

08000b80 <push8>:
    write6502(BASE_STACK + sp--, pushval);
 8000b80:	4a04      	ldr	r2, [pc, #16]	; (8000b94 <push8+0x14>)
void push8(uint8_t pushval) {
 8000b82:	4601      	mov	r1, r0
    write6502(BASE_STACK + sp--, pushval);
 8000b84:	7813      	ldrb	r3, [r2, #0]
 8000b86:	1e58      	subs	r0, r3, #1
 8000b88:	7010      	strb	r0, [r2, #0]
 8000b8a:	f503 7080 	add.w	r0, r3, #256	; 0x100
 8000b8e:	f7ff bdd9 	b.w	8000744 <write6502>
 8000b92:	bf00      	nop
 8000b94:	200081c6 	.word	0x200081c6

08000b98 <pull16>:
uint16_t pull16() {
 8000b98:	b538      	push	{r3, r4, r5, lr}
    temp16 = read6502(BASE_STACK + ((sp + 1) & 0xFF)) | ((uint16_t)read6502(BASE_STACK + ((sp + 2) & 0xFF)) << 8);
 8000b9a:	4d0b      	ldr	r5, [pc, #44]	; (8000bc8 <pull16+0x30>)
 8000b9c:	7828      	ldrb	r0, [r5, #0]
 8000b9e:	3001      	adds	r0, #1
 8000ba0:	b2c0      	uxtb	r0, r0
 8000ba2:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8000ba6:	f7ff fe7d 	bl	80008a4 <read6502>
 8000baa:	4604      	mov	r4, r0
 8000bac:	7828      	ldrb	r0, [r5, #0]
 8000bae:	3002      	adds	r0, #2
 8000bb0:	b2c0      	uxtb	r0, r0
 8000bb2:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8000bb6:	f7ff fe75 	bl	80008a4 <read6502>
    sp += 2;
 8000bba:	782b      	ldrb	r3, [r5, #0]
    temp16 = read6502(BASE_STACK + ((sp + 1) & 0xFF)) | ((uint16_t)read6502(BASE_STACK + ((sp + 2) & 0xFF)) << 8);
 8000bbc:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
    sp += 2;
 8000bc0:	3302      	adds	r3, #2
 8000bc2:	702b      	strb	r3, [r5, #0]
}
 8000bc4:	b280      	uxth	r0, r0
 8000bc6:	bd38      	pop	{r3, r4, r5, pc}
 8000bc8:	200081c6 	.word	0x200081c6

08000bcc <pull8>:
    return (read6502(BASE_STACK + ++sp));
 8000bcc:	4b04      	ldr	r3, [pc, #16]	; (8000be0 <pull8+0x14>)
 8000bce:	7818      	ldrb	r0, [r3, #0]
 8000bd0:	3001      	adds	r0, #1
 8000bd2:	b2c0      	uxtb	r0, r0
 8000bd4:	7018      	strb	r0, [r3, #0]
 8000bd6:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8000bda:	f7ff be63 	b.w	80008a4 <read6502>
 8000bde:	bf00      	nop
 8000be0:	200081c6 	.word	0x200081c6

08000be4 <reset6502>:
void reset6502() {
 8000be4:	b510      	push	{r4, lr}
    pc = (uint16_t)read6502(0xFFFC) | ((uint16_t)read6502(0xFFFD) << 8);
 8000be6:	f64f 70fc 	movw	r0, #65532	; 0xfffc
 8000bea:	f7ff fe5b 	bl	80008a4 <read6502>
 8000bee:	4604      	mov	r4, r0
 8000bf0:	f64f 70fd 	movw	r0, #65533	; 0xfffd
 8000bf4:	f7ff fe56 	bl	80008a4 <read6502>
 8000bf8:	4b09      	ldr	r3, [pc, #36]	; (8000c20 <reset6502+0x3c>)
 8000bfa:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
 8000bfe:	801c      	strh	r4, [r3, #0]
    a = 0;
 8000c00:	2300      	movs	r3, #0
 8000c02:	4a08      	ldr	r2, [pc, #32]	; (8000c24 <reset6502+0x40>)
 8000c04:	7013      	strb	r3, [r2, #0]
    x = 0;
 8000c06:	4a08      	ldr	r2, [pc, #32]	; (8000c28 <reset6502+0x44>)
 8000c08:	7013      	strb	r3, [r2, #0]
    y = 0;
 8000c0a:	4a08      	ldr	r2, [pc, #32]	; (8000c2c <reset6502+0x48>)
 8000c0c:	7013      	strb	r3, [r2, #0]
    sp = 0xFD;
 8000c0e:	22fd      	movs	r2, #253	; 0xfd
 8000c10:	4b07      	ldr	r3, [pc, #28]	; (8000c30 <reset6502+0x4c>)
 8000c12:	701a      	strb	r2, [r3, #0]
    cpustatus |= FLAG_CONSTANT;
 8000c14:	4a07      	ldr	r2, [pc, #28]	; (8000c34 <reset6502+0x50>)
 8000c16:	7813      	ldrb	r3, [r2, #0]
 8000c18:	f043 0320 	orr.w	r3, r3, #32
 8000c1c:	7013      	strb	r3, [r2, #0]
}
 8000c1e:	bd10      	pop	{r4, pc}
 8000c20:	200081c0 	.word	0x200081c0
 8000c24:	200081ad 	.word	0x200081ad
 8000c28:	200081ca 	.word	0x200081ca
 8000c2c:	200081cb 	.word	0x200081cb
 8000c30:	200081c6 	.word	0x200081c6
 8000c34:	200081b4 	.word	0x200081b4

08000c38 <imm>:
    ea = pc++;
 8000c38:	4a03      	ldr	r2, [pc, #12]	; (8000c48 <imm+0x10>)
 8000c3a:	8813      	ldrh	r3, [r2, #0]
 8000c3c:	1c59      	adds	r1, r3, #1
 8000c3e:	8011      	strh	r1, [r2, #0]
 8000c40:	4a02      	ldr	r2, [pc, #8]	; (8000c4c <imm+0x14>)
 8000c42:	8013      	strh	r3, [r2, #0]
}
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	200081c0 	.word	0x200081c0
 8000c4c:	200081b6 	.word	0x200081b6

08000c50 <zp>:
void zp() { // zero-page
 8000c50:	b508      	push	{r3, lr}
    ea = (uint16_t)read6502((uint16_t)pc++);
 8000c52:	4b04      	ldr	r3, [pc, #16]	; (8000c64 <zp+0x14>)
 8000c54:	8818      	ldrh	r0, [r3, #0]
 8000c56:	1c42      	adds	r2, r0, #1
 8000c58:	801a      	strh	r2, [r3, #0]
 8000c5a:	f7ff fe23 	bl	80008a4 <read6502>
 8000c5e:	4b02      	ldr	r3, [pc, #8]	; (8000c68 <zp+0x18>)
 8000c60:	8018      	strh	r0, [r3, #0]
}
 8000c62:	bd08      	pop	{r3, pc}
 8000c64:	200081c0 	.word	0x200081c0
 8000c68:	200081b6 	.word	0x200081b6

08000c6c <zpx>:
void zpx() { // zero-page,X
 8000c6c:	b508      	push	{r3, lr}
    ea = ((uint16_t)read6502((uint16_t)pc++) + (uint16_t)x) & 0xFF; // zero-page wraparound
 8000c6e:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <zpx+0x1c>)
 8000c70:	8818      	ldrh	r0, [r3, #0]
 8000c72:	1c42      	adds	r2, r0, #1
 8000c74:	801a      	strh	r2, [r3, #0]
 8000c76:	f7ff fe15 	bl	80008a4 <read6502>
 8000c7a:	4b04      	ldr	r3, [pc, #16]	; (8000c8c <zpx+0x20>)
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	4418      	add	r0, r3
 8000c80:	4b03      	ldr	r3, [pc, #12]	; (8000c90 <zpx+0x24>)
 8000c82:	b2c0      	uxtb	r0, r0
 8000c84:	8018      	strh	r0, [r3, #0]
}
 8000c86:	bd08      	pop	{r3, pc}
 8000c88:	200081c0 	.word	0x200081c0
 8000c8c:	200081ca 	.word	0x200081ca
 8000c90:	200081b6 	.word	0x200081b6

08000c94 <zpy>:
void zpy() { // zero-page,Y
 8000c94:	b508      	push	{r3, lr}
    ea = ((uint16_t)read6502((uint16_t)pc++) + (uint16_t)y) & 0xFF; // zero-page wraparound
 8000c96:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <zpy+0x1c>)
 8000c98:	8818      	ldrh	r0, [r3, #0]
 8000c9a:	1c42      	adds	r2, r0, #1
 8000c9c:	801a      	strh	r2, [r3, #0]
 8000c9e:	f7ff fe01 	bl	80008a4 <read6502>
 8000ca2:	4b04      	ldr	r3, [pc, #16]	; (8000cb4 <zpy+0x20>)
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	4418      	add	r0, r3
 8000ca8:	4b03      	ldr	r3, [pc, #12]	; (8000cb8 <zpy+0x24>)
 8000caa:	b2c0      	uxtb	r0, r0
 8000cac:	8018      	strh	r0, [r3, #0]
}
 8000cae:	bd08      	pop	{r3, pc}
 8000cb0:	200081c0 	.word	0x200081c0
 8000cb4:	200081cb 	.word	0x200081cb
 8000cb8:	200081b6 	.word	0x200081b6

08000cbc <rel>:
void rel() { // relative for branch ops (8-bit immediate value, sign-extended)
 8000cbc:	b508      	push	{r3, lr}
    reladdr = (uint16_t)read6502(pc++);
 8000cbe:	4b07      	ldr	r3, [pc, #28]	; (8000cdc <rel+0x20>)
 8000cc0:	8818      	ldrh	r0, [r3, #0]
 8000cc2:	1c42      	adds	r2, r0, #1
 8000cc4:	801a      	strh	r2, [r3, #0]
 8000cc6:	f7ff fded 	bl	80008a4 <read6502>
 8000cca:	4a05      	ldr	r2, [pc, #20]	; (8000ce0 <rel+0x24>)
 8000ccc:	b283      	uxth	r3, r0
    if (reladdr & 0x80) reladdr |= 0xFF00;
 8000cce:	f010 0f80 	tst.w	r0, #128	; 0x80
 8000cd2:	bf18      	it	ne
 8000cd4:	f063 03ff 	ornne	r3, r3, #255	; 0xff
 8000cd8:	8013      	strh	r3, [r2, #0]
}
 8000cda:	bd08      	pop	{r3, pc}
 8000cdc:	200081c0 	.word	0x200081c0
 8000ce0:	200081c2 	.word	0x200081c2

08000ce4 <abso>:
void abso() { // absolute
 8000ce4:	b538      	push	{r3, r4, r5, lr}
    ea = (uint16_t)read6502(pc) | ((uint16_t)read6502(pc+1) << 8);
 8000ce6:	4d09      	ldr	r5, [pc, #36]	; (8000d0c <abso+0x28>)
 8000ce8:	8828      	ldrh	r0, [r5, #0]
 8000cea:	f7ff fddb 	bl	80008a4 <read6502>
 8000cee:	4604      	mov	r4, r0
 8000cf0:	8828      	ldrh	r0, [r5, #0]
 8000cf2:	3001      	adds	r0, #1
 8000cf4:	b280      	uxth	r0, r0
 8000cf6:	f7ff fdd5 	bl	80008a4 <read6502>
 8000cfa:	4b05      	ldr	r3, [pc, #20]	; (8000d10 <abso+0x2c>)
 8000cfc:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
 8000d00:	801c      	strh	r4, [r3, #0]
    pc += 2;
 8000d02:	882b      	ldrh	r3, [r5, #0]
 8000d04:	3302      	adds	r3, #2
 8000d06:	802b      	strh	r3, [r5, #0]
}
 8000d08:	bd38      	pop	{r3, r4, r5, pc}
 8000d0a:	bf00      	nop
 8000d0c:	200081c0 	.word	0x200081c0
 8000d10:	200081b6 	.word	0x200081b6

08000d14 <absx>:
void absx() { // absolute,X
 8000d14:	b538      	push	{r3, r4, r5, lr}
    ea = ((uint16_t)read6502(pc) | ((uint16_t)read6502(pc+1) << 8));
 8000d16:	4d0a      	ldr	r5, [pc, #40]	; (8000d40 <absx+0x2c>)
 8000d18:	8828      	ldrh	r0, [r5, #0]
 8000d1a:	f7ff fdc3 	bl	80008a4 <read6502>
 8000d1e:	4604      	mov	r4, r0
 8000d20:	8828      	ldrh	r0, [r5, #0]
 8000d22:	3001      	adds	r0, #1
 8000d24:	b280      	uxth	r0, r0
 8000d26:	f7ff fdbd 	bl	80008a4 <read6502>
    ea += (uint16_t)x;
 8000d2a:	4b06      	ldr	r3, [pc, #24]	; (8000d44 <absx+0x30>)
    ea = ((uint16_t)read6502(pc) | ((uint16_t)read6502(pc+1) << 8));
 8000d2c:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
    ea += (uint16_t)x;
 8000d30:	7818      	ldrb	r0, [r3, #0]
 8000d32:	4b05      	ldr	r3, [pc, #20]	; (8000d48 <absx+0x34>)
 8000d34:	4404      	add	r4, r0
 8000d36:	801c      	strh	r4, [r3, #0]
    pc += 2;
 8000d38:	882b      	ldrh	r3, [r5, #0]
 8000d3a:	3302      	adds	r3, #2
 8000d3c:	802b      	strh	r3, [r5, #0]
}
 8000d3e:	bd38      	pop	{r3, r4, r5, pc}
 8000d40:	200081c0 	.word	0x200081c0
 8000d44:	200081ca 	.word	0x200081ca
 8000d48:	200081b6 	.word	0x200081b6

08000d4c <absy>:
void absy() { // absolute,Y
 8000d4c:	b538      	push	{r3, r4, r5, lr}
    ea = ((uint16_t)read6502(pc) | ((uint16_t)read6502(pc+1) << 8));
 8000d4e:	4d0a      	ldr	r5, [pc, #40]	; (8000d78 <absy+0x2c>)
 8000d50:	8828      	ldrh	r0, [r5, #0]
 8000d52:	f7ff fda7 	bl	80008a4 <read6502>
 8000d56:	4604      	mov	r4, r0
 8000d58:	8828      	ldrh	r0, [r5, #0]
 8000d5a:	3001      	adds	r0, #1
 8000d5c:	b280      	uxth	r0, r0
 8000d5e:	f7ff fda1 	bl	80008a4 <read6502>
    ea += (uint16_t)y;
 8000d62:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <absy+0x30>)
    ea = ((uint16_t)read6502(pc) | ((uint16_t)read6502(pc+1) << 8));
 8000d64:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
    ea += (uint16_t)y;
 8000d68:	7818      	ldrb	r0, [r3, #0]
 8000d6a:	4b05      	ldr	r3, [pc, #20]	; (8000d80 <absy+0x34>)
 8000d6c:	4404      	add	r4, r0
 8000d6e:	801c      	strh	r4, [r3, #0]
    pc += 2;
 8000d70:	882b      	ldrh	r3, [r5, #0]
 8000d72:	3302      	adds	r3, #2
 8000d74:	802b      	strh	r3, [r5, #0]
}
 8000d76:	bd38      	pop	{r3, r4, r5, pc}
 8000d78:	200081c0 	.word	0x200081c0
 8000d7c:	200081cb 	.word	0x200081cb
 8000d80:	200081b6 	.word	0x200081b6

08000d84 <ind>:
void ind() { // indirect
 8000d84:	b570      	push	{r4, r5, r6, lr}
    eahelp = (uint16_t)read6502(pc) | (uint16_t)((uint16_t)read6502(pc+1) << 8);
 8000d86:	4e10      	ldr	r6, [pc, #64]	; (8000dc8 <ind+0x44>)
 8000d88:	8830      	ldrh	r0, [r6, #0]
 8000d8a:	f7ff fd8b 	bl	80008a4 <read6502>
 8000d8e:	4604      	mov	r4, r0
 8000d90:	8830      	ldrh	r0, [r6, #0]
 8000d92:	3001      	adds	r0, #1
 8000d94:	b280      	uxth	r0, r0
 8000d96:	f7ff fd85 	bl	80008a4 <read6502>
 8000d9a:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
 8000d9e:	b2a4      	uxth	r4, r4
    ea = (uint16_t)read6502(eahelp) | ((uint16_t)read6502(eahelp2) << 8);
 8000da0:	4620      	mov	r0, r4
 8000da2:	f7ff fd7f 	bl	80008a4 <read6502>
 8000da6:	4605      	mov	r5, r0
    eahelp2 = (eahelp & 0xFF00) | ((eahelp + 1) & 0x00FF); // replicate 6502 page-boundary wraparound bug
 8000da8:	1c60      	adds	r0, r4, #1
 8000daa:	b2c0      	uxtb	r0, r0
 8000dac:	f024 04ff 	bic.w	r4, r4, #255	; 0xff
    ea = (uint16_t)read6502(eahelp) | ((uint16_t)read6502(eahelp2) << 8);
 8000db0:	4320      	orrs	r0, r4
 8000db2:	f7ff fd77 	bl	80008a4 <read6502>
 8000db6:	4b05      	ldr	r3, [pc, #20]	; (8000dcc <ind+0x48>)
 8000db8:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
 8000dbc:	801d      	strh	r5, [r3, #0]
    pc += 2;
 8000dbe:	8833      	ldrh	r3, [r6, #0]
 8000dc0:	3302      	adds	r3, #2
 8000dc2:	8033      	strh	r3, [r6, #0]
}
 8000dc4:	bd70      	pop	{r4, r5, r6, pc}
 8000dc6:	bf00      	nop
 8000dc8:	200081c0 	.word	0x200081c0
 8000dcc:	200081b6 	.word	0x200081b6

08000dd0 <indx>:
void indx() { //  (indirect,X)
 8000dd0:	b538      	push	{r3, r4, r5, lr}
    eahelp = (uint16_t)(((uint16_t)read6502(pc++) + (uint16_t)x) & 0xFF); // zero-page wraparound for table pointer
 8000dd2:	4b0b      	ldr	r3, [pc, #44]	; (8000e00 <indx+0x30>)
 8000dd4:	8818      	ldrh	r0, [r3, #0]
 8000dd6:	1c42      	adds	r2, r0, #1
 8000dd8:	801a      	strh	r2, [r3, #0]
 8000dda:	f7ff fd63 	bl	80008a4 <read6502>
 8000dde:	4b09      	ldr	r3, [pc, #36]	; (8000e04 <indx+0x34>)
 8000de0:	781c      	ldrb	r4, [r3, #0]
 8000de2:	4404      	add	r4, r0
 8000de4:	b2e4      	uxtb	r4, r4
    ea = (uint16_t)read6502(eahelp & 0x00FF) | ((uint16_t)read6502((eahelp+1) & 0x00FF) << 8);
 8000de6:	4620      	mov	r0, r4
 8000de8:	f7ff fd5c 	bl	80008a4 <read6502>
 8000dec:	3401      	adds	r4, #1
 8000dee:	4605      	mov	r5, r0
 8000df0:	b2e0      	uxtb	r0, r4
 8000df2:	f7ff fd57 	bl	80008a4 <read6502>
 8000df6:	4b04      	ldr	r3, [pc, #16]	; (8000e08 <indx+0x38>)
 8000df8:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
 8000dfc:	801d      	strh	r5, [r3, #0]
}
 8000dfe:	bd38      	pop	{r3, r4, r5, pc}
 8000e00:	200081c0 	.word	0x200081c0
 8000e04:	200081ca 	.word	0x200081ca
 8000e08:	200081b6 	.word	0x200081b6

08000e0c <indy>:
void indy() { //  (indirect),Y
 8000e0c:	b538      	push	{r3, r4, r5, lr}
    eahelp = (uint16_t)read6502(pc++);
 8000e0e:	4b0b      	ldr	r3, [pc, #44]	; (8000e3c <indy+0x30>)
 8000e10:	8818      	ldrh	r0, [r3, #0]
 8000e12:	1c42      	adds	r2, r0, #1
 8000e14:	801a      	strh	r2, [r3, #0]
 8000e16:	f7ff fd45 	bl	80008a4 <read6502>
 8000e1a:	b284      	uxth	r4, r0
    ea = (uint16_t)read6502(eahelp) | ((uint16_t)read6502(eahelp2) << 8);
 8000e1c:	4620      	mov	r0, r4
 8000e1e:	f7ff fd41 	bl	80008a4 <read6502>
    eahelp2 = (eahelp & 0xFF00) | ((eahelp + 1) & 0x00FF); // zero-page wraparound
 8000e22:	3401      	adds	r4, #1
    ea = (uint16_t)read6502(eahelp) | ((uint16_t)read6502(eahelp2) << 8);
 8000e24:	4605      	mov	r5, r0
 8000e26:	b2e0      	uxtb	r0, r4
 8000e28:	f7ff fd3c 	bl	80008a4 <read6502>
    ea += (uint16_t)y;
 8000e2c:	4b04      	ldr	r3, [pc, #16]	; (8000e40 <indy+0x34>)
    ea = (uint16_t)read6502(eahelp) | ((uint16_t)read6502(eahelp2) << 8);
 8000e2e:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
    ea += (uint16_t)y;
 8000e32:	7818      	ldrb	r0, [r3, #0]
 8000e34:	4b03      	ldr	r3, [pc, #12]	; (8000e44 <indy+0x38>)
 8000e36:	4405      	add	r5, r0
 8000e38:	801d      	strh	r5, [r3, #0]
}
 8000e3a:	bd38      	pop	{r3, r4, r5, pc}
 8000e3c:	200081c0 	.word	0x200081c0
 8000e40:	200081cb 	.word	0x200081cb
 8000e44:	200081b6 	.word	0x200081b6

08000e48 <putvalue>:
    if (useaccum) a = (uint8_t)(saveval & 0x00FF);
 8000e48:	4b05      	ldr	r3, [pc, #20]	; (8000e60 <putvalue+0x18>)
 8000e4a:	b2c1      	uxtb	r1, r0
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	b113      	cbz	r3, 8000e56 <putvalue+0xe>
 8000e50:	4b04      	ldr	r3, [pc, #16]	; (8000e64 <putvalue+0x1c>)
 8000e52:	7019      	strb	r1, [r3, #0]
}
 8000e54:	4770      	bx	lr
        else write6502(ea, (saveval & 0x00FF));
 8000e56:	4b04      	ldr	r3, [pc, #16]	; (8000e68 <putvalue+0x20>)
 8000e58:	8818      	ldrh	r0, [r3, #0]
 8000e5a:	f7ff bc73 	b.w	8000744 <write6502>
 8000e5e:	bf00      	nop
 8000e60:	200081c7 	.word	0x200081c7
 8000e64:	200081ad 	.word	0x200081ad
 8000e68:	200081b6 	.word	0x200081b6

08000e6c <adc>:
void adc() {
 8000e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    value = getvalue();
 8000e6e:	f7ff fe4b 	bl	8000b08 <getvalue>
    result = (uint16_t)a + value + (uint16_t)(cpustatus & FLAG_CARRY);
 8000e72:	4d24      	ldr	r5, [pc, #144]	; (8000f04 <adc+0x98>)
    value = getvalue();
 8000e74:	4b24      	ldr	r3, [pc, #144]	; (8000f08 <adc+0x9c>)
    result = (uint16_t)a + value + (uint16_t)(cpustatus & FLAG_CARRY);
 8000e76:	4c25      	ldr	r4, [pc, #148]	; (8000f0c <adc+0xa0>)
    value = getvalue();
 8000e78:	8018      	strh	r0, [r3, #0]
    result = (uint16_t)a + value + (uint16_t)(cpustatus & FLAG_CARRY);
 8000e7a:	782b      	ldrb	r3, [r5, #0]
 8000e7c:	7821      	ldrb	r1, [r4, #0]
 8000e7e:	f003 0201 	and.w	r2, r3, #1
 8000e82:	440a      	add	r2, r1
 8000e84:	4e22      	ldr	r6, [pc, #136]	; (8000f10 <adc+0xa4>)
 8000e86:	4402      	add	r2, r0
 8000e88:	b292      	uxth	r2, r2
    carrycalc(result);
 8000e8a:	f412 4f7f 	tst.w	r2, #65280	; 0xff00
    result = (uint16_t)a + value + (uint16_t)(cpustatus & FLAG_CARRY);
 8000e8e:	8032      	strh	r2, [r6, #0]
    zerocalc(result);
 8000e90:	b2d6      	uxtb	r6, r2
    carrycalc(result);
 8000e92:	bf14      	ite	ne
 8000e94:	f043 0301 	orrne.w	r3, r3, #1
 8000e98:	f003 03fe 	andeq.w	r3, r3, #254	; 0xfe
    zerocalc(result);
 8000e9c:	b1c6      	cbz	r6, 8000ed0 <adc+0x64>
 8000e9e:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    overflowcalc(result, a, value);
 8000ea2:	ea81 0602 	eor.w	r6, r1, r2
 8000ea6:	ea80 0702 	eor.w	r7, r0, r2
 8000eaa:	4630      	mov	r0, r6
 8000eac:	4038      	ands	r0, r7
 8000eae:	0607      	lsls	r7, r0, #24
 8000eb0:	bf4c      	ite	mi
 8000eb2:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 8000eb6:	f003 03bf 	andpl.w	r3, r3, #191	; 0xbf
    signcalc(result);
 8000eba:	0616      	lsls	r6, r2, #24
 8000ebc:	bf4c      	ite	mi
 8000ebe:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
 8000ec2:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
    if (cpustatus & FLAG_DECIMAL) {
 8000ec6:	0718      	lsls	r0, r3, #28
 8000ec8:	d405      	bmi.n	8000ed6 <adc+0x6a>
 8000eca:	702b      	strb	r3, [r5, #0]
    saveaccum(result);
 8000ecc:	7022      	strb	r2, [r4, #0]
}
 8000ece:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    zerocalc(result);
 8000ed0:	f043 0302 	orr.w	r3, r3, #2
 8000ed4:	e7e5      	b.n	8000ea2 <adc+0x36>
        if ((a & 0x0F) > 0x09) {
 8000ed6:	f001 000f 	and.w	r0, r1, #15
 8000eda:	2809      	cmp	r0, #9
            a += 0x06;
 8000edc:	bf84      	itt	hi
 8000ede:	3106      	addhi	r1, #6
 8000ee0:	7021      	strbhi	r1, [r4, #0]
        if ((a & 0xF0) > 0x90) {
 8000ee2:	7821      	ldrb	r1, [r4, #0]
        clearcarry();
 8000ee4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
        if ((a & 0xF0) > 0x90) {
 8000ee8:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
 8000eec:	2990      	cmp	r1, #144	; 0x90
        clockticks6502++;
 8000eee:	4909      	ldr	r1, [pc, #36]	; (8000f14 <adc+0xa8>)
        clearcarry();
 8000ef0:	702b      	strb	r3, [r5, #0]
            setcarry();
 8000ef2:	bf84      	itt	hi
 8000ef4:	f043 0301 	orrhi.w	r3, r3, #1
 8000ef8:	702b      	strbhi	r3, [r5, #0]
        clockticks6502++;
 8000efa:	680b      	ldr	r3, [r1, #0]
 8000efc:	3301      	adds	r3, #1
 8000efe:	600b      	str	r3, [r1, #0]
 8000f00:	e7e4      	b.n	8000ecc <adc+0x60>
 8000f02:	bf00      	nop
 8000f04:	200081b4 	.word	0x200081b4
 8000f08:	200081c8 	.word	0x200081c8
 8000f0c:	200081ad 	.word	0x200081ad
 8000f10:	200081c4 	.word	0x200081c4
 8000f14:	200081b0 	.word	0x200081b0

08000f18 <op_and>:
void op_and() {
 8000f18:	b508      	push	{r3, lr}
    value = getvalue();
 8000f1a:	f7ff fdf5 	bl	8000b08 <getvalue>
 8000f1e:	4b0e      	ldr	r3, [pc, #56]	; (8000f58 <op_and+0x40>)
    result = (uint16_t)a & value;
 8000f20:	490e      	ldr	r1, [pc, #56]	; (8000f5c <op_and+0x44>)
    value = getvalue();
 8000f22:	8018      	strh	r0, [r3, #0]
    result = (uint16_t)a & value;
 8000f24:	780b      	ldrb	r3, [r1, #0]
 8000f26:	4a0e      	ldr	r2, [pc, #56]	; (8000f60 <op_and+0x48>)
 8000f28:	4018      	ands	r0, r3
 8000f2a:	4b0e      	ldr	r3, [pc, #56]	; (8000f64 <op_and+0x4c>)
 8000f2c:	8018      	strh	r0, [r3, #0]
    zerocalc(result);
 8000f2e:	7813      	ldrb	r3, [r2, #0]
 8000f30:	b148      	cbz	r0, 8000f46 <op_and+0x2e>
 8000f32:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(result);
 8000f36:	f010 0f80 	tst.w	r0, #128	; 0x80
    zerocalc(result);
 8000f3a:	7013      	strb	r3, [r2, #0]
    signcalc(result);
 8000f3c:	d107      	bne.n	8000f4e <op_and+0x36>
 8000f3e:	7813      	ldrb	r3, [r2, #0]
 8000f40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000f44:	e005      	b.n	8000f52 <op_and+0x3a>
    zerocalc(result);
 8000f46:	f043 0302 	orr.w	r3, r3, #2
 8000f4a:	7013      	strb	r3, [r2, #0]
    signcalc(result);
 8000f4c:	e7f7      	b.n	8000f3e <op_and+0x26>
 8000f4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f52:	7013      	strb	r3, [r2, #0]
    saveaccum(result);
 8000f54:	7008      	strb	r0, [r1, #0]
}
 8000f56:	bd08      	pop	{r3, pc}
 8000f58:	200081c8 	.word	0x200081c8
 8000f5c:	200081ad 	.word	0x200081ad
 8000f60:	200081b4 	.word	0x200081b4
 8000f64:	200081c4 	.word	0x200081c4

08000f68 <asl>:
void asl() {
 8000f68:	b508      	push	{r3, lr}
    value = getvalue();
 8000f6a:	f7ff fdcd 	bl	8000b08 <getvalue>
 8000f6e:	4b10      	ldr	r3, [pc, #64]	; (8000fb0 <asl+0x48>)
 8000f70:	4a10      	ldr	r2, [pc, #64]	; (8000fb4 <asl+0x4c>)
 8000f72:	8018      	strh	r0, [r3, #0]
    result = value << 1;
 8000f74:	4b10      	ldr	r3, [pc, #64]	; (8000fb8 <asl+0x50>)
 8000f76:	0040      	lsls	r0, r0, #1
 8000f78:	b280      	uxth	r0, r0
 8000f7a:	8018      	strh	r0, [r3, #0]
    carrycalc(result);
 8000f7c:	7813      	ldrb	r3, [r2, #0]
 8000f7e:	f410 4f7f 	tst.w	r0, #65280	; 0xff00
 8000f82:	bf14      	ite	ne
 8000f84:	f043 0301 	orrne.w	r3, r3, #1
 8000f88:	f003 03fe 	andeq.w	r3, r3, #254	; 0xfe
    zerocalc(result);
 8000f8c:	f010 0ffe 	tst.w	r0, #254	; 0xfe
 8000f90:	bf14      	ite	ne
 8000f92:	f003 03fd 	andne.w	r3, r3, #253	; 0xfd
 8000f96:	f043 0302 	orreq.w	r3, r3, #2
    signcalc(result);
 8000f9a:	0601      	lsls	r1, r0, #24
 8000f9c:	bf4c      	ite	mi
 8000f9e:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
 8000fa2:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
 8000fa6:	7013      	strb	r3, [r2, #0]
}
 8000fa8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    putvalue(result);
 8000fac:	f7ff bf4c 	b.w	8000e48 <putvalue>
 8000fb0:	200081c8 	.word	0x200081c8
 8000fb4:	200081b4 	.word	0x200081b4
 8000fb8:	200081c4 	.word	0x200081c4

08000fbc <bcc>:
    if ((cpustatus & FLAG_CARRY) == 0) {
 8000fbc:	4b0b      	ldr	r3, [pc, #44]	; (8000fec <bcc+0x30>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	07db      	lsls	r3, r3, #31
 8000fc2:	d412      	bmi.n	8000fea <bcc+0x2e>
        oldpc = pc;
 8000fc4:	490a      	ldr	r1, [pc, #40]	; (8000ff0 <bcc+0x34>)
 8000fc6:	4b0b      	ldr	r3, [pc, #44]	; (8000ff4 <bcc+0x38>)
 8000fc8:	880a      	ldrh	r2, [r1, #0]
 8000fca:	801a      	strh	r2, [r3, #0]
        pc += reladdr;
 8000fcc:	4b0a      	ldr	r3, [pc, #40]	; (8000ff8 <bcc+0x3c>)
 8000fce:	881b      	ldrh	r3, [r3, #0]
 8000fd0:	4413      	add	r3, r2
 8000fd2:	b29b      	uxth	r3, r3
 8000fd4:	800b      	strh	r3, [r1, #0]
        if ((oldpc & 0xFF00) != (pc & 0xFF00)) clockticks6502 += 2; // check if jump crossed a page boundary
 8000fd6:	4053      	eors	r3, r2
 8000fd8:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 8000fdc:	d001      	beq.n	8000fe2 <bcc+0x26>
 8000fde:	f7ff bda7 	b.w	8000b30 <bcc.part.0>
            else clockticks6502++;
 8000fe2:	4a06      	ldr	r2, [pc, #24]	; (8000ffc <bcc+0x40>)
 8000fe4:	6813      	ldr	r3, [r2, #0]
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	6013      	str	r3, [r2, #0]
}
 8000fea:	4770      	bx	lr
 8000fec:	200081b4 	.word	0x200081b4
 8000ff0:	200081c0 	.word	0x200081c0
 8000ff4:	200081bc 	.word	0x200081bc
 8000ff8:	200081c2 	.word	0x200081c2
 8000ffc:	200081b0 	.word	0x200081b0

08001000 <bcs>:
    if ((cpustatus & FLAG_CARRY) == FLAG_CARRY) {
 8001000:	4b0b      	ldr	r3, [pc, #44]	; (8001030 <bcs+0x30>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	07db      	lsls	r3, r3, #31
 8001006:	d512      	bpl.n	800102e <bcs+0x2e>
        oldpc = pc;
 8001008:	490a      	ldr	r1, [pc, #40]	; (8001034 <bcs+0x34>)
 800100a:	4b0b      	ldr	r3, [pc, #44]	; (8001038 <bcs+0x38>)
 800100c:	880a      	ldrh	r2, [r1, #0]
 800100e:	801a      	strh	r2, [r3, #0]
        pc += reladdr;
 8001010:	4b0a      	ldr	r3, [pc, #40]	; (800103c <bcs+0x3c>)
 8001012:	881b      	ldrh	r3, [r3, #0]
 8001014:	4413      	add	r3, r2
 8001016:	b29b      	uxth	r3, r3
 8001018:	800b      	strh	r3, [r1, #0]
        if ((oldpc & 0xFF00) != (pc & 0xFF00)) clockticks6502 += 2; // check if jump crossed a page boundary
 800101a:	4053      	eors	r3, r2
 800101c:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 8001020:	d001      	beq.n	8001026 <bcs+0x26>
 8001022:	f7ff bd85 	b.w	8000b30 <bcc.part.0>
            else clockticks6502++;
 8001026:	4a06      	ldr	r2, [pc, #24]	; (8001040 <bcs+0x40>)
 8001028:	6813      	ldr	r3, [r2, #0]
 800102a:	3301      	adds	r3, #1
 800102c:	6013      	str	r3, [r2, #0]
}
 800102e:	4770      	bx	lr
 8001030:	200081b4 	.word	0x200081b4
 8001034:	200081c0 	.word	0x200081c0
 8001038:	200081bc 	.word	0x200081bc
 800103c:	200081c2 	.word	0x200081c2
 8001040:	200081b0 	.word	0x200081b0

08001044 <beq>:
    if ((cpustatus & FLAG_ZERO) == FLAG_ZERO) {
 8001044:	4b0b      	ldr	r3, [pc, #44]	; (8001074 <beq+0x30>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	079b      	lsls	r3, r3, #30
 800104a:	d512      	bpl.n	8001072 <beq+0x2e>
        oldpc = pc;
 800104c:	490a      	ldr	r1, [pc, #40]	; (8001078 <beq+0x34>)
 800104e:	4b0b      	ldr	r3, [pc, #44]	; (800107c <beq+0x38>)
 8001050:	880a      	ldrh	r2, [r1, #0]
 8001052:	801a      	strh	r2, [r3, #0]
        pc += reladdr;
 8001054:	4b0a      	ldr	r3, [pc, #40]	; (8001080 <beq+0x3c>)
 8001056:	881b      	ldrh	r3, [r3, #0]
 8001058:	4413      	add	r3, r2
 800105a:	b29b      	uxth	r3, r3
 800105c:	800b      	strh	r3, [r1, #0]
        if ((oldpc & 0xFF00) != (pc & 0xFF00)) clockticks6502 += 2; // check if jump crossed a page boundary
 800105e:	4053      	eors	r3, r2
 8001060:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 8001064:	d001      	beq.n	800106a <beq+0x26>
 8001066:	f7ff bd63 	b.w	8000b30 <bcc.part.0>
            else clockticks6502++;
 800106a:	4a06      	ldr	r2, [pc, #24]	; (8001084 <beq+0x40>)
 800106c:	6813      	ldr	r3, [r2, #0]
 800106e:	3301      	adds	r3, #1
 8001070:	6013      	str	r3, [r2, #0]
}
 8001072:	4770      	bx	lr
 8001074:	200081b4 	.word	0x200081b4
 8001078:	200081c0 	.word	0x200081c0
 800107c:	200081bc 	.word	0x200081bc
 8001080:	200081c2 	.word	0x200081c2
 8001084:	200081b0 	.word	0x200081b0

08001088 <op_bit>:
void op_bit() {
 8001088:	b508      	push	{r3, lr}
    value = getvalue();
 800108a:	f7ff fd3d 	bl	8000b08 <getvalue>
 800108e:	4b0b      	ldr	r3, [pc, #44]	; (80010bc <op_bit+0x34>)
    result = (uint16_t)a & value;
 8001090:	4a0b      	ldr	r2, [pc, #44]	; (80010c0 <op_bit+0x38>)
    value = getvalue();
 8001092:	8018      	strh	r0, [r3, #0]
    result = (uint16_t)a & value;
 8001094:	4b0b      	ldr	r3, [pc, #44]	; (80010c4 <op_bit+0x3c>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	4003      	ands	r3, r0
 800109a:	8013      	strh	r3, [r2, #0]
    zerocalc(result);
 800109c:	4a0a      	ldr	r2, [pc, #40]	; (80010c8 <op_bit+0x40>)
 800109e:	b14b      	cbz	r3, 80010b4 <op_bit+0x2c>
 80010a0:	7813      	ldrb	r3, [r2, #0]
 80010a2:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    cpustatus = (cpustatus & 0x3F) | (uint8_t)(value & 0xC0);
 80010a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80010aa:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 80010ae:	4303      	orrs	r3, r0
 80010b0:	7013      	strb	r3, [r2, #0]
}
 80010b2:	bd08      	pop	{r3, pc}
    zerocalc(result);
 80010b4:	7813      	ldrb	r3, [r2, #0]
 80010b6:	f043 0302 	orr.w	r3, r3, #2
 80010ba:	e7f4      	b.n	80010a6 <op_bit+0x1e>
 80010bc:	200081c8 	.word	0x200081c8
 80010c0:	200081c4 	.word	0x200081c4
 80010c4:	200081ad 	.word	0x200081ad
 80010c8:	200081b4 	.word	0x200081b4

080010cc <bmi>:
    if ((cpustatus & FLAG_SIGN) == FLAG_SIGN) {
 80010cc:	4b0c      	ldr	r3, [pc, #48]	; (8001100 <bmi+0x34>)
 80010ce:	f993 3000 	ldrsb.w	r3, [r3]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	da12      	bge.n	80010fc <bmi+0x30>
        oldpc = pc;
 80010d6:	490b      	ldr	r1, [pc, #44]	; (8001104 <bmi+0x38>)
 80010d8:	4b0b      	ldr	r3, [pc, #44]	; (8001108 <bmi+0x3c>)
 80010da:	880a      	ldrh	r2, [r1, #0]
 80010dc:	801a      	strh	r2, [r3, #0]
        pc += reladdr;
 80010de:	4b0b      	ldr	r3, [pc, #44]	; (800110c <bmi+0x40>)
 80010e0:	881b      	ldrh	r3, [r3, #0]
 80010e2:	4413      	add	r3, r2
 80010e4:	b29b      	uxth	r3, r3
 80010e6:	800b      	strh	r3, [r1, #0]
        if ((oldpc & 0xFF00) != (pc & 0xFF00)) clockticks6502 += 2; // check if jump crossed a page boundary
 80010e8:	4053      	eors	r3, r2
 80010ea:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 80010ee:	d001      	beq.n	80010f4 <bmi+0x28>
 80010f0:	f7ff bd1e 	b.w	8000b30 <bcc.part.0>
            else clockticks6502++;
 80010f4:	4a06      	ldr	r2, [pc, #24]	; (8001110 <bmi+0x44>)
 80010f6:	6813      	ldr	r3, [r2, #0]
 80010f8:	3301      	adds	r3, #1
 80010fa:	6013      	str	r3, [r2, #0]
}
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	200081b4 	.word	0x200081b4
 8001104:	200081c0 	.word	0x200081c0
 8001108:	200081bc 	.word	0x200081bc
 800110c:	200081c2 	.word	0x200081c2
 8001110:	200081b0 	.word	0x200081b0

08001114 <bne>:
    if ((cpustatus & FLAG_ZERO) == 0) {
 8001114:	4b0b      	ldr	r3, [pc, #44]	; (8001144 <bne+0x30>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	079b      	lsls	r3, r3, #30
 800111a:	d412      	bmi.n	8001142 <bne+0x2e>
        oldpc = pc;
 800111c:	490a      	ldr	r1, [pc, #40]	; (8001148 <bne+0x34>)
 800111e:	4b0b      	ldr	r3, [pc, #44]	; (800114c <bne+0x38>)
 8001120:	880a      	ldrh	r2, [r1, #0]
 8001122:	801a      	strh	r2, [r3, #0]
        pc += reladdr;
 8001124:	4b0a      	ldr	r3, [pc, #40]	; (8001150 <bne+0x3c>)
 8001126:	881b      	ldrh	r3, [r3, #0]
 8001128:	4413      	add	r3, r2
 800112a:	b29b      	uxth	r3, r3
 800112c:	800b      	strh	r3, [r1, #0]
        if ((oldpc & 0xFF00) != (pc & 0xFF00)) clockticks6502 += 2; // check if jump crossed a page boundary
 800112e:	4053      	eors	r3, r2
 8001130:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 8001134:	d001      	beq.n	800113a <bne+0x26>
 8001136:	f7ff bcfb 	b.w	8000b30 <bcc.part.0>
            else clockticks6502++;
 800113a:	4a06      	ldr	r2, [pc, #24]	; (8001154 <bne+0x40>)
 800113c:	6813      	ldr	r3, [r2, #0]
 800113e:	3301      	adds	r3, #1
 8001140:	6013      	str	r3, [r2, #0]
}
 8001142:	4770      	bx	lr
 8001144:	200081b4 	.word	0x200081b4
 8001148:	200081c0 	.word	0x200081c0
 800114c:	200081bc 	.word	0x200081bc
 8001150:	200081c2 	.word	0x200081c2
 8001154:	200081b0 	.word	0x200081b0

08001158 <bpl>:
    if ((cpustatus & FLAG_SIGN) == 0) {
 8001158:	4b0c      	ldr	r3, [pc, #48]	; (800118c <bpl+0x34>)
 800115a:	f993 3000 	ldrsb.w	r3, [r3]
 800115e:	2b00      	cmp	r3, #0
 8001160:	db12      	blt.n	8001188 <bpl+0x30>
        oldpc = pc;
 8001162:	490b      	ldr	r1, [pc, #44]	; (8001190 <bpl+0x38>)
 8001164:	4b0b      	ldr	r3, [pc, #44]	; (8001194 <bpl+0x3c>)
 8001166:	880a      	ldrh	r2, [r1, #0]
 8001168:	801a      	strh	r2, [r3, #0]
        pc += reladdr;
 800116a:	4b0b      	ldr	r3, [pc, #44]	; (8001198 <bpl+0x40>)
 800116c:	881b      	ldrh	r3, [r3, #0]
 800116e:	4413      	add	r3, r2
 8001170:	b29b      	uxth	r3, r3
 8001172:	800b      	strh	r3, [r1, #0]
        if ((oldpc & 0xFF00) != (pc & 0xFF00)) clockticks6502 += 2; // check if jump crossed a page boundary
 8001174:	4053      	eors	r3, r2
 8001176:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 800117a:	d001      	beq.n	8001180 <bpl+0x28>
 800117c:	f7ff bcd8 	b.w	8000b30 <bcc.part.0>
            else clockticks6502++;
 8001180:	4a06      	ldr	r2, [pc, #24]	; (800119c <bpl+0x44>)
 8001182:	6813      	ldr	r3, [r2, #0]
 8001184:	3301      	adds	r3, #1
 8001186:	6013      	str	r3, [r2, #0]
}
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	200081b4 	.word	0x200081b4
 8001190:	200081c0 	.word	0x200081c0
 8001194:	200081bc 	.word	0x200081bc
 8001198:	200081c2 	.word	0x200081c2
 800119c:	200081b0 	.word	0x200081b0

080011a0 <brk>:
void brk() {
 80011a0:	b538      	push	{r3, r4, r5, lr}
    pc++;
 80011a2:	4d0f      	ldr	r5, [pc, #60]	; (80011e0 <brk+0x40>)
    push8(cpustatus | FLAG_BREAK); // push CPU cpustatus to stack
 80011a4:	4c0f      	ldr	r4, [pc, #60]	; (80011e4 <brk+0x44>)
    pc++;
 80011a6:	8828      	ldrh	r0, [r5, #0]
 80011a8:	3001      	adds	r0, #1
 80011aa:	b280      	uxth	r0, r0
 80011ac:	8028      	strh	r0, [r5, #0]
    push16(pc); // push next instruction address onto stack
 80011ae:	f7ff fccf 	bl	8000b50 <push16>
    push8(cpustatus | FLAG_BREAK); // push CPU cpustatus to stack
 80011b2:	7820      	ldrb	r0, [r4, #0]
 80011b4:	f040 0010 	orr.w	r0, r0, #16
 80011b8:	f7ff fce2 	bl	8000b80 <push8>
    setinterrupt(); // set interrupt flag
 80011bc:	7823      	ldrb	r3, [r4, #0]
    pc = (uint16_t)read6502(0xFFFE) | ((uint16_t)read6502(0xFFFF) << 8);
 80011be:	f64f 70fe 	movw	r0, #65534	; 0xfffe
    setinterrupt(); // set interrupt flag
 80011c2:	f043 0304 	orr.w	r3, r3, #4
 80011c6:	7023      	strb	r3, [r4, #0]
    pc = (uint16_t)read6502(0xFFFE) | ((uint16_t)read6502(0xFFFF) << 8);
 80011c8:	f7ff fb6c 	bl	80008a4 <read6502>
 80011cc:	4604      	mov	r4, r0
 80011ce:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80011d2:	f7ff fb67 	bl	80008a4 <read6502>
 80011d6:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
 80011da:	802c      	strh	r4, [r5, #0]
}
 80011dc:	bd38      	pop	{r3, r4, r5, pc}
 80011de:	bf00      	nop
 80011e0:	200081c0 	.word	0x200081c0
 80011e4:	200081b4 	.word	0x200081b4

080011e8 <bvc>:
    if ((cpustatus & FLAG_OVERFLOW) == 0) {
 80011e8:	4b0b      	ldr	r3, [pc, #44]	; (8001218 <bvc+0x30>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	065b      	lsls	r3, r3, #25
 80011ee:	d412      	bmi.n	8001216 <bvc+0x2e>
        oldpc = pc;
 80011f0:	490a      	ldr	r1, [pc, #40]	; (800121c <bvc+0x34>)
 80011f2:	4b0b      	ldr	r3, [pc, #44]	; (8001220 <bvc+0x38>)
 80011f4:	880a      	ldrh	r2, [r1, #0]
 80011f6:	801a      	strh	r2, [r3, #0]
        pc += reladdr;
 80011f8:	4b0a      	ldr	r3, [pc, #40]	; (8001224 <bvc+0x3c>)
 80011fa:	881b      	ldrh	r3, [r3, #0]
 80011fc:	4413      	add	r3, r2
 80011fe:	b29b      	uxth	r3, r3
 8001200:	800b      	strh	r3, [r1, #0]
        if ((oldpc & 0xFF00) != (pc & 0xFF00)) clockticks6502 += 2; // check if jump crossed a page boundary
 8001202:	4053      	eors	r3, r2
 8001204:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 8001208:	d001      	beq.n	800120e <bvc+0x26>
 800120a:	f7ff bc91 	b.w	8000b30 <bcc.part.0>
            else clockticks6502++;
 800120e:	4a06      	ldr	r2, [pc, #24]	; (8001228 <bvc+0x40>)
 8001210:	6813      	ldr	r3, [r2, #0]
 8001212:	3301      	adds	r3, #1
 8001214:	6013      	str	r3, [r2, #0]
}
 8001216:	4770      	bx	lr
 8001218:	200081b4 	.word	0x200081b4
 800121c:	200081c0 	.word	0x200081c0
 8001220:	200081bc 	.word	0x200081bc
 8001224:	200081c2 	.word	0x200081c2
 8001228:	200081b0 	.word	0x200081b0

0800122c <bvs>:
    if ((cpustatus & FLAG_OVERFLOW) == FLAG_OVERFLOW) {
 800122c:	4b0b      	ldr	r3, [pc, #44]	; (800125c <bvs+0x30>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	065b      	lsls	r3, r3, #25
 8001232:	d512      	bpl.n	800125a <bvs+0x2e>
        oldpc = pc;
 8001234:	490a      	ldr	r1, [pc, #40]	; (8001260 <bvs+0x34>)
 8001236:	4b0b      	ldr	r3, [pc, #44]	; (8001264 <bvs+0x38>)
 8001238:	880a      	ldrh	r2, [r1, #0]
 800123a:	801a      	strh	r2, [r3, #0]
        pc += reladdr;
 800123c:	4b0a      	ldr	r3, [pc, #40]	; (8001268 <bvs+0x3c>)
 800123e:	881b      	ldrh	r3, [r3, #0]
 8001240:	4413      	add	r3, r2
 8001242:	b29b      	uxth	r3, r3
 8001244:	800b      	strh	r3, [r1, #0]
        if ((oldpc & 0xFF00) != (pc & 0xFF00)) clockticks6502 += 2; // check if jump crossed a page boundary
 8001246:	4053      	eors	r3, r2
 8001248:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 800124c:	d001      	beq.n	8001252 <bvs+0x26>
 800124e:	f7ff bc6f 	b.w	8000b30 <bcc.part.0>
            else clockticks6502++;
 8001252:	4a06      	ldr	r2, [pc, #24]	; (800126c <bvs+0x40>)
 8001254:	6813      	ldr	r3, [r2, #0]
 8001256:	3301      	adds	r3, #1
 8001258:	6013      	str	r3, [r2, #0]
}
 800125a:	4770      	bx	lr
 800125c:	200081b4 	.word	0x200081b4
 8001260:	200081c0 	.word	0x200081c0
 8001264:	200081bc 	.word	0x200081bc
 8001268:	200081c2 	.word	0x200081c2
 800126c:	200081b0 	.word	0x200081b0

08001270 <clc>:
    clearcarry();
 8001270:	4a02      	ldr	r2, [pc, #8]	; (800127c <clc+0xc>)
 8001272:	7813      	ldrb	r3, [r2, #0]
 8001274:	f023 0301 	bic.w	r3, r3, #1
 8001278:	7013      	strb	r3, [r2, #0]
}
 800127a:	4770      	bx	lr
 800127c:	200081b4 	.word	0x200081b4

08001280 <cld>:
    cleardecimal();
 8001280:	4a02      	ldr	r2, [pc, #8]	; (800128c <cld+0xc>)
 8001282:	7813      	ldrb	r3, [r2, #0]
 8001284:	f023 0308 	bic.w	r3, r3, #8
 8001288:	7013      	strb	r3, [r2, #0]
}
 800128a:	4770      	bx	lr
 800128c:	200081b4 	.word	0x200081b4

08001290 <cli>:
    clearinterrupt();
 8001290:	4a02      	ldr	r2, [pc, #8]	; (800129c <cli+0xc>)
 8001292:	7813      	ldrb	r3, [r2, #0]
 8001294:	f023 0304 	bic.w	r3, r3, #4
 8001298:	7013      	strb	r3, [r2, #0]
}
 800129a:	4770      	bx	lr
 800129c:	200081b4 	.word	0x200081b4

080012a0 <clv>:
    clearoverflow();
 80012a0:	4a02      	ldr	r2, [pc, #8]	; (80012ac <clv+0xc>)
 80012a2:	7813      	ldrb	r3, [r2, #0]
 80012a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80012a8:	7013      	strb	r3, [r2, #0]
}
 80012aa:	4770      	bx	lr
 80012ac:	200081b4 	.word	0x200081b4

080012b0 <cmp>:
void cmp() {
 80012b0:	b508      	push	{r3, lr}
    value = getvalue();
 80012b2:	f7ff fc29 	bl	8000b08 <getvalue>
 80012b6:	4b11      	ldr	r3, [pc, #68]	; (80012fc <cmp+0x4c>)
    result = (uint16_t)a - value;
 80012b8:	4a11      	ldr	r2, [pc, #68]	; (8001300 <cmp+0x50>)
    value = getvalue();
 80012ba:	8018      	strh	r0, [r3, #0]
    result = (uint16_t)a - value;
 80012bc:	4b11      	ldr	r3, [pc, #68]	; (8001304 <cmp+0x54>)
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	1a19      	subs	r1, r3, r0
 80012c2:	b289      	uxth	r1, r1
 80012c4:	8011      	strh	r1, [r2, #0]
    if (a >= (uint8_t)(value & 0x00FF)) setcarry();
 80012c6:	b2c0      	uxtb	r0, r0
 80012c8:	4a0f      	ldr	r2, [pc, #60]	; (8001308 <cmp+0x58>)
 80012ca:	4283      	cmp	r3, r0
 80012cc:	7813      	ldrb	r3, [r2, #0]
 80012ce:	d307      	bcc.n	80012e0 <cmp+0x30>
 80012d0:	f043 0001 	orr.w	r0, r3, #1
 80012d4:	7010      	strb	r0, [r2, #0]
    if (a == (uint8_t)(value & 0x00FF)) setzero();
 80012d6:	d007      	beq.n	80012e8 <cmp+0x38>
        else clearzero();
 80012d8:	7813      	ldrb	r3, [r2, #0]
 80012da:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 80012de:	e005      	b.n	80012ec <cmp+0x3c>
        else clearcarry();
 80012e0:	f023 0301 	bic.w	r3, r3, #1
 80012e4:	7013      	strb	r3, [r2, #0]
    if (a == (uint8_t)(value & 0x00FF)) setzero();
 80012e6:	e7f7      	b.n	80012d8 <cmp+0x28>
 80012e8:	f043 0303 	orr.w	r3, r3, #3
    signcalc(result);
 80012ec:	0609      	lsls	r1, r1, #24
 80012ee:	bf4c      	ite	mi
 80012f0:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
 80012f4:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
 80012f8:	7013      	strb	r3, [r2, #0]
}
 80012fa:	bd08      	pop	{r3, pc}
 80012fc:	200081c8 	.word	0x200081c8
 8001300:	200081c4 	.word	0x200081c4
 8001304:	200081ad 	.word	0x200081ad
 8001308:	200081b4 	.word	0x200081b4

0800130c <cpx>:
void cpx() {
 800130c:	b508      	push	{r3, lr}
    value = getvalue();
 800130e:	f7ff fbfb 	bl	8000b08 <getvalue>
 8001312:	4b11      	ldr	r3, [pc, #68]	; (8001358 <cpx+0x4c>)
    result = (uint16_t)x - value;
 8001314:	4a11      	ldr	r2, [pc, #68]	; (800135c <cpx+0x50>)
    value = getvalue();
 8001316:	8018      	strh	r0, [r3, #0]
    result = (uint16_t)x - value;
 8001318:	4b11      	ldr	r3, [pc, #68]	; (8001360 <cpx+0x54>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	1a19      	subs	r1, r3, r0
 800131e:	b289      	uxth	r1, r1
 8001320:	8011      	strh	r1, [r2, #0]
    if (x >= (uint8_t)(value & 0x00FF)) setcarry();
 8001322:	b2c0      	uxtb	r0, r0
 8001324:	4a0f      	ldr	r2, [pc, #60]	; (8001364 <cpx+0x58>)
 8001326:	4283      	cmp	r3, r0
 8001328:	7813      	ldrb	r3, [r2, #0]
 800132a:	d307      	bcc.n	800133c <cpx+0x30>
 800132c:	f043 0001 	orr.w	r0, r3, #1
 8001330:	7010      	strb	r0, [r2, #0]
    if (x == (uint8_t)(value & 0x00FF)) setzero();
 8001332:	d007      	beq.n	8001344 <cpx+0x38>
        else clearzero();
 8001334:	7813      	ldrb	r3, [r2, #0]
 8001336:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 800133a:	e005      	b.n	8001348 <cpx+0x3c>
        else clearcarry();
 800133c:	f023 0301 	bic.w	r3, r3, #1
 8001340:	7013      	strb	r3, [r2, #0]
    if (x == (uint8_t)(value & 0x00FF)) setzero();
 8001342:	e7f7      	b.n	8001334 <cpx+0x28>
 8001344:	f043 0303 	orr.w	r3, r3, #3
    signcalc(result);
 8001348:	0609      	lsls	r1, r1, #24
 800134a:	bf4c      	ite	mi
 800134c:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
 8001350:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
 8001354:	7013      	strb	r3, [r2, #0]
}
 8001356:	bd08      	pop	{r3, pc}
 8001358:	200081c8 	.word	0x200081c8
 800135c:	200081c4 	.word	0x200081c4
 8001360:	200081ca 	.word	0x200081ca
 8001364:	200081b4 	.word	0x200081b4

08001368 <cpy>:
void cpy() {
 8001368:	b508      	push	{r3, lr}
    value = getvalue();
 800136a:	f7ff fbcd 	bl	8000b08 <getvalue>
 800136e:	4b11      	ldr	r3, [pc, #68]	; (80013b4 <cpy+0x4c>)
    result = (uint16_t)y - value;
 8001370:	4a11      	ldr	r2, [pc, #68]	; (80013b8 <cpy+0x50>)
    value = getvalue();
 8001372:	8018      	strh	r0, [r3, #0]
    result = (uint16_t)y - value;
 8001374:	4b11      	ldr	r3, [pc, #68]	; (80013bc <cpy+0x54>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	1a19      	subs	r1, r3, r0
 800137a:	b289      	uxth	r1, r1
 800137c:	8011      	strh	r1, [r2, #0]
    if (y >= (uint8_t)(value & 0x00FF)) setcarry();
 800137e:	b2c0      	uxtb	r0, r0
 8001380:	4a0f      	ldr	r2, [pc, #60]	; (80013c0 <cpy+0x58>)
 8001382:	4283      	cmp	r3, r0
 8001384:	7813      	ldrb	r3, [r2, #0]
 8001386:	d307      	bcc.n	8001398 <cpy+0x30>
 8001388:	f043 0001 	orr.w	r0, r3, #1
 800138c:	7010      	strb	r0, [r2, #0]
    if (y == (uint8_t)(value & 0x00FF)) setzero();
 800138e:	d007      	beq.n	80013a0 <cpy+0x38>
        else clearzero();
 8001390:	7813      	ldrb	r3, [r2, #0]
 8001392:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 8001396:	e005      	b.n	80013a4 <cpy+0x3c>
        else clearcarry();
 8001398:	f023 0301 	bic.w	r3, r3, #1
 800139c:	7013      	strb	r3, [r2, #0]
    if (y == (uint8_t)(value & 0x00FF)) setzero();
 800139e:	e7f7      	b.n	8001390 <cpy+0x28>
 80013a0:	f043 0303 	orr.w	r3, r3, #3
    signcalc(result);
 80013a4:	0609      	lsls	r1, r1, #24
 80013a6:	bf4c      	ite	mi
 80013a8:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
 80013ac:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
 80013b0:	7013      	strb	r3, [r2, #0]
}
 80013b2:	bd08      	pop	{r3, pc}
 80013b4:	200081c8 	.word	0x200081c8
 80013b8:	200081c4 	.word	0x200081c4
 80013bc:	200081cb 	.word	0x200081cb
 80013c0:	200081b4 	.word	0x200081b4

080013c4 <dec>:
void dec() {
 80013c4:	b508      	push	{r3, lr}
    value = getvalue();
 80013c6:	f7ff fb9f 	bl	8000b08 <getvalue>
 80013ca:	4b0d      	ldr	r3, [pc, #52]	; (8001400 <dec+0x3c>)
 80013cc:	4a0d      	ldr	r2, [pc, #52]	; (8001404 <dec+0x40>)
 80013ce:	8018      	strh	r0, [r3, #0]
    result = value - 1;
 80013d0:	4b0d      	ldr	r3, [pc, #52]	; (8001408 <dec+0x44>)
 80013d2:	3801      	subs	r0, #1
 80013d4:	b280      	uxth	r0, r0
 80013d6:	8018      	strh	r0, [r3, #0]
    zerocalc(result);
 80013d8:	b2c3      	uxtb	r3, r0
 80013da:	b16b      	cbz	r3, 80013f8 <dec+0x34>
 80013dc:	7813      	ldrb	r3, [r2, #0]
 80013de:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(result);
 80013e2:	0601      	lsls	r1, r0, #24
 80013e4:	bf4c      	ite	mi
 80013e6:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
 80013ea:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
 80013ee:	7013      	strb	r3, [r2, #0]
}
 80013f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    putvalue(result);
 80013f4:	f7ff bd28 	b.w	8000e48 <putvalue>
    zerocalc(result);
 80013f8:	7813      	ldrb	r3, [r2, #0]
 80013fa:	f043 0302 	orr.w	r3, r3, #2
 80013fe:	e7f0      	b.n	80013e2 <dec+0x1e>
 8001400:	200081c8 	.word	0x200081c8
 8001404:	200081b4 	.word	0x200081b4
 8001408:	200081c4 	.word	0x200081c4

0800140c <dex>:
    x--;
 800140c:	4b0a      	ldr	r3, [pc, #40]	; (8001438 <dex+0x2c>)
    zerocalc(x);
 800140e:	490b      	ldr	r1, [pc, #44]	; (800143c <dex+0x30>)
    x--;
 8001410:	781a      	ldrb	r2, [r3, #0]
 8001412:	3a01      	subs	r2, #1
 8001414:	b2d2      	uxtb	r2, r2
 8001416:	701a      	strb	r2, [r3, #0]
    zerocalc(x);
 8001418:	780b      	ldrb	r3, [r1, #0]
 800141a:	b132      	cbz	r2, 800142a <dex+0x1e>
 800141c:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(x);
 8001420:	0612      	lsls	r2, r2, #24
 8001422:	700b      	strb	r3, [r1, #0]
 8001424:	d504      	bpl.n	8001430 <dex+0x24>
 8001426:	f7ff bb8b 	b.w	8000b40 <dex.part.0>
    zerocalc(x);
 800142a:	f043 0302 	orr.w	r3, r3, #2
 800142e:	e7f7      	b.n	8001420 <dex+0x14>
    signcalc(x);
 8001430:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001434:	700b      	strb	r3, [r1, #0]
}
 8001436:	4770      	bx	lr
 8001438:	200081ca 	.word	0x200081ca
 800143c:	200081b4 	.word	0x200081b4

08001440 <dey>:

void dey() {
    y--;
 8001440:	4b0a      	ldr	r3, [pc, #40]	; (800146c <dey+0x2c>)
   
    zerocalc(y);
 8001442:	490b      	ldr	r1, [pc, #44]	; (8001470 <dey+0x30>)
    y--;
 8001444:	781a      	ldrb	r2, [r3, #0]
 8001446:	3a01      	subs	r2, #1
 8001448:	b2d2      	uxtb	r2, r2
 800144a:	701a      	strb	r2, [r3, #0]
    zerocalc(y);
 800144c:	780b      	ldrb	r3, [r1, #0]
 800144e:	b132      	cbz	r2, 800145e <dey+0x1e>
 8001450:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(y);
 8001454:	0612      	lsls	r2, r2, #24
 8001456:	700b      	strb	r3, [r1, #0]
 8001458:	d504      	bpl.n	8001464 <dey+0x24>
 800145a:	f7ff bb71 	b.w	8000b40 <dex.part.0>
    zerocalc(y);
 800145e:	f043 0302 	orr.w	r3, r3, #2
 8001462:	e7f7      	b.n	8001454 <dey+0x14>
    signcalc(y);
 8001464:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001468:	700b      	strb	r3, [r1, #0]
}
 800146a:	4770      	bx	lr
 800146c:	200081cb 	.word	0x200081cb
 8001470:	200081b4 	.word	0x200081b4

08001474 <eor>:

void eor() {
 8001474:	b508      	push	{r3, lr}
    value = getvalue();
 8001476:	f7ff fb47 	bl	8000b08 <getvalue>
 800147a:	4b0d      	ldr	r3, [pc, #52]	; (80014b0 <eor+0x3c>)
    result = (uint16_t)a ^ value;
 800147c:	490d      	ldr	r1, [pc, #52]	; (80014b4 <eor+0x40>)
    value = getvalue();
 800147e:	8018      	strh	r0, [r3, #0]
    result = (uint16_t)a ^ value;
 8001480:	780b      	ldrb	r3, [r1, #0]
 8001482:	4a0d      	ldr	r2, [pc, #52]	; (80014b8 <eor+0x44>)
 8001484:	4058      	eors	r0, r3
 8001486:	4b0d      	ldr	r3, [pc, #52]	; (80014bc <eor+0x48>)
 8001488:	8018      	strh	r0, [r3, #0]
   
    zerocalc(result);
 800148a:	b2c3      	uxtb	r3, r0
 800148c:	b163      	cbz	r3, 80014a8 <eor+0x34>
 800148e:	7813      	ldrb	r3, [r2, #0]
 8001490:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(result);
 8001494:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001498:	bf14      	ite	ne
 800149a:	f043 0380 	orrne.w	r3, r3, #128	; 0x80
 800149e:	f003 037f 	andeq.w	r3, r3, #127	; 0x7f
 80014a2:	7013      	strb	r3, [r2, #0]
   
    saveaccum(result);
 80014a4:	7008      	strb	r0, [r1, #0]
}
 80014a6:	bd08      	pop	{r3, pc}
    zerocalc(result);
 80014a8:	7813      	ldrb	r3, [r2, #0]
 80014aa:	f043 0302 	orr.w	r3, r3, #2
 80014ae:	e7f1      	b.n	8001494 <eor+0x20>
 80014b0:	200081c8 	.word	0x200081c8
 80014b4:	200081ad 	.word	0x200081ad
 80014b8:	200081b4 	.word	0x200081b4
 80014bc:	200081c4 	.word	0x200081c4

080014c0 <inc>:

void inc() {
 80014c0:	b508      	push	{r3, lr}
    value = getvalue();
 80014c2:	f7ff fb21 	bl	8000b08 <getvalue>
 80014c6:	4b0d      	ldr	r3, [pc, #52]	; (80014fc <inc+0x3c>)
 80014c8:	4a0d      	ldr	r2, [pc, #52]	; (8001500 <inc+0x40>)
 80014ca:	8018      	strh	r0, [r3, #0]
    result = value + 1;
 80014cc:	4b0d      	ldr	r3, [pc, #52]	; (8001504 <inc+0x44>)
 80014ce:	3001      	adds	r0, #1
 80014d0:	b280      	uxth	r0, r0
 80014d2:	8018      	strh	r0, [r3, #0]
   
    zerocalc(result);
 80014d4:	b2c3      	uxtb	r3, r0
 80014d6:	b16b      	cbz	r3, 80014f4 <inc+0x34>
 80014d8:	7813      	ldrb	r3, [r2, #0]
 80014da:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(result);
 80014de:	0601      	lsls	r1, r0, #24
 80014e0:	bf4c      	ite	mi
 80014e2:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
 80014e6:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
 80014ea:	7013      	strb	r3, [r2, #0]
   
    putvalue(result);
}
 80014ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    putvalue(result);
 80014f0:	f7ff bcaa 	b.w	8000e48 <putvalue>
    zerocalc(result);
 80014f4:	7813      	ldrb	r3, [r2, #0]
 80014f6:	f043 0302 	orr.w	r3, r3, #2
 80014fa:	e7f0      	b.n	80014de <inc+0x1e>
 80014fc:	200081c8 	.word	0x200081c8
 8001500:	200081b4 	.word	0x200081b4
 8001504:	200081c4 	.word	0x200081c4

08001508 <inx>:

void inx() {
    x++;
 8001508:	4b0a      	ldr	r3, [pc, #40]	; (8001534 <inx+0x2c>)
   
    zerocalc(x);
 800150a:	490b      	ldr	r1, [pc, #44]	; (8001538 <inx+0x30>)
    x++;
 800150c:	781a      	ldrb	r2, [r3, #0]
 800150e:	3201      	adds	r2, #1
 8001510:	b2d2      	uxtb	r2, r2
 8001512:	701a      	strb	r2, [r3, #0]
    zerocalc(x);
 8001514:	780b      	ldrb	r3, [r1, #0]
 8001516:	b132      	cbz	r2, 8001526 <inx+0x1e>
 8001518:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(x);
 800151c:	0612      	lsls	r2, r2, #24
 800151e:	700b      	strb	r3, [r1, #0]
 8001520:	d504      	bpl.n	800152c <inx+0x24>
 8001522:	f7ff bb0d 	b.w	8000b40 <dex.part.0>
    zerocalc(x);
 8001526:	f043 0302 	orr.w	r3, r3, #2
 800152a:	e7f7      	b.n	800151c <inx+0x14>
    signcalc(x);
 800152c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001530:	700b      	strb	r3, [r1, #0]
}
 8001532:	4770      	bx	lr
 8001534:	200081ca 	.word	0x200081ca
 8001538:	200081b4 	.word	0x200081b4

0800153c <iny>:

void iny() {
    y++;
 800153c:	4b0a      	ldr	r3, [pc, #40]	; (8001568 <iny+0x2c>)
   
    zerocalc(y);
 800153e:	490b      	ldr	r1, [pc, #44]	; (800156c <iny+0x30>)
    y++;
 8001540:	781a      	ldrb	r2, [r3, #0]
 8001542:	3201      	adds	r2, #1
 8001544:	b2d2      	uxtb	r2, r2
 8001546:	701a      	strb	r2, [r3, #0]
    zerocalc(y);
 8001548:	780b      	ldrb	r3, [r1, #0]
 800154a:	b132      	cbz	r2, 800155a <iny+0x1e>
 800154c:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(y);
 8001550:	0612      	lsls	r2, r2, #24
 8001552:	700b      	strb	r3, [r1, #0]
 8001554:	d504      	bpl.n	8001560 <iny+0x24>
 8001556:	f7ff baf3 	b.w	8000b40 <dex.part.0>
    zerocalc(y);
 800155a:	f043 0302 	orr.w	r3, r3, #2
 800155e:	e7f7      	b.n	8001550 <iny+0x14>
    signcalc(y);
 8001560:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001564:	700b      	strb	r3, [r1, #0]
}
 8001566:	4770      	bx	lr
 8001568:	200081cb 	.word	0x200081cb
 800156c:	200081b4 	.word	0x200081b4

08001570 <jmp>:

void jmp() {
    pc = ea;
 8001570:	4b02      	ldr	r3, [pc, #8]	; (800157c <jmp+0xc>)
 8001572:	881a      	ldrh	r2, [r3, #0]
 8001574:	4b02      	ldr	r3, [pc, #8]	; (8001580 <jmp+0x10>)
 8001576:	801a      	strh	r2, [r3, #0]
}
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	200081b6 	.word	0x200081b6
 8001580:	200081c0 	.word	0x200081c0

08001584 <jsr>:

void jsr() {
 8001584:	b510      	push	{r4, lr}
    push16(pc - 1);
 8001586:	4c05      	ldr	r4, [pc, #20]	; (800159c <jsr+0x18>)
 8001588:	8820      	ldrh	r0, [r4, #0]
 800158a:	3801      	subs	r0, #1
 800158c:	b280      	uxth	r0, r0
 800158e:	f7ff fadf 	bl	8000b50 <push16>
    pc = ea;
 8001592:	4b03      	ldr	r3, [pc, #12]	; (80015a0 <jsr+0x1c>)
 8001594:	881b      	ldrh	r3, [r3, #0]
 8001596:	8023      	strh	r3, [r4, #0]
}
 8001598:	bd10      	pop	{r4, pc}
 800159a:	bf00      	nop
 800159c:	200081c0 	.word	0x200081c0
 80015a0:	200081b6 	.word	0x200081b6

080015a4 <lda>:

void lda() {
 80015a4:	b508      	push	{r3, lr}
    value = getvalue();
 80015a6:	f7ff faaf 	bl	8000b08 <getvalue>
 80015aa:	4b0c      	ldr	r3, [pc, #48]	; (80015dc <lda+0x38>)
    a = (uint8_t)(value & 0x00FF);
 80015ac:	4a0c      	ldr	r2, [pc, #48]	; (80015e0 <lda+0x3c>)
    value = getvalue();
 80015ae:	8018      	strh	r0, [r3, #0]
    a = (uint8_t)(value & 0x00FF);
 80015b0:	b2c3      	uxtb	r3, r0
 80015b2:	7013      	strb	r3, [r2, #0]
   
    zerocalc(a);
 80015b4:	4a0b      	ldr	r2, [pc, #44]	; (80015e4 <lda+0x40>)
 80015b6:	b14b      	cbz	r3, 80015cc <lda+0x28>
 80015b8:	7813      	ldrb	r3, [r2, #0]
 80015ba:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(a);
 80015be:	0601      	lsls	r1, r0, #24
 80015c0:	7013      	strb	r3, [r2, #0]
 80015c2:	d507      	bpl.n	80015d4 <lda+0x30>
}
 80015c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80015c8:	f7ff baba 	b.w	8000b40 <dex.part.0>
    zerocalc(a);
 80015cc:	7813      	ldrb	r3, [r2, #0]
 80015ce:	f043 0302 	orr.w	r3, r3, #2
 80015d2:	e7f4      	b.n	80015be <lda+0x1a>
    signcalc(a);
 80015d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80015d8:	7013      	strb	r3, [r2, #0]
}
 80015da:	bd08      	pop	{r3, pc}
 80015dc:	200081c8 	.word	0x200081c8
 80015e0:	200081ad 	.word	0x200081ad
 80015e4:	200081b4 	.word	0x200081b4

080015e8 <ldx>:

void ldx() {
 80015e8:	b508      	push	{r3, lr}
    value = getvalue();
 80015ea:	f7ff fa8d 	bl	8000b08 <getvalue>
 80015ee:	4b0c      	ldr	r3, [pc, #48]	; (8001620 <ldx+0x38>)
    x = (uint8_t)(value & 0x00FF);
 80015f0:	4a0c      	ldr	r2, [pc, #48]	; (8001624 <ldx+0x3c>)
    value = getvalue();
 80015f2:	8018      	strh	r0, [r3, #0]
    x = (uint8_t)(value & 0x00FF);
 80015f4:	b2c3      	uxtb	r3, r0
 80015f6:	7013      	strb	r3, [r2, #0]
   
    zerocalc(x);
 80015f8:	4a0b      	ldr	r2, [pc, #44]	; (8001628 <ldx+0x40>)
 80015fa:	b14b      	cbz	r3, 8001610 <ldx+0x28>
 80015fc:	7813      	ldrb	r3, [r2, #0]
 80015fe:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(x);
 8001602:	0601      	lsls	r1, r0, #24
 8001604:	7013      	strb	r3, [r2, #0]
 8001606:	d507      	bpl.n	8001618 <ldx+0x30>
}
 8001608:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800160c:	f7ff ba98 	b.w	8000b40 <dex.part.0>
    zerocalc(x);
 8001610:	7813      	ldrb	r3, [r2, #0]
 8001612:	f043 0302 	orr.w	r3, r3, #2
 8001616:	e7f4      	b.n	8001602 <ldx+0x1a>
    signcalc(x);
 8001618:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800161c:	7013      	strb	r3, [r2, #0]
}
 800161e:	bd08      	pop	{r3, pc}
 8001620:	200081c8 	.word	0x200081c8
 8001624:	200081ca 	.word	0x200081ca
 8001628:	200081b4 	.word	0x200081b4

0800162c <ldy>:

void ldy() {
 800162c:	b508      	push	{r3, lr}
    value = getvalue();
 800162e:	f7ff fa6b 	bl	8000b08 <getvalue>
 8001632:	4b0c      	ldr	r3, [pc, #48]	; (8001664 <ldy+0x38>)
    y = (uint8_t)(value & 0x00FF);
 8001634:	4a0c      	ldr	r2, [pc, #48]	; (8001668 <ldy+0x3c>)
    value = getvalue();
 8001636:	8018      	strh	r0, [r3, #0]
    y = (uint8_t)(value & 0x00FF);
 8001638:	b2c3      	uxtb	r3, r0
 800163a:	7013      	strb	r3, [r2, #0]
   
    zerocalc(y);
 800163c:	4a0b      	ldr	r2, [pc, #44]	; (800166c <ldy+0x40>)
 800163e:	b14b      	cbz	r3, 8001654 <ldy+0x28>
 8001640:	7813      	ldrb	r3, [r2, #0]
 8001642:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(y);
 8001646:	0601      	lsls	r1, r0, #24
 8001648:	7013      	strb	r3, [r2, #0]
 800164a:	d507      	bpl.n	800165c <ldy+0x30>
}
 800164c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001650:	f7ff ba76 	b.w	8000b40 <dex.part.0>
    zerocalc(y);
 8001654:	7813      	ldrb	r3, [r2, #0]
 8001656:	f043 0302 	orr.w	r3, r3, #2
 800165a:	e7f4      	b.n	8001646 <ldy+0x1a>
    signcalc(y);
 800165c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001660:	7013      	strb	r3, [r2, #0]
}
 8001662:	bd08      	pop	{r3, pc}
 8001664:	200081c8 	.word	0x200081c8
 8001668:	200081cb 	.word	0x200081cb
 800166c:	200081b4 	.word	0x200081b4

08001670 <lsr>:

void lsr() {
 8001670:	b508      	push	{r3, lr}
    value = getvalue();
 8001672:	f7ff fa49 	bl	8000b08 <getvalue>
 8001676:	4603      	mov	r3, r0
 8001678:	4a10      	ldr	r2, [pc, #64]	; (80016bc <lsr+0x4c>)
    result = value >> 1;
   
    if (value & 1) setcarry();
 800167a:	f013 0f01 	tst.w	r3, #1
    value = getvalue();
 800167e:	8010      	strh	r0, [r2, #0]
    result = value >> 1;
 8001680:	4a0f      	ldr	r2, [pc, #60]	; (80016c0 <lsr+0x50>)
 8001682:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8001686:	8010      	strh	r0, [r2, #0]
    if (value & 1) setcarry();
 8001688:	4a0e      	ldr	r2, [pc, #56]	; (80016c4 <lsr+0x54>)
        else clearcarry();
    zerocalc(result);
 800168a:	b2c1      	uxtb	r1, r0
    if (value & 1) setcarry();
 800168c:	7813      	ldrb	r3, [r2, #0]
 800168e:	bf14      	ite	ne
 8001690:	f043 0301 	orrne.w	r3, r3, #1
        else clearcarry();
 8001694:	f003 03fe 	andeq.w	r3, r3, #254	; 0xfe
    zerocalc(result);
 8001698:	b161      	cbz	r1, 80016b4 <lsr+0x44>
 800169a:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(result);
 800169e:	0601      	lsls	r1, r0, #24
 80016a0:	bf4c      	ite	mi
 80016a2:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
 80016a6:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
 80016aa:	7013      	strb	r3, [r2, #0]
   
    putvalue(result);
}
 80016ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    putvalue(result);
 80016b0:	f7ff bbca 	b.w	8000e48 <putvalue>
    zerocalc(result);
 80016b4:	f043 0302 	orr.w	r3, r3, #2
 80016b8:	e7f1      	b.n	800169e <lsr+0x2e>
 80016ba:	bf00      	nop
 80016bc:	200081c8 	.word	0x200081c8
 80016c0:	200081c4 	.word	0x200081c4
 80016c4:	200081b4 	.word	0x200081b4

080016c8 <ora>:

void nop() {
}

void ora() {
 80016c8:	b508      	push	{r3, lr}
    value = getvalue();
 80016ca:	f7ff fa1d 	bl	8000b08 <getvalue>
 80016ce:	4b0d      	ldr	r3, [pc, #52]	; (8001704 <ora+0x3c>)
    result = (uint16_t)a | value;
 80016d0:	490d      	ldr	r1, [pc, #52]	; (8001708 <ora+0x40>)
    value = getvalue();
 80016d2:	8018      	strh	r0, [r3, #0]
    result = (uint16_t)a | value;
 80016d4:	780b      	ldrb	r3, [r1, #0]
 80016d6:	4a0d      	ldr	r2, [pc, #52]	; (800170c <ora+0x44>)
 80016d8:	4318      	orrs	r0, r3
 80016da:	4b0d      	ldr	r3, [pc, #52]	; (8001710 <ora+0x48>)
 80016dc:	8018      	strh	r0, [r3, #0]
   
    zerocalc(result);
 80016de:	b2c3      	uxtb	r3, r0
 80016e0:	b163      	cbz	r3, 80016fc <ora+0x34>
 80016e2:	7813      	ldrb	r3, [r2, #0]
 80016e4:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(result);
 80016e8:	f010 0f80 	tst.w	r0, #128	; 0x80
 80016ec:	bf14      	ite	ne
 80016ee:	f043 0380 	orrne.w	r3, r3, #128	; 0x80
 80016f2:	f003 037f 	andeq.w	r3, r3, #127	; 0x7f
 80016f6:	7013      	strb	r3, [r2, #0]
   
    saveaccum(result);
 80016f8:	7008      	strb	r0, [r1, #0]
}
 80016fa:	bd08      	pop	{r3, pc}
    zerocalc(result);
 80016fc:	7813      	ldrb	r3, [r2, #0]
 80016fe:	f043 0302 	orr.w	r3, r3, #2
 8001702:	e7f1      	b.n	80016e8 <ora+0x20>
 8001704:	200081c8 	.word	0x200081c8
 8001708:	200081ad 	.word	0x200081ad
 800170c:	200081b4 	.word	0x200081b4
 8001710:	200081c4 	.word	0x200081c4

08001714 <pha>:

void pha() {
    push8(a);
 8001714:	4b01      	ldr	r3, [pc, #4]	; (800171c <pha+0x8>)
 8001716:	7818      	ldrb	r0, [r3, #0]
 8001718:	f7ff ba32 	b.w	8000b80 <push8>
 800171c:	200081ad 	.word	0x200081ad

08001720 <php>:
}

void php() {
    push8(cpustatus | FLAG_BREAK);
 8001720:	4b02      	ldr	r3, [pc, #8]	; (800172c <php+0xc>)
 8001722:	7818      	ldrb	r0, [r3, #0]
 8001724:	f040 0010 	orr.w	r0, r0, #16
 8001728:	f7ff ba2a 	b.w	8000b80 <push8>
 800172c:	200081b4 	.word	0x200081b4

08001730 <pla>:
}

void pla() {
 8001730:	b508      	push	{r3, lr}
    a = pull8();
 8001732:	f7ff fa4b 	bl	8000bcc <pull8>
 8001736:	4b0a      	ldr	r3, [pc, #40]	; (8001760 <pla+0x30>)
 8001738:	4a0a      	ldr	r2, [pc, #40]	; (8001764 <pla+0x34>)
 800173a:	7018      	strb	r0, [r3, #0]
   
    zerocalc(a);
 800173c:	7813      	ldrb	r3, [r2, #0]
 800173e:	b140      	cbz	r0, 8001752 <pla+0x22>
 8001740:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(a);
 8001744:	0601      	lsls	r1, r0, #24
 8001746:	7013      	strb	r3, [r2, #0]
 8001748:	d506      	bpl.n	8001758 <pla+0x28>
}
 800174a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800174e:	f7ff b9f7 	b.w	8000b40 <dex.part.0>
    zerocalc(a);
 8001752:	f043 0302 	orr.w	r3, r3, #2
 8001756:	e7f5      	b.n	8001744 <pla+0x14>
    signcalc(a);
 8001758:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800175c:	7013      	strb	r3, [r2, #0]
}
 800175e:	bd08      	pop	{r3, pc}
 8001760:	200081ad 	.word	0x200081ad
 8001764:	200081b4 	.word	0x200081b4

08001768 <plp>:

void plp() {
 8001768:	b508      	push	{r3, lr}
    cpustatus = pull8() | FLAG_CONSTANT;
 800176a:	f7ff fa2f 	bl	8000bcc <pull8>
 800176e:	4b02      	ldr	r3, [pc, #8]	; (8001778 <plp+0x10>)
 8001770:	f040 0020 	orr.w	r0, r0, #32
 8001774:	7018      	strb	r0, [r3, #0]
}
 8001776:	bd08      	pop	{r3, pc}
 8001778:	200081b4 	.word	0x200081b4

0800177c <rol>:

void rol() {
 800177c:	b508      	push	{r3, lr}
    value = getvalue();
 800177e:	f7ff f9c3 	bl	8000b08 <getvalue>
 8001782:	4b12      	ldr	r3, [pc, #72]	; (80017cc <rol+0x50>)
    result = (value << 1) | (cpustatus & FLAG_CARRY);
 8001784:	4912      	ldr	r1, [pc, #72]	; (80017d0 <rol+0x54>)
    value = getvalue();
 8001786:	8018      	strh	r0, [r3, #0]
    result = (value << 1) | (cpustatus & FLAG_CARRY);
 8001788:	780b      	ldrb	r3, [r1, #0]
 800178a:	f003 0201 	and.w	r2, r3, #1
 800178e:	ea42 0040 	orr.w	r0, r2, r0, lsl #1
 8001792:	4a10      	ldr	r2, [pc, #64]	; (80017d4 <rol+0x58>)
 8001794:	b280      	uxth	r0, r0
   
    carrycalc(result);
 8001796:	f410 4f7f 	tst.w	r0, #65280	; 0xff00
    result = (value << 1) | (cpustatus & FLAG_CARRY);
 800179a:	8010      	strh	r0, [r2, #0]
    zerocalc(result);
 800179c:	b2c2      	uxtb	r2, r0
    carrycalc(result);
 800179e:	bf14      	ite	ne
 80017a0:	f043 0301 	orrne.w	r3, r3, #1
 80017a4:	f003 03fe 	andeq.w	r3, r3, #254	; 0xfe
    zerocalc(result);
 80017a8:	b162      	cbz	r2, 80017c4 <rol+0x48>
 80017aa:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(result);
 80017ae:	0602      	lsls	r2, r0, #24
 80017b0:	bf4c      	ite	mi
 80017b2:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
 80017b6:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
 80017ba:	700b      	strb	r3, [r1, #0]
   
    putvalue(result);
}
 80017bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    putvalue(result);
 80017c0:	f7ff bb42 	b.w	8000e48 <putvalue>
    zerocalc(result);
 80017c4:	f043 0302 	orr.w	r3, r3, #2
 80017c8:	e7f1      	b.n	80017ae <rol+0x32>
 80017ca:	bf00      	nop
 80017cc:	200081c8 	.word	0x200081c8
 80017d0:	200081b4 	.word	0x200081b4
 80017d4:	200081c4 	.word	0x200081c4

080017d8 <ror>:

void ror() {
 80017d8:	b510      	push	{r4, lr}
    value = getvalue();
 80017da:	f7ff f995 	bl	8000b08 <getvalue>
 80017de:	4601      	mov	r1, r0
 80017e0:	4b11      	ldr	r3, [pc, #68]	; (8001828 <ror+0x50>)
    result = (value >> 1) | ((cpustatus & FLAG_CARRY) << 7);
 80017e2:	4c12      	ldr	r4, [pc, #72]	; (800182c <ror+0x54>)
    value = getvalue();
 80017e4:	8018      	strh	r0, [r3, #0]
    result = (value >> 1) | ((cpustatus & FLAG_CARRY) << 7);
 80017e6:	7823      	ldrb	r3, [r4, #0]
   
    if (value & 1) setcarry();
 80017e8:	07c9      	lsls	r1, r1, #31
    result = (value >> 1) | ((cpustatus & FLAG_CARRY) << 7);
 80017ea:	ea4f 12c3 	mov.w	r2, r3, lsl #7
 80017ee:	b2d2      	uxtb	r2, r2
 80017f0:	ea42 0050 	orr.w	r0, r2, r0, lsr #1
 80017f4:	4a0e      	ldr	r2, [pc, #56]	; (8001830 <ror+0x58>)
    if (value & 1) setcarry();
 80017f6:	bf48      	it	mi
 80017f8:	f043 0301 	orrmi.w	r3, r3, #1
    result = (value >> 1) | ((cpustatus & FLAG_CARRY) << 7);
 80017fc:	8010      	strh	r0, [r2, #0]
        else clearcarry();
    zerocalc(result);
 80017fe:	b2c2      	uxtb	r2, r0
        else clearcarry();
 8001800:	bf58      	it	pl
 8001802:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    zerocalc(result);
 8001806:	b162      	cbz	r2, 8001822 <ror+0x4a>
 8001808:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(result);
 800180c:	0602      	lsls	r2, r0, #24
 800180e:	bf4c      	ite	mi
 8001810:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
 8001814:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
 8001818:	7023      	strb	r3, [r4, #0]
   
    putvalue(result);
}
 800181a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    putvalue(result);
 800181e:	f7ff bb13 	b.w	8000e48 <putvalue>
    zerocalc(result);
 8001822:	f043 0302 	orr.w	r3, r3, #2
 8001826:	e7f1      	b.n	800180c <ror+0x34>
 8001828:	200081c8 	.word	0x200081c8
 800182c:	200081b4 	.word	0x200081b4
 8001830:	200081c4 	.word	0x200081c4

08001834 <rti>:

void rti() {
 8001834:	b508      	push	{r3, lr}
    cpustatus = pull8();
 8001836:	f7ff f9c9 	bl	8000bcc <pull8>
 800183a:	4b04      	ldr	r3, [pc, #16]	; (800184c <rti+0x18>)
 800183c:	7018      	strb	r0, [r3, #0]
    value = pull16();
 800183e:	f7ff f9ab 	bl	8000b98 <pull16>
 8001842:	4b03      	ldr	r3, [pc, #12]	; (8001850 <rti+0x1c>)
 8001844:	8018      	strh	r0, [r3, #0]
    pc = value;
 8001846:	4b03      	ldr	r3, [pc, #12]	; (8001854 <rti+0x20>)
 8001848:	8018      	strh	r0, [r3, #0]
}
 800184a:	bd08      	pop	{r3, pc}
 800184c:	200081b4 	.word	0x200081b4
 8001850:	200081c8 	.word	0x200081c8
 8001854:	200081c0 	.word	0x200081c0

08001858 <rts>:

void rts() {
 8001858:	b508      	push	{r3, lr}
    value = pull16();
 800185a:	f7ff f99d 	bl	8000b98 <pull16>
 800185e:	4b03      	ldr	r3, [pc, #12]	; (800186c <rts+0x14>)
 8001860:	8018      	strh	r0, [r3, #0]
    pc = value + 1;
 8001862:	4b03      	ldr	r3, [pc, #12]	; (8001870 <rts+0x18>)
 8001864:	3001      	adds	r0, #1
 8001866:	8018      	strh	r0, [r3, #0]
}
 8001868:	bd08      	pop	{r3, pc}
 800186a:	bf00      	nop
 800186c:	200081c8 	.word	0x200081c8
 8001870:	200081c0 	.word	0x200081c0

08001874 <sbc>:

void sbc() {
 8001874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    value = getvalue() ^ 0x00FF;
 8001876:	f7ff f947 	bl	8000b08 <getvalue>
    result = (uint16_t)a + value + (uint16_t)(cpustatus & FLAG_CARRY);
 800187a:	4d27      	ldr	r5, [pc, #156]	; (8001918 <sbc+0xa4>)
    value = getvalue() ^ 0x00FF;
 800187c:	4b27      	ldr	r3, [pc, #156]	; (800191c <sbc+0xa8>)
 800187e:	f080 00ff 	eor.w	r0, r0, #255	; 0xff
 8001882:	b280      	uxth	r0, r0
    result = (uint16_t)a + value + (uint16_t)(cpustatus & FLAG_CARRY);
 8001884:	4c26      	ldr	r4, [pc, #152]	; (8001920 <sbc+0xac>)
    value = getvalue() ^ 0x00FF;
 8001886:	8018      	strh	r0, [r3, #0]
    result = (uint16_t)a + value + (uint16_t)(cpustatus & FLAG_CARRY);
 8001888:	782b      	ldrb	r3, [r5, #0]
 800188a:	7821      	ldrb	r1, [r4, #0]
 800188c:	f003 0201 	and.w	r2, r3, #1
 8001890:	440a      	add	r2, r1
 8001892:	4e24      	ldr	r6, [pc, #144]	; (8001924 <sbc+0xb0>)
 8001894:	4402      	add	r2, r0
 8001896:	b292      	uxth	r2, r2
   
    carrycalc(result);
 8001898:	f412 4f7f 	tst.w	r2, #65280	; 0xff00
    result = (uint16_t)a + value + (uint16_t)(cpustatus & FLAG_CARRY);
 800189c:	8032      	strh	r2, [r6, #0]
    zerocalc(result);
 800189e:	b2d6      	uxtb	r6, r2
    carrycalc(result);
 80018a0:	bf14      	ite	ne
 80018a2:	f043 0301 	orrne.w	r3, r3, #1
 80018a6:	f003 03fe 	andeq.w	r3, r3, #254	; 0xfe
    zerocalc(result);
 80018aa:	b1c6      	cbz	r6, 80018de <sbc+0x6a>
 80018ac:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    overflowcalc(result, a, value);
 80018b0:	ea81 0602 	eor.w	r6, r1, r2
 80018b4:	ea80 0702 	eor.w	r7, r0, r2
 80018b8:	4630      	mov	r0, r6
 80018ba:	4038      	ands	r0, r7
 80018bc:	0607      	lsls	r7, r0, #24
 80018be:	bf4c      	ite	mi
 80018c0:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 80018c4:	f003 03bf 	andpl.w	r3, r3, #191	; 0xbf
    signcalc(result);
 80018c8:	0616      	lsls	r6, r2, #24
 80018ca:	bf4c      	ite	mi
 80018cc:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
 80018d0:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f

    #ifndef NES_CPU
    if (cpustatus & FLAG_DECIMAL) {
 80018d4:	0718      	lsls	r0, r3, #28
 80018d6:	d405      	bmi.n	80018e4 <sbc+0x70>
 80018d8:	702b      	strb	r3, [r5, #0]
        
        clockticks6502++;
    }
    #endif
   
    saveaccum(result);
 80018da:	7022      	strb	r2, [r4, #0]
}
 80018dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    zerocalc(result);
 80018de:	f043 0302 	orr.w	r3, r3, #2
 80018e2:	e7e5      	b.n	80018b0 <sbc+0x3c>
        a -= 0x66;
 80018e4:	f1a1 0066 	sub.w	r0, r1, #102	; 0x66
 80018e8:	b2c6      	uxtb	r6, r0
        if ((a & 0x0F) > 0x09) {
 80018ea:	f000 000f 	and.w	r0, r0, #15
 80018ee:	2809      	cmp	r0, #9
            a += 0x06;
 80018f0:	bf8a      	itet	hi
 80018f2:	3960      	subhi	r1, #96	; 0x60
        a -= 0x66;
 80018f4:	7026      	strbls	r6, [r4, #0]
            a += 0x06;
 80018f6:	7021      	strbhi	r1, [r4, #0]
        if ((a & 0xF0) > 0x90) {
 80018f8:	7821      	ldrb	r1, [r4, #0]
        clearcarry();
 80018fa:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
        if ((a & 0xF0) > 0x90) {
 80018fe:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
 8001902:	2990      	cmp	r1, #144	; 0x90
        clockticks6502++;
 8001904:	4908      	ldr	r1, [pc, #32]	; (8001928 <sbc+0xb4>)
        clearcarry();
 8001906:	702b      	strb	r3, [r5, #0]
            setcarry();
 8001908:	bf84      	itt	hi
 800190a:	f043 0301 	orrhi.w	r3, r3, #1
 800190e:	702b      	strbhi	r3, [r5, #0]
        clockticks6502++;
 8001910:	680b      	ldr	r3, [r1, #0]
 8001912:	3301      	adds	r3, #1
 8001914:	600b      	str	r3, [r1, #0]
 8001916:	e7e0      	b.n	80018da <sbc+0x66>
 8001918:	200081b4 	.word	0x200081b4
 800191c:	200081c8 	.word	0x200081c8
 8001920:	200081ad 	.word	0x200081ad
 8001924:	200081c4 	.word	0x200081c4
 8001928:	200081b0 	.word	0x200081b0

0800192c <sec>:

void sec() {
    setcarry();
 800192c:	4a02      	ldr	r2, [pc, #8]	; (8001938 <sec+0xc>)
 800192e:	7813      	ldrb	r3, [r2, #0]
 8001930:	f043 0301 	orr.w	r3, r3, #1
 8001934:	7013      	strb	r3, [r2, #0]
}
 8001936:	4770      	bx	lr
 8001938:	200081b4 	.word	0x200081b4

0800193c <sed>:

void sed() {
    setdecimal();
 800193c:	4a02      	ldr	r2, [pc, #8]	; (8001948 <sed+0xc>)
 800193e:	7813      	ldrb	r3, [r2, #0]
 8001940:	f043 0308 	orr.w	r3, r3, #8
 8001944:	7013      	strb	r3, [r2, #0]
}
 8001946:	4770      	bx	lr
 8001948:	200081b4 	.word	0x200081b4

0800194c <sei>:

void sei() {
    setinterrupt();
 800194c:	4a02      	ldr	r2, [pc, #8]	; (8001958 <sei+0xc>)
 800194e:	7813      	ldrb	r3, [r2, #0]
 8001950:	f043 0304 	orr.w	r3, r3, #4
 8001954:	7013      	strb	r3, [r2, #0]
}
 8001956:	4770      	bx	lr
 8001958:	200081b4 	.word	0x200081b4

0800195c <sta>:

void sta() {
    putvalue(a);
 800195c:	4b01      	ldr	r3, [pc, #4]	; (8001964 <sta+0x8>)
 800195e:	7818      	ldrb	r0, [r3, #0]
 8001960:	f7ff ba72 	b.w	8000e48 <putvalue>
 8001964:	200081ad 	.word	0x200081ad

08001968 <stx>:
}

void stx() {
    putvalue(x);
 8001968:	4b01      	ldr	r3, [pc, #4]	; (8001970 <stx+0x8>)
 800196a:	7818      	ldrb	r0, [r3, #0]
 800196c:	f7ff ba6c 	b.w	8000e48 <putvalue>
 8001970:	200081ca 	.word	0x200081ca

08001974 <sty>:
}

void sty() {
    putvalue(y);
 8001974:	4b01      	ldr	r3, [pc, #4]	; (800197c <sty+0x8>)
 8001976:	7818      	ldrb	r0, [r3, #0]
 8001978:	f7ff ba66 	b.w	8000e48 <putvalue>
 800197c:	200081cb 	.word	0x200081cb

08001980 <tax>:
}

void tax() {
    x = a;
 8001980:	4b0a      	ldr	r3, [pc, #40]	; (80019ac <tax+0x2c>)
   
    zerocalc(x);
 8001982:	4a0b      	ldr	r2, [pc, #44]	; (80019b0 <tax+0x30>)
    x = a;
 8001984:	7819      	ldrb	r1, [r3, #0]
 8001986:	4b0b      	ldr	r3, [pc, #44]	; (80019b4 <tax+0x34>)
 8001988:	7019      	strb	r1, [r3, #0]
    zerocalc(x);
 800198a:	7813      	ldrb	r3, [r2, #0]
 800198c:	b131      	cbz	r1, 800199c <tax+0x1c>
 800198e:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(x);
 8001992:	0609      	lsls	r1, r1, #24
 8001994:	7013      	strb	r3, [r2, #0]
 8001996:	d504      	bpl.n	80019a2 <tax+0x22>
 8001998:	f7ff b8d2 	b.w	8000b40 <dex.part.0>
    zerocalc(x);
 800199c:	f043 0302 	orr.w	r3, r3, #2
 80019a0:	e7f7      	b.n	8001992 <tax+0x12>
    signcalc(x);
 80019a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80019a6:	7013      	strb	r3, [r2, #0]
}
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	200081ad 	.word	0x200081ad
 80019b0:	200081b4 	.word	0x200081b4
 80019b4:	200081ca 	.word	0x200081ca

080019b8 <tay>:

void tay() {
    y = a;
 80019b8:	4b0a      	ldr	r3, [pc, #40]	; (80019e4 <tay+0x2c>)
   
    zerocalc(y);
 80019ba:	4a0b      	ldr	r2, [pc, #44]	; (80019e8 <tay+0x30>)
    y = a;
 80019bc:	7819      	ldrb	r1, [r3, #0]
 80019be:	4b0b      	ldr	r3, [pc, #44]	; (80019ec <tay+0x34>)
 80019c0:	7019      	strb	r1, [r3, #0]
    zerocalc(y);
 80019c2:	7813      	ldrb	r3, [r2, #0]
 80019c4:	b131      	cbz	r1, 80019d4 <tay+0x1c>
 80019c6:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(y);
 80019ca:	0609      	lsls	r1, r1, #24
 80019cc:	7013      	strb	r3, [r2, #0]
 80019ce:	d504      	bpl.n	80019da <tay+0x22>
 80019d0:	f7ff b8b6 	b.w	8000b40 <dex.part.0>
    zerocalc(y);
 80019d4:	f043 0302 	orr.w	r3, r3, #2
 80019d8:	e7f7      	b.n	80019ca <tay+0x12>
    signcalc(y);
 80019da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80019de:	7013      	strb	r3, [r2, #0]
}
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	200081ad 	.word	0x200081ad
 80019e8:	200081b4 	.word	0x200081b4
 80019ec:	200081cb 	.word	0x200081cb

080019f0 <tsx>:

void tsx() {
    x = sp;
 80019f0:	4b0a      	ldr	r3, [pc, #40]	; (8001a1c <tsx+0x2c>)
   
    zerocalc(x);
 80019f2:	4a0b      	ldr	r2, [pc, #44]	; (8001a20 <tsx+0x30>)
    x = sp;
 80019f4:	7819      	ldrb	r1, [r3, #0]
 80019f6:	4b0b      	ldr	r3, [pc, #44]	; (8001a24 <tsx+0x34>)
 80019f8:	7019      	strb	r1, [r3, #0]
    zerocalc(x);
 80019fa:	7813      	ldrb	r3, [r2, #0]
 80019fc:	b131      	cbz	r1, 8001a0c <tsx+0x1c>
 80019fe:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(x);
 8001a02:	0609      	lsls	r1, r1, #24
 8001a04:	7013      	strb	r3, [r2, #0]
 8001a06:	d504      	bpl.n	8001a12 <tsx+0x22>
 8001a08:	f7ff b89a 	b.w	8000b40 <dex.part.0>
    zerocalc(x);
 8001a0c:	f043 0302 	orr.w	r3, r3, #2
 8001a10:	e7f7      	b.n	8001a02 <tsx+0x12>
    signcalc(x);
 8001a12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001a16:	7013      	strb	r3, [r2, #0]
}
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	200081c6 	.word	0x200081c6
 8001a20:	200081b4 	.word	0x200081b4
 8001a24:	200081ca 	.word	0x200081ca

08001a28 <txa>:

void txa() {
    a = x;
 8001a28:	4b0a      	ldr	r3, [pc, #40]	; (8001a54 <txa+0x2c>)
   
    zerocalc(a);
 8001a2a:	4a0b      	ldr	r2, [pc, #44]	; (8001a58 <txa+0x30>)
    a = x;
 8001a2c:	7819      	ldrb	r1, [r3, #0]
 8001a2e:	4b0b      	ldr	r3, [pc, #44]	; (8001a5c <txa+0x34>)
 8001a30:	7019      	strb	r1, [r3, #0]
    zerocalc(a);
 8001a32:	7813      	ldrb	r3, [r2, #0]
 8001a34:	b131      	cbz	r1, 8001a44 <txa+0x1c>
 8001a36:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(a);
 8001a3a:	0609      	lsls	r1, r1, #24
 8001a3c:	7013      	strb	r3, [r2, #0]
 8001a3e:	d504      	bpl.n	8001a4a <txa+0x22>
 8001a40:	f7ff b87e 	b.w	8000b40 <dex.part.0>
    zerocalc(a);
 8001a44:	f043 0302 	orr.w	r3, r3, #2
 8001a48:	e7f7      	b.n	8001a3a <txa+0x12>
    signcalc(a);
 8001a4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001a4e:	7013      	strb	r3, [r2, #0]
}
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	200081ca 	.word	0x200081ca
 8001a58:	200081b4 	.word	0x200081b4
 8001a5c:	200081ad 	.word	0x200081ad

08001a60 <txs>:

void txs() {
    sp = x;
 8001a60:	4b02      	ldr	r3, [pc, #8]	; (8001a6c <txs+0xc>)
 8001a62:	781a      	ldrb	r2, [r3, #0]
 8001a64:	4b02      	ldr	r3, [pc, #8]	; (8001a70 <txs+0x10>)
 8001a66:	701a      	strb	r2, [r3, #0]
}
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	200081ca 	.word	0x200081ca
 8001a70:	200081c6 	.word	0x200081c6

08001a74 <tya>:

void tya() {
    a = y;
 8001a74:	4b0a      	ldr	r3, [pc, #40]	; (8001aa0 <tya+0x2c>)
   
    zerocalc(a);
 8001a76:	4a0b      	ldr	r2, [pc, #44]	; (8001aa4 <tya+0x30>)
    a = y;
 8001a78:	7819      	ldrb	r1, [r3, #0]
 8001a7a:	4b0b      	ldr	r3, [pc, #44]	; (8001aa8 <tya+0x34>)
 8001a7c:	7019      	strb	r1, [r3, #0]
    zerocalc(a);
 8001a7e:	7813      	ldrb	r3, [r2, #0]
 8001a80:	b131      	cbz	r1, 8001a90 <tya+0x1c>
 8001a82:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(a);
 8001a86:	0609      	lsls	r1, r1, #24
 8001a88:	7013      	strb	r3, [r2, #0]
 8001a8a:	d504      	bpl.n	8001a96 <tya+0x22>
 8001a8c:	f7ff b858 	b.w	8000b40 <dex.part.0>
    zerocalc(a);
 8001a90:	f043 0302 	orr.w	r3, r3, #2
 8001a94:	e7f7      	b.n	8001a86 <tya+0x12>
    signcalc(a);
 8001a96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001a9a:	7013      	strb	r3, [r2, #0]
}
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	200081cb 	.word	0x200081cb
 8001aa4:	200081b4 	.word	0x200081b4
 8001aa8:	200081ad 	.word	0x200081ad

08001aac <exec6502>:
/* E */      2,    6,    2,    8,    3,    3,    5,    5,    2,    2,    2,    2,    4,    4,    6,    6,  /* E */
/* F */      2,    5,    2,    8,    4,    4,    6,    6,    2,    4,    2,    7,    4,    4,    7,    7   /* F */
};
#endif

void exec6502(int32_t tickcount) {
 8001aac:	b570      	push	{r4, r5, r6, lr}
 8001aae:	4604      	mov	r4, r0
   
  while (clockgoal6502 > 0) {
#else
  while (tickcount--) {
#endif
    opcode = read6502(pc++);
 8001ab0:	4e01      	ldr	r6, [pc, #4]	; (8001ab8 <exec6502+0xc>)
    cpustatus |= FLAG_CONSTANT;

    useaccum = 0;
 8001ab2:	4d02      	ldr	r5, [pc, #8]	; (8001abc <exec6502+0x10>)
  while (tickcount--) {
 8001ab4:	b924      	cbnz	r4, 8001ac0 <exec6502+0x14>
#ifdef USE_TIMING
      clockgoal6502 -= (int32_t)ticktable[opcode];
#endif
      instructions++;
  }
}
 8001ab6:	bd70      	pop	{r4, r5, r6, pc}
 8001ab8:	200081c0 	.word	0x200081c0
 8001abc:	200081c7 	.word	0x200081c7
    opcode = read6502(pc++);
 8001ac0:	8830      	ldrh	r0, [r6, #0]
 8001ac2:	1c43      	adds	r3, r0, #1
 8001ac4:	8033      	strh	r3, [r6, #0]
 8001ac6:	f7fe feed 	bl	80008a4 <read6502>
 8001aca:	4b05      	ldr	r3, [pc, #20]	; (8001ae0 <exec6502+0x34>)
    cpustatus |= FLAG_CONSTANT;
 8001acc:	4a05      	ldr	r2, [pc, #20]	; (8001ae4 <exec6502+0x38>)
    opcode = read6502(pc++);
 8001ace:	7018      	strb	r0, [r3, #0]
    cpustatus |= FLAG_CONSTANT;
 8001ad0:	7813      	ldrb	r3, [r2, #0]
 8001ad2:	f043 0320 	orr.w	r3, r3, #32
 8001ad6:	7013      	strb	r3, [r2, #0]
    useaccum = 0;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	702b      	strb	r3, [r5, #0]
 8001adc:	e004      	b.n	8001ae8 <exec6502+0x3c>
 8001ade:	bf00      	nop
 8001ae0:	200081be 	.word	0x200081be
 8001ae4:	200081b4 	.word	0x200081b4
		switch (opcode) {
 8001ae8:	28fe      	cmp	r0, #254	; 0xfe
 8001aea:	f200 8103 	bhi.w	8001cf4 <exec6502+0x248>
 8001aee:	e8df f010 	tbh	[pc, r0, lsl #1]
 8001af2:	00ff      	.short	0x00ff
 8001af4:	01010107 	.word	0x01010107
 8001af8:	01010101 	.word	0x01010101
 8001afc:	0111010c 	.word	0x0111010c
 8001b00:	01160101 	.word	0x01160101
 8001b04:	011e0119 	.word	0x011e0119
 8001b08:	01010101 	.word	0x01010101
 8001b0c:	01280123 	.word	0x01280123
 8001b10:	012d0101 	.word	0x012d0101
 8001b14:	01010132 	.word	0x01010132
 8001b18:	01010101 	.word	0x01010101
 8001b1c:	013c0137 	.word	0x013c0137
 8001b20:	01410101 	.word	0x01410101
 8001b24:	01010144 	.word	0x01010144
 8001b28:	01010101 	.word	0x01010101
 8001b2c:	014e0149 	.word	0x014e0149
 8001b30:	01530101 	.word	0x01530101
 8001b34:	01010158 	.word	0x01010158
 8001b38:	015d0101 	.word	0x015d0101
 8001b3c:	01670162 	.word	0x01670162
 8001b40:	016c0101 	.word	0x016c0101
 8001b44:	0174016f 	.word	0x0174016f
 8001b48:	01790101 	.word	0x01790101
 8001b4c:	0183017e 	.word	0x0183017e
 8001b50:	01880101 	.word	0x01880101
 8001b54:	0101018d 	.word	0x0101018d
 8001b58:	01010101 	.word	0x01010101
 8001b5c:	01970192 	.word	0x01970192
 8001b60:	019c0101 	.word	0x019c0101
 8001b64:	0101019f 	.word	0x0101019f
 8001b68:	01010101 	.word	0x01010101
 8001b6c:	01a901a4 	.word	0x01a901a4
 8001b70:	01ae0101 	.word	0x01ae0101
 8001b74:	010101b1 	.word	0x010101b1
 8001b78:	01010101 	.word	0x01010101
 8001b7c:	01bb01b6 	.word	0x01bb01b6
 8001b80:	01c00101 	.word	0x01c00101
 8001b84:	01c801c3 	.word	0x01c801c3
 8001b88:	01cd0101 	.word	0x01cd0101
 8001b8c:	01d701d2 	.word	0x01d701d2
 8001b90:	01dc0101 	.word	0x01dc0101
 8001b94:	010101e1 	.word	0x010101e1
 8001b98:	01010101 	.word	0x01010101
 8001b9c:	01eb01e6 	.word	0x01eb01e6
 8001ba0:	01f00101 	.word	0x01f00101
 8001ba4:	010101f3 	.word	0x010101f3
 8001ba8:	01010101 	.word	0x01010101
 8001bac:	01fd01f8 	.word	0x01fd01f8
 8001bb0:	02020101 	.word	0x02020101
 8001bb4:	01010205 	.word	0x01010205
 8001bb8:	01010101 	.word	0x01010101
 8001bbc:	020f020a 	.word	0x020f020a
 8001bc0:	02140101 	.word	0x02140101
 8001bc4:	021c0217 	.word	0x021c0217
 8001bc8:	02210101 	.word	0x02210101
 8001bcc:	022b0226 	.word	0x022b0226
 8001bd0:	02300101 	.word	0x02300101
 8001bd4:	01010235 	.word	0x01010235
 8001bd8:	01010101 	.word	0x01010101
 8001bdc:	023f023a 	.word	0x023f023a
 8001be0:	02440101 	.word	0x02440101
 8001be4:	01010247 	.word	0x01010247
 8001be8:	01010101 	.word	0x01010101
 8001bec:	0251024c 	.word	0x0251024c
 8001bf0:	01010101 	.word	0x01010101
 8001bf4:	01010256 	.word	0x01010256
 8001bf8:	025b0101 	.word	0x025b0101
 8001bfc:	02650260 	.word	0x02650260
 8001c00:	026a0101 	.word	0x026a0101
 8001c04:	026d0101 	.word	0x026d0101
 8001c08:	02700101 	.word	0x02700101
 8001c0c:	027a0275 	.word	0x027a0275
 8001c10:	027f0101 	.word	0x027f0101
 8001c14:	01010284 	.word	0x01010284
 8001c18:	02890101 	.word	0x02890101
 8001c1c:	0293028e 	.word	0x0293028e
 8001c20:	02980101 	.word	0x02980101
 8001c24:	02a3029b 	.word	0x02a3029b
 8001c28:	01010101 	.word	0x01010101
 8001c2c:	010102a6 	.word	0x010102a6
 8001c30:	02ab0101 	.word	0x02ab0101
 8001c34:	02b502b0 	.word	0x02b502b0
 8001c38:	02ba0101 	.word	0x02ba0101
 8001c3c:	02c402bf 	.word	0x02c402bf
 8001c40:	02c90101 	.word	0x02c90101
 8001c44:	02d102cc 	.word	0x02d102cc
 8001c48:	02d40101 	.word	0x02d40101
 8001c4c:	02de02d9 	.word	0x02de02d9
 8001c50:	02e30101 	.word	0x02e30101
 8001c54:	010102e8 	.word	0x010102e8
 8001c58:	02ed0101 	.word	0x02ed0101
 8001c5c:	02f702f2 	.word	0x02f702f2
 8001c60:	02fc0101 	.word	0x02fc0101
 8001c64:	030402ff 	.word	0x030402ff
 8001c68:	03070101 	.word	0x03070101
 8001c6c:	0311030c 	.word	0x0311030c
 8001c70:	03160101 	.word	0x03160101
 8001c74:	0101031b 	.word	0x0101031b
 8001c78:	03200101 	.word	0x03200101
 8001c7c:	032a0325 	.word	0x032a0325
 8001c80:	032f0101 	.word	0x032f0101
 8001c84:	03370332 	.word	0x03370332
 8001c88:	033a0101 	.word	0x033a0101
 8001c8c:	0344033f 	.word	0x0344033f
 8001c90:	03490101 	.word	0x03490101
 8001c94:	0101034e 	.word	0x0101034e
 8001c98:	01010101 	.word	0x01010101
 8001c9c:	03580353 	.word	0x03580353
 8001ca0:	035d0101 	.word	0x035d0101
 8001ca4:	01010360 	.word	0x01010360
 8001ca8:	01010101 	.word	0x01010101
 8001cac:	036a0365 	.word	0x036a0365
 8001cb0:	036f0101 	.word	0x036f0101
 8001cb4:	01010374 	.word	0x01010374
 8001cb8:	03790101 	.word	0x03790101
 8001cbc:	0383037e 	.word	0x0383037e
 8001cc0:	03880101 	.word	0x03880101
 8001cc4:	0101038b 	.word	0x0101038b
 8001cc8:	0390038b 	.word	0x0390038b
 8001ccc:	039a0395 	.word	0x039a0395
 8001cd0:	039f0101 	.word	0x039f0101
 8001cd4:	010103a4 	.word	0x010103a4
 8001cd8:	01010101 	.word	0x01010101
 8001cdc:	03ae03a9 	.word	0x03ae03a9
 8001ce0:	03b30101 	.word	0x03b30101
 8001ce4:	010103b6 	.word	0x010103b6
 8001ce8:	01010101 	.word	0x01010101
 8001cec:	03c003bb 	.word	0x03c003bb
			brk();
 8001cf0:	f7ff fa56 	bl	80011a0 <brk>
      instructions++;
 8001cf4:	4acf      	ldr	r2, [pc, #828]	; (8002034 <exec6502+0x588>)
 8001cf6:	3c01      	subs	r4, #1
 8001cf8:	6813      	ldr	r3, [r2, #0]
 8001cfa:	3301      	adds	r3, #1
 8001cfc:	6013      	str	r3, [r2, #0]
 8001cfe:	e6d9      	b.n	8001ab4 <exec6502+0x8>
			indx();
 8001d00:	f7ff f866 	bl	8000dd0 <indx>
			ora();
 8001d04:	f7ff fce0 	bl	80016c8 <ora>
			break;
 8001d08:	e7f4      	b.n	8001cf4 <exec6502+0x248>
			zp();
 8001d0a:	f7fe ffa1 	bl	8000c50 <zp>
			ora();
 8001d0e:	f7ff fcdb 	bl	80016c8 <ora>
			break;
 8001d12:	e7ef      	b.n	8001cf4 <exec6502+0x248>
			zp();
 8001d14:	f7fe ff9c 	bl	8000c50 <zp>
			asl();
 8001d18:	f7ff f926 	bl	8000f68 <asl>
			break;
 8001d1c:	e7ea      	b.n	8001cf4 <exec6502+0x248>
			php();
 8001d1e:	f7ff fcff 	bl	8001720 <php>
			break;
 8001d22:	e7e7      	b.n	8001cf4 <exec6502+0x248>
			imm();
 8001d24:	f7fe ff88 	bl	8000c38 <imm>
			ora();
 8001d28:	f7ff fcce 	bl	80016c8 <ora>
			break;
 8001d2c:	e7e2      	b.n	8001cf4 <exec6502+0x248>
  useaccum = 1;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	702b      	strb	r3, [r5, #0]
			asl();
 8001d32:	f7ff f919 	bl	8000f68 <asl>
			break;
 8001d36:	e7dd      	b.n	8001cf4 <exec6502+0x248>
			abso();
 8001d38:	f7fe ffd4 	bl	8000ce4 <abso>
			ora();
 8001d3c:	f7ff fcc4 	bl	80016c8 <ora>
			break;
 8001d40:	e7d8      	b.n	8001cf4 <exec6502+0x248>
			abso();
 8001d42:	f7fe ffcf 	bl	8000ce4 <abso>
			asl();
 8001d46:	f7ff f90f 	bl	8000f68 <asl>
			break;
 8001d4a:	e7d3      	b.n	8001cf4 <exec6502+0x248>
			rel();
 8001d4c:	f7fe ffb6 	bl	8000cbc <rel>
			bpl();
 8001d50:	f7ff fa02 	bl	8001158 <bpl>
			break;
 8001d54:	e7ce      	b.n	8001cf4 <exec6502+0x248>
			indy();
 8001d56:	f7ff f859 	bl	8000e0c <indy>
			ora();
 8001d5a:	f7ff fcb5 	bl	80016c8 <ora>
			break;
 8001d5e:	e7c9      	b.n	8001cf4 <exec6502+0x248>
			zpx();
 8001d60:	f7fe ff84 	bl	8000c6c <zpx>
			ora();
 8001d64:	f7ff fcb0 	bl	80016c8 <ora>
			break;
 8001d68:	e7c4      	b.n	8001cf4 <exec6502+0x248>
			zpx();
 8001d6a:	f7fe ff7f 	bl	8000c6c <zpx>
			asl();
 8001d6e:	f7ff f8fb 	bl	8000f68 <asl>
			break;
 8001d72:	e7bf      	b.n	8001cf4 <exec6502+0x248>
			clc();
 8001d74:	f7ff fa7c 	bl	8001270 <clc>
			break;
 8001d78:	e7bc      	b.n	8001cf4 <exec6502+0x248>
			absy();
 8001d7a:	f7fe ffe7 	bl	8000d4c <absy>
			ora();
 8001d7e:	f7ff fca3 	bl	80016c8 <ora>
			break;
 8001d82:	e7b7      	b.n	8001cf4 <exec6502+0x248>
			absx();
 8001d84:	f7fe ffc6 	bl	8000d14 <absx>
			ora();
 8001d88:	f7ff fc9e 	bl	80016c8 <ora>
			break;
 8001d8c:	e7b2      	b.n	8001cf4 <exec6502+0x248>
			absx();
 8001d8e:	f7fe ffc1 	bl	8000d14 <absx>
			asl();
 8001d92:	f7ff f8e9 	bl	8000f68 <asl>
			break;
 8001d96:	e7ad      	b.n	8001cf4 <exec6502+0x248>
			abso();
 8001d98:	f7fe ffa4 	bl	8000ce4 <abso>
			jsr();
 8001d9c:	f7ff fbf2 	bl	8001584 <jsr>
			break;
 8001da0:	e7a8      	b.n	8001cf4 <exec6502+0x248>
			indx();
 8001da2:	f7ff f815 	bl	8000dd0 <indx>
			op_and();
 8001da6:	f7ff f8b7 	bl	8000f18 <op_and>
			break;
 8001daa:	e7a3      	b.n	8001cf4 <exec6502+0x248>
			zp();
 8001dac:	f7fe ff50 	bl	8000c50 <zp>
			op_bit();
 8001db0:	f7ff f96a 	bl	8001088 <op_bit>
			break;
 8001db4:	e79e      	b.n	8001cf4 <exec6502+0x248>
			zp();
 8001db6:	f7fe ff4b 	bl	8000c50 <zp>
			op_and();
 8001dba:	f7ff f8ad 	bl	8000f18 <op_and>
			break;
 8001dbe:	e799      	b.n	8001cf4 <exec6502+0x248>
			zp();
 8001dc0:	f7fe ff46 	bl	8000c50 <zp>
			rol();
 8001dc4:	f7ff fcda 	bl	800177c <rol>
			break;
 8001dc8:	e794      	b.n	8001cf4 <exec6502+0x248>
			plp();
 8001dca:	f7ff fccd 	bl	8001768 <plp>
			break;
 8001dce:	e791      	b.n	8001cf4 <exec6502+0x248>
			imm();
 8001dd0:	f7fe ff32 	bl	8000c38 <imm>
			op_and();
 8001dd4:	f7ff f8a0 	bl	8000f18 <op_and>
			break;
 8001dd8:	e78c      	b.n	8001cf4 <exec6502+0x248>
  useaccum = 1;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	702b      	strb	r3, [r5, #0]
			rol();
 8001dde:	f7ff fccd 	bl	800177c <rol>
			break;
 8001de2:	e787      	b.n	8001cf4 <exec6502+0x248>
			abso();
 8001de4:	f7fe ff7e 	bl	8000ce4 <abso>
			op_bit();
 8001de8:	f7ff f94e 	bl	8001088 <op_bit>
			break;
 8001dec:	e782      	b.n	8001cf4 <exec6502+0x248>
			abso();
 8001dee:	f7fe ff79 	bl	8000ce4 <abso>
			op_and();
 8001df2:	f7ff f891 	bl	8000f18 <op_and>
			break;
 8001df6:	e77d      	b.n	8001cf4 <exec6502+0x248>
			abso();
 8001df8:	f7fe ff74 	bl	8000ce4 <abso>
			rol();
 8001dfc:	f7ff fcbe 	bl	800177c <rol>
			break;
 8001e00:	e778      	b.n	8001cf4 <exec6502+0x248>
			rel();
 8001e02:	f7fe ff5b 	bl	8000cbc <rel>
			bmi();
 8001e06:	f7ff f961 	bl	80010cc <bmi>
			break;
 8001e0a:	e773      	b.n	8001cf4 <exec6502+0x248>
			indy();
 8001e0c:	f7fe fffe 	bl	8000e0c <indy>
			op_and();
 8001e10:	f7ff f882 	bl	8000f18 <op_and>
			break;
 8001e14:	e76e      	b.n	8001cf4 <exec6502+0x248>
			zpx();
 8001e16:	f7fe ff29 	bl	8000c6c <zpx>
			op_and();
 8001e1a:	f7ff f87d 	bl	8000f18 <op_and>
			break;
 8001e1e:	e769      	b.n	8001cf4 <exec6502+0x248>
			zpx();
 8001e20:	f7fe ff24 	bl	8000c6c <zpx>
			rol();
 8001e24:	f7ff fcaa 	bl	800177c <rol>
			break;
 8001e28:	e764      	b.n	8001cf4 <exec6502+0x248>
			sec();
 8001e2a:	f7ff fd7f 	bl	800192c <sec>
			break;
 8001e2e:	e761      	b.n	8001cf4 <exec6502+0x248>
			absy();
 8001e30:	f7fe ff8c 	bl	8000d4c <absy>
			op_and();
 8001e34:	f7ff f870 	bl	8000f18 <op_and>
			break;
 8001e38:	e75c      	b.n	8001cf4 <exec6502+0x248>
			absx();
 8001e3a:	f7fe ff6b 	bl	8000d14 <absx>
			op_and();
 8001e3e:	f7ff f86b 	bl	8000f18 <op_and>
			break;
 8001e42:	e757      	b.n	8001cf4 <exec6502+0x248>
			absx();
 8001e44:	f7fe ff66 	bl	8000d14 <absx>
			rol();
 8001e48:	f7ff fc98 	bl	800177c <rol>
			break;
 8001e4c:	e752      	b.n	8001cf4 <exec6502+0x248>
			rti();
 8001e4e:	f7ff fcf1 	bl	8001834 <rti>
			break;
 8001e52:	e74f      	b.n	8001cf4 <exec6502+0x248>
			indx();
 8001e54:	f7fe ffbc 	bl	8000dd0 <indx>
			eor();
 8001e58:	f7ff fb0c 	bl	8001474 <eor>
			break;
 8001e5c:	e74a      	b.n	8001cf4 <exec6502+0x248>
			zp();
 8001e5e:	f7fe fef7 	bl	8000c50 <zp>
			eor();
 8001e62:	f7ff fb07 	bl	8001474 <eor>
			break;
 8001e66:	e745      	b.n	8001cf4 <exec6502+0x248>
			zp();
 8001e68:	f7fe fef2 	bl	8000c50 <zp>
			lsr();
 8001e6c:	f7ff fc00 	bl	8001670 <lsr>
			break;
 8001e70:	e740      	b.n	8001cf4 <exec6502+0x248>
			pha();
 8001e72:	f7ff fc4f 	bl	8001714 <pha>
			break;
 8001e76:	e73d      	b.n	8001cf4 <exec6502+0x248>
			imm();
 8001e78:	f7fe fede 	bl	8000c38 <imm>
			eor();
 8001e7c:	f7ff fafa 	bl	8001474 <eor>
			break;
 8001e80:	e738      	b.n	8001cf4 <exec6502+0x248>
  useaccum = 1;
 8001e82:	2301      	movs	r3, #1
 8001e84:	702b      	strb	r3, [r5, #0]
			lsr();
 8001e86:	f7ff fbf3 	bl	8001670 <lsr>
			break;
 8001e8a:	e733      	b.n	8001cf4 <exec6502+0x248>
			abso();
 8001e8c:	f7fe ff2a 	bl	8000ce4 <abso>
			jmp();
 8001e90:	f7ff fb6e 	bl	8001570 <jmp>
			break;
 8001e94:	e72e      	b.n	8001cf4 <exec6502+0x248>
			abso();
 8001e96:	f7fe ff25 	bl	8000ce4 <abso>
			eor();
 8001e9a:	f7ff faeb 	bl	8001474 <eor>
			break;
 8001e9e:	e729      	b.n	8001cf4 <exec6502+0x248>
			abso();
 8001ea0:	f7fe ff20 	bl	8000ce4 <abso>
			lsr();
 8001ea4:	f7ff fbe4 	bl	8001670 <lsr>
			break;
 8001ea8:	e724      	b.n	8001cf4 <exec6502+0x248>
			rel();
 8001eaa:	f7fe ff07 	bl	8000cbc <rel>
			bvc();
 8001eae:	f7ff f99b 	bl	80011e8 <bvc>
			break;
 8001eb2:	e71f      	b.n	8001cf4 <exec6502+0x248>
			indy();
 8001eb4:	f7fe ffaa 	bl	8000e0c <indy>
			eor();
 8001eb8:	f7ff fadc 	bl	8001474 <eor>
			break;
 8001ebc:	e71a      	b.n	8001cf4 <exec6502+0x248>
			zpx();
 8001ebe:	f7fe fed5 	bl	8000c6c <zpx>
			eor();
 8001ec2:	f7ff fad7 	bl	8001474 <eor>
			break;
 8001ec6:	e715      	b.n	8001cf4 <exec6502+0x248>
			zpx();
 8001ec8:	f7fe fed0 	bl	8000c6c <zpx>
			lsr();
 8001ecc:	f7ff fbd0 	bl	8001670 <lsr>
			break;
 8001ed0:	e710      	b.n	8001cf4 <exec6502+0x248>
			cli();
 8001ed2:	f7ff f9dd 	bl	8001290 <cli>
			break;
 8001ed6:	e70d      	b.n	8001cf4 <exec6502+0x248>
			absy();
 8001ed8:	f7fe ff38 	bl	8000d4c <absy>
			eor();
 8001edc:	f7ff faca 	bl	8001474 <eor>
			break;
 8001ee0:	e708      	b.n	8001cf4 <exec6502+0x248>
			absx();
 8001ee2:	f7fe ff17 	bl	8000d14 <absx>
			eor();
 8001ee6:	f7ff fac5 	bl	8001474 <eor>
			break;
 8001eea:	e703      	b.n	8001cf4 <exec6502+0x248>
			absx();
 8001eec:	f7fe ff12 	bl	8000d14 <absx>
			lsr();
 8001ef0:	f7ff fbbe 	bl	8001670 <lsr>
			break;
 8001ef4:	e6fe      	b.n	8001cf4 <exec6502+0x248>
			rts();
 8001ef6:	f7ff fcaf 	bl	8001858 <rts>
			break;
 8001efa:	e6fb      	b.n	8001cf4 <exec6502+0x248>
			indx();
 8001efc:	f7fe ff68 	bl	8000dd0 <indx>
			adc();
 8001f00:	f7fe ffb4 	bl	8000e6c <adc>
			break;
 8001f04:	e6f6      	b.n	8001cf4 <exec6502+0x248>
			zp();
 8001f06:	f7fe fea3 	bl	8000c50 <zp>
			adc();
 8001f0a:	f7fe ffaf 	bl	8000e6c <adc>
			break;
 8001f0e:	e6f1      	b.n	8001cf4 <exec6502+0x248>
			zp();
 8001f10:	f7fe fe9e 	bl	8000c50 <zp>
			ror();
 8001f14:	f7ff fc60 	bl	80017d8 <ror>
			break;
 8001f18:	e6ec      	b.n	8001cf4 <exec6502+0x248>
			pla();
 8001f1a:	f7ff fc09 	bl	8001730 <pla>
			break;
 8001f1e:	e6e9      	b.n	8001cf4 <exec6502+0x248>
			imm();
 8001f20:	f7fe fe8a 	bl	8000c38 <imm>
			adc();
 8001f24:	f7fe ffa2 	bl	8000e6c <adc>
			break;
 8001f28:	e6e4      	b.n	8001cf4 <exec6502+0x248>
  useaccum = 1;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	702b      	strb	r3, [r5, #0]
			ror();
 8001f2e:	f7ff fc53 	bl	80017d8 <ror>
			break;
 8001f32:	e6df      	b.n	8001cf4 <exec6502+0x248>
			ind();
 8001f34:	f7fe ff26 	bl	8000d84 <ind>
			jmp();
 8001f38:	f7ff fb1a 	bl	8001570 <jmp>
			break;
 8001f3c:	e6da      	b.n	8001cf4 <exec6502+0x248>
			abso();
 8001f3e:	f7fe fed1 	bl	8000ce4 <abso>
			adc();
 8001f42:	f7fe ff93 	bl	8000e6c <adc>
			break;
 8001f46:	e6d5      	b.n	8001cf4 <exec6502+0x248>
			abso();
 8001f48:	f7fe fecc 	bl	8000ce4 <abso>
			ror();
 8001f4c:	f7ff fc44 	bl	80017d8 <ror>
			break;
 8001f50:	e6d0      	b.n	8001cf4 <exec6502+0x248>
			rel();
 8001f52:	f7fe feb3 	bl	8000cbc <rel>
			bvs();
 8001f56:	f7ff f969 	bl	800122c <bvs>
			break;
 8001f5a:	e6cb      	b.n	8001cf4 <exec6502+0x248>
			indy();
 8001f5c:	f7fe ff56 	bl	8000e0c <indy>
			adc();
 8001f60:	f7fe ff84 	bl	8000e6c <adc>
			break;
 8001f64:	e6c6      	b.n	8001cf4 <exec6502+0x248>
			zpx();
 8001f66:	f7fe fe81 	bl	8000c6c <zpx>
			adc();
 8001f6a:	f7fe ff7f 	bl	8000e6c <adc>
			break;
 8001f6e:	e6c1      	b.n	8001cf4 <exec6502+0x248>
			zpx();
 8001f70:	f7fe fe7c 	bl	8000c6c <zpx>
			ror();
 8001f74:	f7ff fc30 	bl	80017d8 <ror>
			break;
 8001f78:	e6bc      	b.n	8001cf4 <exec6502+0x248>
			sei();
 8001f7a:	f7ff fce7 	bl	800194c <sei>
			break;
 8001f7e:	e6b9      	b.n	8001cf4 <exec6502+0x248>
			absy();
 8001f80:	f7fe fee4 	bl	8000d4c <absy>
			adc();
 8001f84:	f7fe ff72 	bl	8000e6c <adc>
			break;
 8001f88:	e6b4      	b.n	8001cf4 <exec6502+0x248>
			absx();
 8001f8a:	f7fe fec3 	bl	8000d14 <absx>
			adc();
 8001f8e:	f7fe ff6d 	bl	8000e6c <adc>
			break;
 8001f92:	e6af      	b.n	8001cf4 <exec6502+0x248>
			absx();
 8001f94:	f7fe febe 	bl	8000d14 <absx>
			ror();
 8001f98:	f7ff fc1e 	bl	80017d8 <ror>
			break;
 8001f9c:	e6aa      	b.n	8001cf4 <exec6502+0x248>
			indx();
 8001f9e:	f7fe ff17 	bl	8000dd0 <indx>
			sta();
 8001fa2:	f7ff fcdb 	bl	800195c <sta>
			break;
 8001fa6:	e6a5      	b.n	8001cf4 <exec6502+0x248>
			zp();
 8001fa8:	f7fe fe52 	bl	8000c50 <zp>
			sty();
 8001fac:	f7ff fce2 	bl	8001974 <sty>
			break;
 8001fb0:	e6a0      	b.n	8001cf4 <exec6502+0x248>
			zp();
 8001fb2:	f7fe fe4d 	bl	8000c50 <zp>
			sta();
 8001fb6:	f7ff fcd1 	bl	800195c <sta>
			break;
 8001fba:	e69b      	b.n	8001cf4 <exec6502+0x248>
			zp();
 8001fbc:	f7fe fe48 	bl	8000c50 <zp>
			stx();
 8001fc0:	f7ff fcd2 	bl	8001968 <stx>
			break;
 8001fc4:	e696      	b.n	8001cf4 <exec6502+0x248>
			dey();
 8001fc6:	f7ff fa3b 	bl	8001440 <dey>
			break;
 8001fca:	e693      	b.n	8001cf4 <exec6502+0x248>
			txa();
 8001fcc:	f7ff fd2c 	bl	8001a28 <txa>
			break;
 8001fd0:	e690      	b.n	8001cf4 <exec6502+0x248>
			abso();
 8001fd2:	f7fe fe87 	bl	8000ce4 <abso>
			sty();
 8001fd6:	f7ff fccd 	bl	8001974 <sty>
			break;
 8001fda:	e68b      	b.n	8001cf4 <exec6502+0x248>
			abso();
 8001fdc:	f7fe fe82 	bl	8000ce4 <abso>
			sta();
 8001fe0:	f7ff fcbc 	bl	800195c <sta>
			break;
 8001fe4:	e686      	b.n	8001cf4 <exec6502+0x248>
			abso();
 8001fe6:	f7fe fe7d 	bl	8000ce4 <abso>
			stx();
 8001fea:	f7ff fcbd 	bl	8001968 <stx>
			break;
 8001fee:	e681      	b.n	8001cf4 <exec6502+0x248>
			rel();
 8001ff0:	f7fe fe64 	bl	8000cbc <rel>
			bcc();
 8001ff4:	f7fe ffe2 	bl	8000fbc <bcc>
			break;
 8001ff8:	e67c      	b.n	8001cf4 <exec6502+0x248>
			indy();
 8001ffa:	f7fe ff07 	bl	8000e0c <indy>
			sta();
 8001ffe:	f7ff fcad 	bl	800195c <sta>
			break;
 8002002:	e677      	b.n	8001cf4 <exec6502+0x248>
			zpx();
 8002004:	f7fe fe32 	bl	8000c6c <zpx>
			sty();
 8002008:	f7ff fcb4 	bl	8001974 <sty>
			break;
 800200c:	e672      	b.n	8001cf4 <exec6502+0x248>
			zpx();
 800200e:	f7fe fe2d 	bl	8000c6c <zpx>
			sta();
 8002012:	f7ff fca3 	bl	800195c <sta>
			break;
 8002016:	e66d      	b.n	8001cf4 <exec6502+0x248>
			zpy();
 8002018:	f7fe fe3c 	bl	8000c94 <zpy>
			stx();
 800201c:	f7ff fca4 	bl	8001968 <stx>
			break;
 8002020:	e668      	b.n	8001cf4 <exec6502+0x248>
			tya();
 8002022:	f7ff fd27 	bl	8001a74 <tya>
			break;
 8002026:	e665      	b.n	8001cf4 <exec6502+0x248>
			absy();
 8002028:	f7fe fe90 	bl	8000d4c <absy>
			sta();
 800202c:	f7ff fc96 	bl	800195c <sta>
			break;
 8002030:	e660      	b.n	8001cf4 <exec6502+0x248>
 8002032:	bf00      	nop
 8002034:	200081b8 	.word	0x200081b8
			txs();
 8002038:	f7ff fd12 	bl	8001a60 <txs>
			break;
 800203c:	e65a      	b.n	8001cf4 <exec6502+0x248>
			absx();
 800203e:	f7fe fe69 	bl	8000d14 <absx>
			sta();
 8002042:	f7ff fc8b 	bl	800195c <sta>
			break;
 8002046:	e655      	b.n	8001cf4 <exec6502+0x248>
			imm();
 8002048:	f7fe fdf6 	bl	8000c38 <imm>
			ldy();
 800204c:	f7ff faee 	bl	800162c <ldy>
			break;
 8002050:	e650      	b.n	8001cf4 <exec6502+0x248>
			indx();
 8002052:	f7fe febd 	bl	8000dd0 <indx>
			lda();
 8002056:	f7ff faa5 	bl	80015a4 <lda>
			break;
 800205a:	e64b      	b.n	8001cf4 <exec6502+0x248>
			imm();
 800205c:	f7fe fdec 	bl	8000c38 <imm>
			ldx();
 8002060:	f7ff fac2 	bl	80015e8 <ldx>
			break;
 8002064:	e646      	b.n	8001cf4 <exec6502+0x248>
			zp();
 8002066:	f7fe fdf3 	bl	8000c50 <zp>
			ldy();
 800206a:	f7ff fadf 	bl	800162c <ldy>
			break;
 800206e:	e641      	b.n	8001cf4 <exec6502+0x248>
			zp();
 8002070:	f7fe fdee 	bl	8000c50 <zp>
			lda();
 8002074:	f7ff fa96 	bl	80015a4 <lda>
			break;
 8002078:	e63c      	b.n	8001cf4 <exec6502+0x248>
			zp();
 800207a:	f7fe fde9 	bl	8000c50 <zp>
			ldx();
 800207e:	f7ff fab3 	bl	80015e8 <ldx>
			break;
 8002082:	e637      	b.n	8001cf4 <exec6502+0x248>
			tay();
 8002084:	f7ff fc98 	bl	80019b8 <tay>
			break;
 8002088:	e634      	b.n	8001cf4 <exec6502+0x248>
			imm();
 800208a:	f7fe fdd5 	bl	8000c38 <imm>
			lda();
 800208e:	f7ff fa89 	bl	80015a4 <lda>
			break;
 8002092:	e62f      	b.n	8001cf4 <exec6502+0x248>
			tax();
 8002094:	f7ff fc74 	bl	8001980 <tax>
			break;
 8002098:	e62c      	b.n	8001cf4 <exec6502+0x248>
			abso();
 800209a:	f7fe fe23 	bl	8000ce4 <abso>
			ldy();
 800209e:	f7ff fac5 	bl	800162c <ldy>
			break;
 80020a2:	e627      	b.n	8001cf4 <exec6502+0x248>
			abso();
 80020a4:	f7fe fe1e 	bl	8000ce4 <abso>
			lda();
 80020a8:	f7ff fa7c 	bl	80015a4 <lda>
			break;
 80020ac:	e622      	b.n	8001cf4 <exec6502+0x248>
			abso();
 80020ae:	f7fe fe19 	bl	8000ce4 <abso>
			ldx();
 80020b2:	f7ff fa99 	bl	80015e8 <ldx>
			break;
 80020b6:	e61d      	b.n	8001cf4 <exec6502+0x248>
			rel();
 80020b8:	f7fe fe00 	bl	8000cbc <rel>
			bcs();
 80020bc:	f7fe ffa0 	bl	8001000 <bcs>
			break;
 80020c0:	e618      	b.n	8001cf4 <exec6502+0x248>
			indy();
 80020c2:	f7fe fea3 	bl	8000e0c <indy>
			lda();
 80020c6:	f7ff fa6d 	bl	80015a4 <lda>
			break;
 80020ca:	e613      	b.n	8001cf4 <exec6502+0x248>
			zpx();
 80020cc:	f7fe fdce 	bl	8000c6c <zpx>
			ldy();
 80020d0:	f7ff faac 	bl	800162c <ldy>
			break;
 80020d4:	e60e      	b.n	8001cf4 <exec6502+0x248>
			zpx();
 80020d6:	f7fe fdc9 	bl	8000c6c <zpx>
			lda();
 80020da:	f7ff fa63 	bl	80015a4 <lda>
			break;
 80020de:	e609      	b.n	8001cf4 <exec6502+0x248>
			zpy();
 80020e0:	f7fe fdd8 	bl	8000c94 <zpy>
			ldx();
 80020e4:	f7ff fa80 	bl	80015e8 <ldx>
			break;
 80020e8:	e604      	b.n	8001cf4 <exec6502+0x248>
			clv();
 80020ea:	f7ff f8d9 	bl	80012a0 <clv>
			break;
 80020ee:	e601      	b.n	8001cf4 <exec6502+0x248>
			absy();
 80020f0:	f7fe fe2c 	bl	8000d4c <absy>
			lda();
 80020f4:	f7ff fa56 	bl	80015a4 <lda>
			break;
 80020f8:	e5fc      	b.n	8001cf4 <exec6502+0x248>
			tsx();
 80020fa:	f7ff fc79 	bl	80019f0 <tsx>
			break;
 80020fe:	e5f9      	b.n	8001cf4 <exec6502+0x248>
			absx();
 8002100:	f7fe fe08 	bl	8000d14 <absx>
			ldy();
 8002104:	f7ff fa92 	bl	800162c <ldy>
			break;
 8002108:	e5f4      	b.n	8001cf4 <exec6502+0x248>
			absx();
 800210a:	f7fe fe03 	bl	8000d14 <absx>
			lda();
 800210e:	f7ff fa49 	bl	80015a4 <lda>
			break;
 8002112:	e5ef      	b.n	8001cf4 <exec6502+0x248>
			absy();
 8002114:	f7fe fe1a 	bl	8000d4c <absy>
			ldx();
 8002118:	f7ff fa66 	bl	80015e8 <ldx>
			break;
 800211c:	e5ea      	b.n	8001cf4 <exec6502+0x248>
			imm();
 800211e:	f7fe fd8b 	bl	8000c38 <imm>
			cpy();
 8002122:	f7ff f921 	bl	8001368 <cpy>
			break;
 8002126:	e5e5      	b.n	8001cf4 <exec6502+0x248>
			indx();
 8002128:	f7fe fe52 	bl	8000dd0 <indx>
			cmp();
 800212c:	f7ff f8c0 	bl	80012b0 <cmp>
			break;
 8002130:	e5e0      	b.n	8001cf4 <exec6502+0x248>
			zp();
 8002132:	f7fe fd8d 	bl	8000c50 <zp>
			cpy();
 8002136:	f7ff f917 	bl	8001368 <cpy>
			break;
 800213a:	e5db      	b.n	8001cf4 <exec6502+0x248>
			zp();
 800213c:	f7fe fd88 	bl	8000c50 <zp>
			cmp();
 8002140:	f7ff f8b6 	bl	80012b0 <cmp>
			break;
 8002144:	e5d6      	b.n	8001cf4 <exec6502+0x248>
			zp();
 8002146:	f7fe fd83 	bl	8000c50 <zp>
			dec();
 800214a:	f7ff f93b 	bl	80013c4 <dec>
			break;
 800214e:	e5d1      	b.n	8001cf4 <exec6502+0x248>
			iny();
 8002150:	f7ff f9f4 	bl	800153c <iny>
			break;
 8002154:	e5ce      	b.n	8001cf4 <exec6502+0x248>
			imm();
 8002156:	f7fe fd6f 	bl	8000c38 <imm>
			cmp();
 800215a:	f7ff f8a9 	bl	80012b0 <cmp>
			break;
 800215e:	e5c9      	b.n	8001cf4 <exec6502+0x248>
			dex();
 8002160:	f7ff f954 	bl	800140c <dex>
			break;
 8002164:	e5c6      	b.n	8001cf4 <exec6502+0x248>
			abso();
 8002166:	f7fe fdbd 	bl	8000ce4 <abso>
			cpy();
 800216a:	f7ff f8fd 	bl	8001368 <cpy>
			break;
 800216e:	e5c1      	b.n	8001cf4 <exec6502+0x248>
			abso();
 8002170:	f7fe fdb8 	bl	8000ce4 <abso>
			cmp();
 8002174:	f7ff f89c 	bl	80012b0 <cmp>
			break;
 8002178:	e5bc      	b.n	8001cf4 <exec6502+0x248>
			abso();
 800217a:	f7fe fdb3 	bl	8000ce4 <abso>
			dec();
 800217e:	f7ff f921 	bl	80013c4 <dec>
			break;
 8002182:	e5b7      	b.n	8001cf4 <exec6502+0x248>
			rel();
 8002184:	f7fe fd9a 	bl	8000cbc <rel>
			bne();
 8002188:	f7fe ffc4 	bl	8001114 <bne>
			break;
 800218c:	e5b2      	b.n	8001cf4 <exec6502+0x248>
			indy();
 800218e:	f7fe fe3d 	bl	8000e0c <indy>
			cmp();
 8002192:	f7ff f88d 	bl	80012b0 <cmp>
			break;
 8002196:	e5ad      	b.n	8001cf4 <exec6502+0x248>
			zpx();
 8002198:	f7fe fd68 	bl	8000c6c <zpx>
			cmp();
 800219c:	f7ff f888 	bl	80012b0 <cmp>
			break;
 80021a0:	e5a8      	b.n	8001cf4 <exec6502+0x248>
			zpx();
 80021a2:	f7fe fd63 	bl	8000c6c <zpx>
			dec();
 80021a6:	f7ff f90d 	bl	80013c4 <dec>
			break;
 80021aa:	e5a3      	b.n	8001cf4 <exec6502+0x248>
			cld();
 80021ac:	f7ff f868 	bl	8001280 <cld>
			break;
 80021b0:	e5a0      	b.n	8001cf4 <exec6502+0x248>
			absy();
 80021b2:	f7fe fdcb 	bl	8000d4c <absy>
			cmp();
 80021b6:	f7ff f87b 	bl	80012b0 <cmp>
			break;
 80021ba:	e59b      	b.n	8001cf4 <exec6502+0x248>
			absx();
 80021bc:	f7fe fdaa 	bl	8000d14 <absx>
			cmp();
 80021c0:	f7ff f876 	bl	80012b0 <cmp>
			break;
 80021c4:	e596      	b.n	8001cf4 <exec6502+0x248>
			absx();
 80021c6:	f7fe fda5 	bl	8000d14 <absx>
			dec();
 80021ca:	f7ff f8fb 	bl	80013c4 <dec>
			break;
 80021ce:	e591      	b.n	8001cf4 <exec6502+0x248>
			imm();
 80021d0:	f7fe fd32 	bl	8000c38 <imm>
			cpx();
 80021d4:	f7ff f89a 	bl	800130c <cpx>
			break;
 80021d8:	e58c      	b.n	8001cf4 <exec6502+0x248>
			indx();
 80021da:	f7fe fdf9 	bl	8000dd0 <indx>
			sbc();
 80021de:	f7ff fb49 	bl	8001874 <sbc>
			break;
 80021e2:	e587      	b.n	8001cf4 <exec6502+0x248>
			zp();
 80021e4:	f7fe fd34 	bl	8000c50 <zp>
			cpx();
 80021e8:	f7ff f890 	bl	800130c <cpx>
			break;
 80021ec:	e582      	b.n	8001cf4 <exec6502+0x248>
			zp();
 80021ee:	f7fe fd2f 	bl	8000c50 <zp>
			sbc();
 80021f2:	f7ff fb3f 	bl	8001874 <sbc>
			break;
 80021f6:	e57d      	b.n	8001cf4 <exec6502+0x248>
			zp();
 80021f8:	f7fe fd2a 	bl	8000c50 <zp>
			inc();
 80021fc:	f7ff f960 	bl	80014c0 <inc>
			break;
 8002200:	e578      	b.n	8001cf4 <exec6502+0x248>
			inx();
 8002202:	f7ff f981 	bl	8001508 <inx>
			break;
 8002206:	e575      	b.n	8001cf4 <exec6502+0x248>
			imm();
 8002208:	f7fe fd16 	bl	8000c38 <imm>
			sbc();
 800220c:	f7ff fb32 	bl	8001874 <sbc>
			break;
 8002210:	e570      	b.n	8001cf4 <exec6502+0x248>
			abso();
 8002212:	f7fe fd67 	bl	8000ce4 <abso>
			cpx();
 8002216:	f7ff f879 	bl	800130c <cpx>
			break;
 800221a:	e56b      	b.n	8001cf4 <exec6502+0x248>
			abso();
 800221c:	f7fe fd62 	bl	8000ce4 <abso>
			sbc();
 8002220:	f7ff fb28 	bl	8001874 <sbc>
			break;
 8002224:	e566      	b.n	8001cf4 <exec6502+0x248>
			abso();
 8002226:	f7fe fd5d 	bl	8000ce4 <abso>
			inc();
 800222a:	f7ff f949 	bl	80014c0 <inc>
			break;
 800222e:	e561      	b.n	8001cf4 <exec6502+0x248>
			rel();
 8002230:	f7fe fd44 	bl	8000cbc <rel>
			beq();
 8002234:	f7fe ff06 	bl	8001044 <beq>
			break;
 8002238:	e55c      	b.n	8001cf4 <exec6502+0x248>
			indy();
 800223a:	f7fe fde7 	bl	8000e0c <indy>
			sbc();
 800223e:	f7ff fb19 	bl	8001874 <sbc>
			break;
 8002242:	e557      	b.n	8001cf4 <exec6502+0x248>
			zpx();
 8002244:	f7fe fd12 	bl	8000c6c <zpx>
			sbc();
 8002248:	f7ff fb14 	bl	8001874 <sbc>
			break;
 800224c:	e552      	b.n	8001cf4 <exec6502+0x248>
			zpx();
 800224e:	f7fe fd0d 	bl	8000c6c <zpx>
			inc();
 8002252:	f7ff f935 	bl	80014c0 <inc>
			break;
 8002256:	e54d      	b.n	8001cf4 <exec6502+0x248>
			sed();
 8002258:	f7ff fb70 	bl	800193c <sed>
			break;
 800225c:	e54a      	b.n	8001cf4 <exec6502+0x248>
			absy();
 800225e:	f7fe fd75 	bl	8000d4c <absy>
			sbc();
 8002262:	f7ff fb07 	bl	8001874 <sbc>
			break;
 8002266:	e545      	b.n	8001cf4 <exec6502+0x248>
			absx();
 8002268:	f7fe fd54 	bl	8000d14 <absx>
			sbc();
 800226c:	f7ff fb02 	bl	8001874 <sbc>
			break;
 8002270:	e540      	b.n	8001cf4 <exec6502+0x248>
			absx();
 8002272:	f7fe fd4f 	bl	8000d14 <absx>
			inc();
 8002276:	f7ff f923 	bl	80014c0 <inc>
			break;
 800227a:	e53b      	b.n	8001cf4 <exec6502+0x248>

0800227c <parseFilename>:
// Extract matrix, 004A
// Example: apple30th.0280.0FFF.bin
// Extract apple30th, 0280, 0FFF, bin
// return tapeFile struct

tapeFile* parseFilename(char* filename) {
 800227c:	b570      	push	{r4, r5, r6, lr}
 800227e:	4606      	mov	r6, r0
    tapeFile* file = malloc(sizeof(tapeFile));
 8002280:	204a      	movs	r0, #74	; 0x4a
 8002282:	f003 fb57 	bl	8005934 <malloc>
    char* token = strtok(filename, ".");
 8002286:	4d14      	ldr	r5, [pc, #80]	; (80022d8 <parseFilename+0x5c>)
    tapeFile* file = malloc(sizeof(tapeFile));
 8002288:	4604      	mov	r4, r0
    char* token = strtok(filename, ".");
 800228a:	4629      	mov	r1, r5
 800228c:	4630      	mov	r0, r6
 800228e:	f003 fc8d 	bl	8005bac <strtok>
 8002292:	4601      	mov	r1, r0
    strcpy(file->name, token);
 8002294:	4620      	mov	r0, r4
 8002296:	f003 fc81 	bl	8005b9c <strcpy>
    token = strtok(NULL, ".");
 800229a:	4629      	mov	r1, r5
 800229c:	2000      	movs	r0, #0
 800229e:	f003 fc85 	bl	8005bac <strtok>
    file->start = strtol(token, NULL, 16);
 80022a2:	2210      	movs	r2, #16
 80022a4:	2100      	movs	r1, #0
 80022a6:	f003 fd59 	bl	8005d5c <strtol>
    token = strtok(NULL, ".");
 80022aa:	4629      	mov	r1, r5
    file->start = strtol(token, NULL, 16);
 80022ac:	f8a4 0040 	strh.w	r0, [r4, #64]	; 0x40
    token = strtok(NULL, ".");
 80022b0:	2000      	movs	r0, #0
 80022b2:	f003 fc7b 	bl	8005bac <strtok>
    file->end = strtol(token, NULL, 16);
 80022b6:	2210      	movs	r2, #16
 80022b8:	2100      	movs	r1, #0
 80022ba:	f003 fd4f 	bl	8005d5c <strtol>
    token = strtok(NULL, ".");
 80022be:	4629      	mov	r1, r5
    file->end = strtol(token, NULL, 16);
 80022c0:	f8a4 0042 	strh.w	r0, [r4, #66]	; 0x42
    token = strtok(NULL, ".");
 80022c4:	2000      	movs	r0, #0
 80022c6:	f003 fc71 	bl	8005bac <strtok>
 80022ca:	4601      	mov	r1, r0
    strcpy(file->type, token);
 80022cc:	f104 0044 	add.w	r0, r4, #68	; 0x44
 80022d0:	f003 fc64 	bl	8005b9c <strcpy>
    return file;
}
 80022d4:	4620      	mov	r0, r4
 80022d6:	bd70      	pop	{r4, r5, r6, pc}
 80022d8:	080079bd 	.word	0x080079bd

080022dc <loadBasic>:
// Write first 182 bytes header to RAM starting from 0x004A
// Write the rest of the file to RAM starting from the starting address
// delete the buffer
// Return 0 on success

int loadBasic(tapeFile* file) {
 80022dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022de:	4606      	mov	r6, r0
 80022e0:	f2ad 4d64 	subw	sp, sp, #1124	; 0x464
    FATFS fs;
    FIL fileHandle;
    UINT bytesRead;
    uint8_t* buffer = malloc(MAX_TAPE_SIZE);
 80022e4:	f44f 40a0 	mov.w	r0, #20480	; 0x5000
 80022e8:	f003 fb24 	bl	8005934 <malloc>
    FRESULT result = f_mount(&fs, SDPath, 1);
 80022ec:	2201      	movs	r2, #1
    uint8_t* buffer = malloc(MAX_TAPE_SIZE);
 80022ee:	4605      	mov	r5, r0
    FRESULT result = f_mount(&fs, SDPath, 1);
 80022f0:	491f      	ldr	r1, [pc, #124]	; (8002370 <loadBasic+0x94>)
 80022f2:	a88c      	add	r0, sp, #560	; 0x230
 80022f4:	f003 f82e 	bl	8005354 <f_mount>
    if (result != FR_OK) {
 80022f8:	4604      	mov	r4, r0
 80022fa:	bbb0      	cbnz	r0, 800236a <loadBasic+0x8e>
        return -1;
    }
    f_open(&fileHandle, file->name, FA_READ | FA_OPEN_EXISTING);
 80022fc:	4631      	mov	r1, r6
 80022fe:	2201      	movs	r2, #1
 8002300:	a801      	add	r0, sp, #4
 8002302:	f003 f853 	bl	80053ac <f_open>
    f_read(&fileHandle, buffer, MAX_TAPE_SIZE, &bytesRead);
 8002306:	466b      	mov	r3, sp
 8002308:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 800230c:	4629      	mov	r1, r5
 800230e:	a801      	add	r0, sp, #4
 8002310:	f003 f90c 	bl	800552c <f_read>
        char* line = malloc(64);
 8002314:	2040      	movs	r0, #64	; 0x40
 8002316:	f003 fb0d 	bl	8005934 <malloc>
 800231a:	4607      	mov	r7, r0
        sprintf(line, "Bytes read: %d", bytesRead);
 800231c:	9a00      	ldr	r2, [sp, #0]
 800231e:	4915      	ldr	r1, [pc, #84]	; (8002374 <loadBasic+0x98>)
 8002320:	f003 fc1c 	bl	8005b5c <siprintf>
        writelineTerminal(line);
 8002324:	4638      	mov	r0, r7
 8002326:	f7fe f955 	bl	80005d4 <writelineTerminal>
    f_close(&fileHandle);
 800232a:	a801      	add	r0, sp, #4
 800232c:	f003 fa26 	bl	800577c <f_close>
    memccpy(&RAM[BASIC_HEADER_START], buffer, 0, BASIC_HEADER_SIZE);
 8002330:	23b6      	movs	r3, #182	; 0xb6
 8002332:	4622      	mov	r2, r4
 8002334:	4629      	mov	r1, r5
 8002336:	4810      	ldr	r0, [pc, #64]	; (8002378 <loadBasic+0x9c>)
 8002338:	f003 fb0c 	bl	8005954 <memccpy>
    memccpy(&RAM[file->start], &buffer[BASIC_HEADER_SIZE], 0, file->end - file->start + 1);
 800233c:	f8b6 0040 	ldrh.w	r0, [r6, #64]	; 0x40
 8002340:	f8b6 3042 	ldrh.w	r3, [r6, #66]	; 0x42
 8002344:	4e0d      	ldr	r6, [pc, #52]	; (800237c <loadBasic+0xa0>)
 8002346:	1a1b      	subs	r3, r3, r0
 8002348:	4622      	mov	r2, r4
 800234a:	3301      	adds	r3, #1
 800234c:	f105 01b6 	add.w	r1, r5, #182	; 0xb6
 8002350:	4430      	add	r0, r6
 8002352:	f003 faff 	bl	8005954 <memccpy>
    free(buffer);
 8002356:	4628      	mov	r0, r5
 8002358:	f003 faf4 	bl	8005944 <free>
    free(line);
 800235c:	4638      	mov	r0, r7
 800235e:	f003 faf1 	bl	8005944 <free>
    return 0;
 8002362:	4620      	mov	r0, r4
}
 8002364:	f20d 4d64 	addw	sp, sp, #1124	; 0x464
 8002368:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return -1;
 800236a:	f04f 30ff 	mov.w	r0, #4294967295
 800236e:	e7f9      	b.n	8002364 <loadBasic+0x88>
 8002370:	200081d8 	.word	0x200081d8
 8002374:	08008b28 	.word	0x08008b28
 8002378:	200000dc 	.word	0x200000dc
 800237c:	20000092 	.word	0x20000092

08002380 <loadBin>:
// Read binary file into buffer
// Write the file to RAM starting from the starting address
// delete the buffer
// Return 0 on success

int loadBin(tapeFile* file) {
 8002380:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002382:	4606      	mov	r6, r0
 8002384:	f2ad 4d64 	subw	sp, sp, #1124	; 0x464
    FATFS fs;
    FIL fileHandle;
    UINT bytesRead;
    uint8_t* buffer = malloc(MAX_TAPE_SIZE);
 8002388:	f44f 40a0 	mov.w	r0, #20480	; 0x5000
 800238c:	f003 fad2 	bl	8005934 <malloc>
    FRESULT result = f_mount(&fs, SDPath, 1);
 8002390:	2201      	movs	r2, #1
    uint8_t* buffer = malloc(MAX_TAPE_SIZE);
 8002392:	4605      	mov	r5, r0
    FRESULT result = f_mount(&fs, SDPath, 1);
 8002394:	491c      	ldr	r1, [pc, #112]	; (8002408 <loadBin+0x88>)
 8002396:	a88c      	add	r0, sp, #560	; 0x230
 8002398:	f002 ffdc 	bl	8005354 <f_mount>
    if (result != FR_OK) {
 800239c:	4604      	mov	r4, r0
 800239e:	bb78      	cbnz	r0, 8002400 <loadBin+0x80>
        return -1;
    }
    f_open(&fileHandle, file->name, FA_READ | FA_OPEN_EXISTING);
 80023a0:	4631      	mov	r1, r6
 80023a2:	2201      	movs	r2, #1
 80023a4:	a801      	add	r0, sp, #4
 80023a6:	f003 f801 	bl	80053ac <f_open>
    f_read(&fileHandle, buffer, MAX_TAPE_SIZE, &bytesRead);
 80023aa:	466b      	mov	r3, sp
 80023ac:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 80023b0:	4629      	mov	r1, r5
 80023b2:	a801      	add	r0, sp, #4
 80023b4:	f003 f8ba 	bl	800552c <f_read>
        char* line = malloc(64);
 80023b8:	2040      	movs	r0, #64	; 0x40
 80023ba:	f003 fabb 	bl	8005934 <malloc>
 80023be:	4607      	mov	r7, r0
        sprintf(line, "Bytes read: %d", bytesRead);
 80023c0:	9a00      	ldr	r2, [sp, #0]
 80023c2:	4912      	ldr	r1, [pc, #72]	; (800240c <loadBin+0x8c>)
 80023c4:	f003 fbca 	bl	8005b5c <siprintf>
        writelineTerminal(line);
 80023c8:	4638      	mov	r0, r7
 80023ca:	f7fe f903 	bl	80005d4 <writelineTerminal>
    f_close(&fileHandle);
 80023ce:	a801      	add	r0, sp, #4
 80023d0:	f003 f9d4 	bl	800577c <f_close>
    memccpy(&RAM[file->start], buffer, 0, file->end - file->start + 1);
 80023d4:	f8b6 0040 	ldrh.w	r0, [r6, #64]	; 0x40
 80023d8:	f8b6 3042 	ldrh.w	r3, [r6, #66]	; 0x42
 80023dc:	4e0c      	ldr	r6, [pc, #48]	; (8002410 <loadBin+0x90>)
 80023de:	1a1b      	subs	r3, r3, r0
 80023e0:	4622      	mov	r2, r4
 80023e2:	4629      	mov	r1, r5
 80023e4:	3301      	adds	r3, #1
 80023e6:	4430      	add	r0, r6
 80023e8:	f003 fab4 	bl	8005954 <memccpy>
    free(buffer);
 80023ec:	4628      	mov	r0, r5
 80023ee:	f003 faa9 	bl	8005944 <free>
    free(line);
 80023f2:	4638      	mov	r0, r7
 80023f4:	f003 faa6 	bl	8005944 <free>
    return 0;
 80023f8:	4620      	mov	r0, r4
}
 80023fa:	f20d 4d64 	addw	sp, sp, #1124	; 0x464
 80023fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return -1;
 8002400:	f04f 30ff 	mov.w	r0, #4294967295
 8002404:	e7f9      	b.n	80023fa <loadBin+0x7a>
 8002406:	bf00      	nop
 8002408:	200081d8 	.word	0x200081d8
 800240c:	08008b28 	.word	0x08008b28
 8002410:	20000092 	.word	0x20000092

08002414 <tapeLoading>:
// Check if the file is .basic or .bin
// Call the appropriate function
// writelineTerminal to show info and how to run the program (1. [starting address]R) if .bin
// writelineTerminal to show info and how to run the program (1. E2B3R, 2. RUN) if .basic

void tapeLoading(char* filename) {
 8002414:	b538      	push	{r3, r4, r5, lr}
    tapeFile* file = parseFilename(filename);
 8002416:	f7ff ff31 	bl	800227c <parseFilename>
    if (strcmp(file->type, "basic") == 0) {
 800241a:	f100 0444 	add.w	r4, r0, #68	; 0x44
    tapeFile* file = parseFilename(filename);
 800241e:	4605      	mov	r5, r0
    if (strcmp(file->type, "basic") == 0) {
 8002420:	492e      	ldr	r1, [pc, #184]	; (80024dc <tapeLoading+0xc8>)
 8002422:	4620      	mov	r0, r4
 8002424:	f7fd fefe 	bl	8000224 <strcmp>
 8002428:	b9c8      	cbnz	r0, 800245e <tapeLoading+0x4a>
        writelineTerminal("Loading BASIC program...");
 800242a:	482d      	ldr	r0, [pc, #180]	; (80024e0 <tapeLoading+0xcc>)
 800242c:	f7fe f8d2 	bl	80005d4 <writelineTerminal>
        int result = loadBasic(file);
 8002430:	4628      	mov	r0, r5
 8002432:	f7ff ff53 	bl	80022dc <loadBasic>
        if (result != 0) {
 8002436:	b120      	cbz	r0, 8002442 <tapeLoading+0x2e>
        sprintf(line, "1. %04XR", file->start);
        writelineTerminal(line);
        free(line);
    }
    free(file);
 8002438:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            writelineTerminal("Error loading file.");
 800243c:	4829      	ldr	r0, [pc, #164]	; (80024e4 <tapeLoading+0xd0>)
 800243e:	f7fe b8c9 	b.w	80005d4 <writelineTerminal>
        writelineTerminal("Program loaded.");
 8002442:	4829      	ldr	r0, [pc, #164]	; (80024e8 <tapeLoading+0xd4>)
 8002444:	f7fe f8c6 	bl	80005d4 <writelineTerminal>
        writelineTerminal("To run, type:");
 8002448:	4828      	ldr	r0, [pc, #160]	; (80024ec <tapeLoading+0xd8>)
 800244a:	f7fe f8c3 	bl	80005d4 <writelineTerminal>
        writelineTerminal("1. E2B3R, 2. RUN");
 800244e:	4828      	ldr	r0, [pc, #160]	; (80024f0 <tapeLoading+0xdc>)
 8002450:	f7fe f8c0 	bl	80005d4 <writelineTerminal>
    free(file);
 8002454:	4628      	mov	r0, r5
 8002456:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    free(file);
 800245a:	f003 ba73 	b.w	8005944 <free>
    } else if (strcmp(file->type, "bin") == 0) {
 800245e:	4620      	mov	r0, r4
 8002460:	4924      	ldr	r1, [pc, #144]	; (80024f4 <tapeLoading+0xe0>)
 8002462:	f7fd fedf 	bl	8000224 <strcmp>
 8002466:	2800      	cmp	r0, #0
 8002468:	d1f4      	bne.n	8002454 <tapeLoading+0x40>
        char* line = malloc(64);
 800246a:	2040      	movs	r0, #64	; 0x40
 800246c:	f003 fa62 	bl	8005934 <malloc>
 8002470:	4604      	mov	r4, r0
        writelineTerminal("Loading binary program...");
 8002472:	4821      	ldr	r0, [pc, #132]	; (80024f8 <tapeLoading+0xe4>)
 8002474:	f7fe f8ae 	bl	80005d4 <writelineTerminal>
        sprintf(line, "Program: %s", file->name);
 8002478:	462a      	mov	r2, r5
 800247a:	4920      	ldr	r1, [pc, #128]	; (80024fc <tapeLoading+0xe8>)
 800247c:	4620      	mov	r0, r4
 800247e:	f003 fb6d 	bl	8005b5c <siprintf>
        writelineTerminal(line);
 8002482:	4620      	mov	r0, r4
 8002484:	f7fe f8a6 	bl	80005d4 <writelineTerminal>
        sprintf(line, "Start: %04XR", file->start);
 8002488:	f8b5 2040 	ldrh.w	r2, [r5, #64]	; 0x40
 800248c:	491c      	ldr	r1, [pc, #112]	; (8002500 <tapeLoading+0xec>)
 800248e:	4620      	mov	r0, r4
 8002490:	f003 fb64 	bl	8005b5c <siprintf>
        writelineTerminal(line);
 8002494:	4620      	mov	r0, r4
 8002496:	f7fe f89d 	bl	80005d4 <writelineTerminal>
        sprintf(line, "End: %04XR", file->end);
 800249a:	f8b5 2042 	ldrh.w	r2, [r5, #66]	; 0x42
 800249e:	4919      	ldr	r1, [pc, #100]	; (8002504 <tapeLoading+0xf0>)
 80024a0:	4620      	mov	r0, r4
 80024a2:	f003 fb5b 	bl	8005b5c <siprintf>
        writelineTerminal(line);
 80024a6:	4620      	mov	r0, r4
 80024a8:	f7fe f894 	bl	80005d4 <writelineTerminal>
        int result = loadBin(file);
 80024ac:	4628      	mov	r0, r5
 80024ae:	f7ff ff67 	bl	8002380 <loadBin>
        if (result != 0) {
 80024b2:	2800      	cmp	r0, #0
 80024b4:	d1c0      	bne.n	8002438 <tapeLoading+0x24>
        writelineTerminal("Program loaded.");
 80024b6:	480c      	ldr	r0, [pc, #48]	; (80024e8 <tapeLoading+0xd4>)
 80024b8:	f7fe f88c 	bl	80005d4 <writelineTerminal>
        writelineTerminal("To run, type:");
 80024bc:	480b      	ldr	r0, [pc, #44]	; (80024ec <tapeLoading+0xd8>)
 80024be:	f7fe f889 	bl	80005d4 <writelineTerminal>
        sprintf(line, "1. %04XR", file->start);
 80024c2:	f8b5 2040 	ldrh.w	r2, [r5, #64]	; 0x40
 80024c6:	4910      	ldr	r1, [pc, #64]	; (8002508 <tapeLoading+0xf4>)
 80024c8:	4620      	mov	r0, r4
 80024ca:	f003 fb47 	bl	8005b5c <siprintf>
        writelineTerminal(line);
 80024ce:	4620      	mov	r0, r4
 80024d0:	f7fe f880 	bl	80005d4 <writelineTerminal>
        free(line);
 80024d4:	4620      	mov	r0, r4
 80024d6:	f003 fa35 	bl	8005944 <free>
 80024da:	e7bb      	b.n	8002454 <tapeLoading+0x40>
 80024dc:	08008b37 	.word	0x08008b37
 80024e0:	08008b3d 	.word	0x08008b3d
 80024e4:	08008b56 	.word	0x08008b56
 80024e8:	08008b6a 	.word	0x08008b6a
 80024ec:	08008b7a 	.word	0x08008b7a
 80024f0:	08008b88 	.word	0x08008b88
 80024f4:	08007a24 	.word	0x08007a24
 80024f8:	08008b99 	.word	0x08008b99
 80024fc:	08008bb3 	.word	0x08008bb3
 8002500:	08008bbf 	.word	0x08008bbf
 8002504:	08008bcc 	.word	0x08008bcc
 8002508:	08008bd7 	.word	0x08008bd7

0800250c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800250c:	4b0e      	ldr	r3, [pc, #56]	; (8002548 <HAL_MspInit+0x3c>)
{
 800250e:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002510:	699a      	ldr	r2, [r3, #24]
 8002512:	f042 0201 	orr.w	r2, r2, #1
 8002516:	619a      	str	r2, [r3, #24]
 8002518:	699a      	ldr	r2, [r3, #24]
 800251a:	f002 0201 	and.w	r2, r2, #1
 800251e:	9200      	str	r2, [sp, #0]
 8002520:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002522:	69da      	ldr	r2, [r3, #28]
 8002524:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002528:	61da      	str	r2, [r3, #28]
 800252a:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800252c:	4a07      	ldr	r2, [pc, #28]	; (800254c <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800252e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002532:	9301      	str	r3, [sp, #4]
 8002534:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002536:	6853      	ldr	r3, [r2, #4]
 8002538:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800253c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002540:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002542:	b002      	add	sp, #8
 8002544:	4770      	bx	lr
 8002546:	bf00      	nop
 8002548:	40021000 	.word	0x40021000
 800254c:	40010000 	.word	0x40010000

08002550 <HAL_SD_MspInit>:
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002550:	2210      	movs	r2, #16
{
 8002552:	b530      	push	{r4, r5, lr}
 8002554:	4604      	mov	r4, r0
 8002556:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002558:	eb0d 0002 	add.w	r0, sp, r2
 800255c:	2100      	movs	r1, #0
 800255e:	f003 fa08 	bl	8005972 <memset>
  if(hsd->Instance==SDIO)
 8002562:	6822      	ldr	r2, [r4, #0]
 8002564:	4b1e      	ldr	r3, [pc, #120]	; (80025e0 <HAL_SD_MspInit+0x90>)
 8002566:	429a      	cmp	r2, r3
 8002568:	d137      	bne.n	80025da <HAL_SD_MspInit+0x8a>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800256a:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
 800256e:	695a      	ldr	r2, [r3, #20]
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002570:	2502      	movs	r5, #2
    __HAL_RCC_SDIO_CLK_ENABLE();
 8002572:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002576:	615a      	str	r2, [r3, #20]
 8002578:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800257a:	2403      	movs	r4, #3
    __HAL_RCC_SDIO_CLK_ENABLE();
 800257c:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8002580:	9201      	str	r2, [sp, #4]
 8002582:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002584:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002586:	4817      	ldr	r0, [pc, #92]	; (80025e4 <HAL_SD_MspInit+0x94>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002588:	f042 0210 	orr.w	r2, r2, #16
 800258c:	619a      	str	r2, [r3, #24]
 800258e:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002590:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002592:	f002 0210 	and.w	r2, r2, #16
 8002596:	9202      	str	r2, [sp, #8]
 8002598:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800259a:	699a      	ldr	r2, [r3, #24]
 800259c:	f042 0220 	orr.w	r2, r2, #32
 80025a0:	619a      	str	r2, [r3, #24]
 80025a2:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80025a4:	9407      	str	r4, [sp, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80025a6:	f003 0320 	and.w	r3, r3, #32
 80025aa:	9303      	str	r3, [sp, #12]
 80025ac:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ae:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 80025b2:	e9cd 3504 	strd	r3, r5, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025b6:	f000 fa79 	bl	8002aac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80025ba:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025bc:	480a      	ldr	r0, [pc, #40]	; (80025e8 <HAL_SD_MspInit+0x98>)
 80025be:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025c0:	e9cd 3504 	strd	r3, r5, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80025c4:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025c6:	f000 fa71 	bl	8002aac <HAL_GPIO_Init>

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 80025ca:	2200      	movs	r2, #0
 80025cc:	2031      	movs	r0, #49	; 0x31
 80025ce:	4611      	mov	r1, r2
 80025d0:	f000 f976 	bl	80028c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 80025d4:	2031      	movs	r0, #49	; 0x31
 80025d6:	f000 f9a5 	bl	8002924 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80025da:	b009      	add	sp, #36	; 0x24
 80025dc:	bd30      	pop	{r4, r5, pc}
 80025de:	bf00      	nop
 80025e0:	40018000 	.word	0x40018000
 80025e4:	40011000 	.word	0x40011000
 80025e8:	40011400 	.word	0x40011400

080025ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80025ec:	b510      	push	{r4, lr}
 80025ee:	4604      	mov	r4, r0
 80025f0:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025f2:	2210      	movs	r2, #16
 80025f4:	2100      	movs	r1, #0
 80025f6:	a802      	add	r0, sp, #8
 80025f8:	f003 f9bb 	bl	8005972 <memset>
  if(huart->Instance==USART1)
 80025fc:	6822      	ldr	r2, [r4, #0]
 80025fe:	4b17      	ldr	r3, [pc, #92]	; (800265c <HAL_UART_MspInit+0x70>)
 8002600:	429a      	cmp	r2, r3
 8002602:	d128      	bne.n	8002656 <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002604:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8002608:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800260a:	4815      	ldr	r0, [pc, #84]	; (8002660 <HAL_UART_MspInit+0x74>)
    __HAL_RCC_USART1_CLK_ENABLE();
 800260c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002610:	619a      	str	r2, [r3, #24]
 8002612:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002614:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 8002616:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800261a:	9200      	str	r2, [sp, #0]
 800261c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800261e:	699a      	ldr	r2, [r3, #24]
 8002620:	f042 0204 	orr.w	r2, r2, #4
 8002624:	619a      	str	r2, [r3, #24]
 8002626:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002628:	f44f 7200 	mov.w	r2, #512	; 0x200
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800262c:	f003 0304 	and.w	r3, r3, #4
 8002630:	9301      	str	r3, [sp, #4]
 8002632:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002634:	2302      	movs	r3, #2
 8002636:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800263a:	2303      	movs	r3, #3
 800263c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800263e:	f000 fa35 	bl	8002aac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002642:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002646:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002648:	4805      	ldr	r0, [pc, #20]	; (8002660 <HAL_UART_MspInit+0x74>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800264a:	e9cd 1302 	strd	r1, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800264e:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002650:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002652:	f000 fa2b 	bl	8002aac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002656:	b006      	add	sp, #24
 8002658:	bd10      	pop	{r4, pc}
 800265a:	bf00      	nop
 800265c:	40013800 	.word	0x40013800
 8002660:	40010800 	.word	0x40010800

08002664 <HAL_SRAM_MspInit>:

static void HAL_FSMC_MspInit(void){
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002664:	2300      	movs	r3, #0
  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8002666:	b530      	push	{r4, r5, lr}
 8002668:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800266a:	9304      	str	r3, [sp, #16]
  if (FSMC_Initialized) {
 800266c:	4b12      	ldr	r3, [pc, #72]	; (80026b8 <HAL_SRAM_MspInit+0x54>)
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	b9fa      	cbnz	r2, 80026b2 <HAL_SRAM_MspInit+0x4e>
  FSMC_Initialized = 1;
 8002672:	2201      	movs	r2, #1
 8002674:	601a      	str	r2, [r3, #0]
  __HAL_RCC_FSMC_CLK_ENABLE();
 8002676:	4b11      	ldr	r3, [pc, #68]	; (80026bc <HAL_SRAM_MspInit+0x58>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002678:	2502      	movs	r5, #2
  __HAL_RCC_FSMC_CLK_ENABLE();
 800267a:	695a      	ldr	r2, [r3, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800267c:	2403      	movs	r4, #3
  __HAL_RCC_FSMC_CLK_ENABLE();
 800267e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002682:	615a      	str	r2, [r3, #20]
 8002684:	695b      	ldr	r3, [r3, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002686:	480e      	ldr	r0, [pc, #56]	; (80026c0 <HAL_SRAM_MspInit+0x5c>)
  __HAL_RCC_FSMC_CLK_ENABLE();
 8002688:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800268c:	9301      	str	r3, [sp, #4]
 800268e:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002690:	f64f 7380 	movw	r3, #65408	; 0xff80
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002694:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002696:	e9cd 3502 	strd	r3, r5, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800269a:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800269c:	f000 fa06 	bl	8002aac <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80026a0:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026a4:	4807      	ldr	r0, [pc, #28]	; (80026c4 <HAL_SRAM_MspInit+0x60>)
 80026a6:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a8:	e9cd 3502 	strd	r3, r5, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026ac:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026ae:	f000 f9fd 	bl	8002aac <HAL_GPIO_Init>
  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80026b2:	b007      	add	sp, #28
 80026b4:	bd30      	pop	{r4, r5, pc}
 80026b6:	bf00      	nop
 80026b8:	200081cc 	.word	0x200081cc
 80026bc:	40021000 	.word	0x40021000
 80026c0:	40011800 	.word	0x40011800
 80026c4:	40011400 	.word	0x40011400

080026c8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80026c8:	e7fe      	b.n	80026c8 <NMI_Handler>

080026ca <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026ca:	e7fe      	b.n	80026ca <HardFault_Handler>

080026cc <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026cc:	e7fe      	b.n	80026cc <MemManage_Handler>

080026ce <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026ce:	e7fe      	b.n	80026ce <BusFault_Handler>

080026d0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026d0:	e7fe      	b.n	80026d0 <UsageFault_Handler>

080026d2 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026d2:	4770      	bx	lr

080026d4 <DebugMon_Handler>:
 80026d4:	4770      	bx	lr

080026d6 <PendSV_Handler>:
 80026d6:	4770      	bx	lr

080026d8 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026d8:	f000 b8bc 	b.w	8002854 <HAL_IncTick>

080026dc <SDIO_IRQHandler>:
void SDIO_IRQHandler(void)
{
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 80026dc:	4801      	ldr	r0, [pc, #4]	; (80026e4 <SDIO_IRQHandler+0x8>)
 80026de:	f001 b94d 	b.w	800397c <HAL_SD_IRQHandler>
 80026e2:	bf00      	nop
 80026e4:	20008094 	.word	0x20008094

080026e8 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80026e8:	2001      	movs	r0, #1
 80026ea:	4770      	bx	lr

080026ec <_kill>:

int _kill(int pid, int sig)
{
 80026ec:	b508      	push	{r3, lr}
	errno = EINVAL;
 80026ee:	f003 f8f7 	bl	80058e0 <__errno>
 80026f2:	2316      	movs	r3, #22
 80026f4:	6003      	str	r3, [r0, #0]
	return -1;
}
 80026f6:	f04f 30ff 	mov.w	r0, #4294967295
 80026fa:	bd08      	pop	{r3, pc}

080026fc <_exit>:

void _exit (int status)
{
 80026fc:	b508      	push	{r3, lr}
	errno = EINVAL;
 80026fe:	f003 f8ef 	bl	80058e0 <__errno>
 8002702:	2316      	movs	r3, #22
 8002704:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8002706:	e7fe      	b.n	8002706 <_exit+0xa>

08002708 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002708:	b570      	push	{r4, r5, r6, lr}
 800270a:	460d      	mov	r5, r1
 800270c:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800270e:	460e      	mov	r6, r1
 8002710:	1b73      	subs	r3, r6, r5
 8002712:	429c      	cmp	r4, r3
 8002714:	dc01      	bgt.n	800271a <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8002716:	4620      	mov	r0, r4
 8002718:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 800271a:	f3af 8000 	nop.w
 800271e:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002722:	e7f5      	b.n	8002710 <_read+0x8>

08002724 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002724:	b570      	push	{r4, r5, r6, lr}
 8002726:	460d      	mov	r5, r1
 8002728:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800272a:	460e      	mov	r6, r1
 800272c:	1b73      	subs	r3, r6, r5
 800272e:	429c      	cmp	r4, r3
 8002730:	dc01      	bgt.n	8002736 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8002732:	4620      	mov	r0, r4
 8002734:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8002736:	f816 0b01 	ldrb.w	r0, [r6], #1
 800273a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800273e:	e7f5      	b.n	800272c <_write+0x8>

08002740 <_close>:

int _close(int file)
{
	return -1;
}
 8002740:	f04f 30ff 	mov.w	r0, #4294967295
 8002744:	4770      	bx	lr

08002746 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8002746:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 800274a:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 800274c:	604b      	str	r3, [r1, #4]
}
 800274e:	4770      	bx	lr

08002750 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8002750:	2001      	movs	r0, #1
 8002752:	4770      	bx	lr

08002754 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8002754:	2000      	movs	r0, #0
 8002756:	4770      	bx	lr

08002758 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002758:	4a0b      	ldr	r2, [pc, #44]	; (8002788 <_sbrk+0x30>)
{
 800275a:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 800275c:	6811      	ldr	r1, [r2, #0]
{
 800275e:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8002760:	b909      	cbnz	r1, 8002766 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8002762:	490a      	ldr	r1, [pc, #40]	; (800278c <_sbrk+0x34>)
 8002764:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002766:	6810      	ldr	r0, [r2, #0]
 8002768:	4909      	ldr	r1, [pc, #36]	; (8002790 <_sbrk+0x38>)
 800276a:	4c0a      	ldr	r4, [pc, #40]	; (8002794 <_sbrk+0x3c>)
 800276c:	4403      	add	r3, r0
 800276e:	1b09      	subs	r1, r1, r4
 8002770:	428b      	cmp	r3, r1
 8002772:	d906      	bls.n	8002782 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8002774:	f003 f8b4 	bl	80058e0 <__errno>
 8002778:	230c      	movs	r3, #12
 800277a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800277c:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8002780:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8002782:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8002784:	e7fc      	b.n	8002780 <_sbrk+0x28>
 8002786:	bf00      	nop
 8002788:	200081d0 	.word	0x200081d0
 800278c:	20008220 	.word	0x20008220
 8002790:	20010000 	.word	0x20010000
 8002794:	00000400 	.word	0x00000400

08002798 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002798:	4770      	bx	lr
	...

0800279c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800279c:	f7ff fffc 	bl	8002798 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80027a0:	480b      	ldr	r0, [pc, #44]	; (80027d0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80027a2:	490c      	ldr	r1, [pc, #48]	; (80027d4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80027a4:	4a0c      	ldr	r2, [pc, #48]	; (80027d8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80027a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027a8:	e002      	b.n	80027b0 <LoopCopyDataInit>

080027aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027ae:	3304      	adds	r3, #4

080027b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027b4:	d3f9      	bcc.n	80027aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027b6:	4a09      	ldr	r2, [pc, #36]	; (80027dc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80027b8:	4c09      	ldr	r4, [pc, #36]	; (80027e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80027ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027bc:	e001      	b.n	80027c2 <LoopFillZerobss>

080027be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027c0:	3204      	adds	r2, #4

080027c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027c4:	d3fb      	bcc.n	80027be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80027c6:	f003 f891 	bl	80058ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80027ca:	f7fe f8d5 	bl	8000978 <main>
  bx lr
 80027ce:	4770      	bx	lr
  ldr r0, =_sdata
 80027d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027d4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80027d8:	08008f00 	.word	0x08008f00
  ldr r2, =_sbss
 80027dc:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80027e0:	2000821c 	.word	0x2000821c

080027e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80027e4:	e7fe      	b.n	80027e4 <ADC1_2_IRQHandler>
	...

080027e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027e8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027ea:	4b0e      	ldr	r3, [pc, #56]	; (8002824 <HAL_InitTick+0x3c>)
{
 80027ec:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027ee:	7818      	ldrb	r0, [r3, #0]
 80027f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027f4:	fbb3 f3f0 	udiv	r3, r3, r0
 80027f8:	4a0b      	ldr	r2, [pc, #44]	; (8002828 <HAL_InitTick+0x40>)
 80027fa:	6810      	ldr	r0, [r2, #0]
 80027fc:	fbb0 f0f3 	udiv	r0, r0, r3
 8002800:	f000 f89e 	bl	8002940 <HAL_SYSTICK_Config>
 8002804:	4604      	mov	r4, r0
 8002806:	b958      	cbnz	r0, 8002820 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002808:	2d0f      	cmp	r5, #15
 800280a:	d809      	bhi.n	8002820 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800280c:	4602      	mov	r2, r0
 800280e:	4629      	mov	r1, r5
 8002810:	f04f 30ff 	mov.w	r0, #4294967295
 8002814:	f000 f854 	bl	80028c0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002818:	4620      	mov	r0, r4
 800281a:	4b04      	ldr	r3, [pc, #16]	; (800282c <HAL_InitTick+0x44>)
 800281c:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800281e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8002820:	2001      	movs	r0, #1
 8002822:	e7fc      	b.n	800281e <HAL_InitTick+0x36>
 8002824:	20000004 	.word	0x20000004
 8002828:	20000000 	.word	0x20000000
 800282c:	20000008 	.word	0x20000008

08002830 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002830:	4a07      	ldr	r2, [pc, #28]	; (8002850 <HAL_Init+0x20>)
{
 8002832:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002834:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002836:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002838:	f043 0310 	orr.w	r3, r3, #16
 800283c:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800283e:	f000 f82d 	bl	800289c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8002842:	200f      	movs	r0, #15
 8002844:	f7ff ffd0 	bl	80027e8 <HAL_InitTick>
  HAL_MspInit();
 8002848:	f7ff fe60 	bl	800250c <HAL_MspInit>
}
 800284c:	2000      	movs	r0, #0
 800284e:	bd08      	pop	{r3, pc}
 8002850:	40022000 	.word	0x40022000

08002854 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002854:	4a03      	ldr	r2, [pc, #12]	; (8002864 <HAL_IncTick+0x10>)
 8002856:	4b04      	ldr	r3, [pc, #16]	; (8002868 <HAL_IncTick+0x14>)
 8002858:	6811      	ldr	r1, [r2, #0]
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	440b      	add	r3, r1
 800285e:	6013      	str	r3, [r2, #0]
}
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop
 8002864:	200081d4 	.word	0x200081d4
 8002868:	20000004 	.word	0x20000004

0800286c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800286c:	4b01      	ldr	r3, [pc, #4]	; (8002874 <HAL_GetTick+0x8>)
 800286e:	6818      	ldr	r0, [r3, #0]
}
 8002870:	4770      	bx	lr
 8002872:	bf00      	nop
 8002874:	200081d4 	.word	0x200081d4

08002878 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002878:	b538      	push	{r3, r4, r5, lr}
 800287a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800287c:	f7ff fff6 	bl	800286c <HAL_GetTick>
 8002880:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002882:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8002884:	bf1e      	ittt	ne
 8002886:	4b04      	ldrne	r3, [pc, #16]	; (8002898 <HAL_Delay+0x20>)
 8002888:	781b      	ldrbne	r3, [r3, #0]
 800288a:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800288c:	f7ff ffee 	bl	800286c <HAL_GetTick>
 8002890:	1b43      	subs	r3, r0, r5
 8002892:	42a3      	cmp	r3, r4
 8002894:	d3fa      	bcc.n	800288c <HAL_Delay+0x14>
  {
  }
}
 8002896:	bd38      	pop	{r3, r4, r5, pc}
 8002898:	20000004 	.word	0x20000004

0800289c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800289c:	4907      	ldr	r1, [pc, #28]	; (80028bc <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800289e:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028a0:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80028a2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028a6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80028aa:	0412      	lsls	r2, r2, #16
 80028ac:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80028b8:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80028ba:	4770      	bx	lr
 80028bc:	e000ed00 	.word	0xe000ed00

080028c0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028c0:	4b16      	ldr	r3, [pc, #88]	; (800291c <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028c2:	b530      	push	{r4, r5, lr}
 80028c4:	68dc      	ldr	r4, [r3, #12]
 80028c6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028ca:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028ce:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028d0:	2b04      	cmp	r3, #4
 80028d2:	bf28      	it	cs
 80028d4:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028d6:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028d8:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028dc:	bf98      	it	ls
 80028de:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028e0:	fa05 f303 	lsl.w	r3, r5, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028e4:	bf88      	it	hi
 80028e6:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028e8:	ea21 0303 	bic.w	r3, r1, r3
 80028ec:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028ee:	fa05 f404 	lsl.w	r4, r5, r4
 80028f2:	ea22 0204 	bic.w	r2, r2, r4
  if ((int32_t)(IRQn) >= 0)
 80028f6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028f8:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028fc:	bfac      	ite	ge
 80028fe:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002902:	4a07      	ldrlt	r2, [pc, #28]	; (8002920 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002904:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8002908:	b2db      	uxtb	r3, r3
 800290a:	bfab      	itete	ge
 800290c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002910:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002914:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002918:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800291a:	bd30      	pop	{r4, r5, pc}
 800291c:	e000ed00 	.word	0xe000ed00
 8002920:	e000ed14 	.word	0xe000ed14

08002924 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002924:	2800      	cmp	r0, #0
 8002926:	db08      	blt.n	800293a <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002928:	2301      	movs	r3, #1
 800292a:	0942      	lsrs	r2, r0, #5
 800292c:	f000 001f 	and.w	r0, r0, #31
 8002930:	fa03 f000 	lsl.w	r0, r3, r0
 8002934:	4b01      	ldr	r3, [pc, #4]	; (800293c <HAL_NVIC_EnableIRQ+0x18>)
 8002936:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800293a:	4770      	bx	lr
 800293c:	e000e100 	.word	0xe000e100

08002940 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002940:	3801      	subs	r0, #1
 8002942:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002946:	d20b      	bcs.n	8002960 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002948:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800294c:	21f0      	movs	r1, #240	; 0xf0
 800294e:	4a05      	ldr	r2, [pc, #20]	; (8002964 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002950:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002952:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002956:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002958:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800295a:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800295c:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800295e:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002960:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002962:	4770      	bx	lr
 8002964:	e000ed00 	.word	0xe000ed00

08002968 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002968:	b510      	push	{r4, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800296a:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800296e:	2b02      	cmp	r3, #2
 8002970:	d003      	beq.n	800297a <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002972:	2304      	movs	r3, #4
 8002974:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 8002976:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 8002978:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800297a:	6803      	ldr	r3, [r0, #0]
 800297c:	4945      	ldr	r1, [pc, #276]	; (8002a94 <HAL_DMA_Abort_IT+0x12c>)
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	f022 020e 	bic.w	r2, r2, #14
 8002984:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	f022 0201 	bic.w	r2, r2, #1
 800298c:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800298e:	4a42      	ldr	r2, [pc, #264]	; (8002a98 <HAL_DMA_Abort_IT+0x130>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d944      	bls.n	8002a1e <HAL_DMA_Abort_IT+0xb6>
 8002994:	428b      	cmp	r3, r1
 8002996:	d03b      	beq.n	8002a10 <HAL_DMA_Abort_IT+0xa8>
 8002998:	3114      	adds	r1, #20
 800299a:	428b      	cmp	r3, r1
 800299c:	d03a      	beq.n	8002a14 <HAL_DMA_Abort_IT+0xac>
 800299e:	3114      	adds	r1, #20
 80029a0:	428b      	cmp	r3, r1
 80029a2:	d039      	beq.n	8002a18 <HAL_DMA_Abort_IT+0xb0>
 80029a4:	3114      	adds	r1, #20
 80029a6:	428b      	cmp	r3, r1
 80029a8:	d026      	beq.n	80029f8 <HAL_DMA_Abort_IT+0x90>
 80029aa:	3114      	adds	r1, #20
 80029ac:	428b      	cmp	r3, r1
 80029ae:	d026      	beq.n	80029fe <HAL_DMA_Abort_IT+0x96>
 80029b0:	3114      	adds	r1, #20
 80029b2:	428b      	cmp	r3, r1
 80029b4:	d026      	beq.n	8002a04 <HAL_DMA_Abort_IT+0x9c>
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d027      	beq.n	8002a0a <HAL_DMA_Abort_IT+0xa2>
 80029ba:	f502 7262 	add.w	r2, r2, #904	; 0x388
 80029be:	4293      	cmp	r3, r2
 80029c0:	d026      	beq.n	8002a10 <HAL_DMA_Abort_IT+0xa8>
 80029c2:	3214      	adds	r2, #20
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d025      	beq.n	8002a14 <HAL_DMA_Abort_IT+0xac>
 80029c8:	3214      	adds	r2, #20
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d024      	beq.n	8002a18 <HAL_DMA_Abort_IT+0xb0>
 80029ce:	3214      	adds	r2, #20
 80029d0:	4293      	cmp	r3, r2
 80029d2:	bf14      	ite	ne
 80029d4:	f44f 3380 	movne.w	r3, #65536	; 0x10000
 80029d8:	f44f 5380 	moveq.w	r3, #4096	; 0x1000
 80029dc:	4a2f      	ldr	r2, [pc, #188]	; (8002a9c <HAL_DMA_Abort_IT+0x134>)
 80029de:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80029e0:	2301      	movs	r3, #1
    __HAL_UNLOCK(hdma);
 80029e2:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 80029e4:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    if(hdma->XferAbortCallback != NULL)
 80029e8:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 80029ea:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d04d      	beq.n	8002a8e <HAL_DMA_Abort_IT+0x126>
      hdma->XferAbortCallback(hdma);
 80029f2:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80029f4:	4620      	mov	r0, r4
 80029f6:	e7bf      	b.n	8002978 <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80029f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029fc:	e7ee      	b.n	80029dc <HAL_DMA_Abort_IT+0x74>
 80029fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a02:	e7eb      	b.n	80029dc <HAL_DMA_Abort_IT+0x74>
 8002a04:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002a08:	e7e8      	b.n	80029dc <HAL_DMA_Abort_IT+0x74>
 8002a0a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a0e:	e7e5      	b.n	80029dc <HAL_DMA_Abort_IT+0x74>
 8002a10:	2301      	movs	r3, #1
 8002a12:	e7e3      	b.n	80029dc <HAL_DMA_Abort_IT+0x74>
 8002a14:	2310      	movs	r3, #16
 8002a16:	e7e1      	b.n	80029dc <HAL_DMA_Abort_IT+0x74>
 8002a18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a1c:	e7de      	b.n	80029dc <HAL_DMA_Abort_IT+0x74>
 8002a1e:	428b      	cmp	r3, r1
 8002a20:	d02e      	beq.n	8002a80 <HAL_DMA_Abort_IT+0x118>
 8002a22:	491f      	ldr	r1, [pc, #124]	; (8002aa0 <HAL_DMA_Abort_IT+0x138>)
 8002a24:	428b      	cmp	r3, r1
 8002a26:	d02d      	beq.n	8002a84 <HAL_DMA_Abort_IT+0x11c>
 8002a28:	3114      	adds	r1, #20
 8002a2a:	428b      	cmp	r3, r1
 8002a2c:	d02c      	beq.n	8002a88 <HAL_DMA_Abort_IT+0x120>
 8002a2e:	3114      	adds	r1, #20
 8002a30:	428b      	cmp	r3, r1
 8002a32:	d019      	beq.n	8002a68 <HAL_DMA_Abort_IT+0x100>
 8002a34:	3114      	adds	r1, #20
 8002a36:	428b      	cmp	r3, r1
 8002a38:	d019      	beq.n	8002a6e <HAL_DMA_Abort_IT+0x106>
 8002a3a:	3114      	adds	r1, #20
 8002a3c:	428b      	cmp	r3, r1
 8002a3e:	d019      	beq.n	8002a74 <HAL_DMA_Abort_IT+0x10c>
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d01a      	beq.n	8002a7a <HAL_DMA_Abort_IT+0x112>
 8002a44:	4a17      	ldr	r2, [pc, #92]	; (8002aa4 <HAL_DMA_Abort_IT+0x13c>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d01a      	beq.n	8002a80 <HAL_DMA_Abort_IT+0x118>
 8002a4a:	3214      	adds	r2, #20
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d019      	beq.n	8002a84 <HAL_DMA_Abort_IT+0x11c>
 8002a50:	3214      	adds	r2, #20
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d018      	beq.n	8002a88 <HAL_DMA_Abort_IT+0x120>
 8002a56:	3214      	adds	r2, #20
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	bf14      	ite	ne
 8002a5c:	f44f 3380 	movne.w	r3, #65536	; 0x10000
 8002a60:	f44f 5380 	moveq.w	r3, #4096	; 0x1000
 8002a64:	4a10      	ldr	r2, [pc, #64]	; (8002aa8 <HAL_DMA_Abort_IT+0x140>)
 8002a66:	e7ba      	b.n	80029de <HAL_DMA_Abort_IT+0x76>
 8002a68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a6c:	e7fa      	b.n	8002a64 <HAL_DMA_Abort_IT+0xfc>
 8002a6e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a72:	e7f7      	b.n	8002a64 <HAL_DMA_Abort_IT+0xfc>
 8002a74:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002a78:	e7f4      	b.n	8002a64 <HAL_DMA_Abort_IT+0xfc>
 8002a7a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a7e:	e7f1      	b.n	8002a64 <HAL_DMA_Abort_IT+0xfc>
 8002a80:	2301      	movs	r3, #1
 8002a82:	e7ef      	b.n	8002a64 <HAL_DMA_Abort_IT+0xfc>
 8002a84:	2310      	movs	r3, #16
 8002a86:	e7ed      	b.n	8002a64 <HAL_DMA_Abort_IT+0xfc>
 8002a88:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a8c:	e7ea      	b.n	8002a64 <HAL_DMA_Abort_IT+0xfc>
  HAL_StatusTypeDef status = HAL_OK;
 8002a8e:	4618      	mov	r0, r3
 8002a90:	e772      	b.n	8002978 <HAL_DMA_Abort_IT+0x10>
 8002a92:	bf00      	nop
 8002a94:	40020008 	.word	0x40020008
 8002a98:	40020080 	.word	0x40020080
 8002a9c:	40020400 	.word	0x40020400
 8002aa0:	4002001c 	.word	0x4002001c
 8002aa4:	40020408 	.word	0x40020408
 8002aa8:	40020000 	.word	0x40020000

08002aac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002aac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002ab0:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8002ab2:	4616      	mov	r6, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002ab4:	4f6a      	ldr	r7, [pc, #424]	; (8002c60 <HAL_GPIO_Init+0x1b4>)
 8002ab6:	4b6b      	ldr	r3, [pc, #428]	; (8002c64 <HAL_GPIO_Init+0x1b8>)
        temp = AFIO->EXTICR[position >> 2u];
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002ab8:	f8df c1ac 	ldr.w	ip, [pc, #428]	; 8002c68 <HAL_GPIO_Init+0x1bc>
      switch (GPIO_Init->Mode)
 8002abc:	f8df e1ac 	ldr.w	lr, [pc, #428]	; 8002c6c <HAL_GPIO_Init+0x1c0>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ac0:	680c      	ldr	r4, [r1, #0]
 8002ac2:	fa34 f506 	lsrs.w	r5, r4, r6
 8002ac6:	d102      	bne.n	8002ace <HAL_GPIO_Init+0x22>
      }
    }

	position++;
  }
}
 8002ac8:	b003      	add	sp, #12
 8002aca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8002ace:	f04f 0801 	mov.w	r8, #1
 8002ad2:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ad6:	ea04 0508 	and.w	r5, r4, r8
    if (iocurrent == ioposition)
 8002ada:	ea38 0404 	bics.w	r4, r8, r4
 8002ade:	f040 8081 	bne.w	8002be4 <HAL_GPIO_Init+0x138>
      switch (GPIO_Init->Mode)
 8002ae2:	684c      	ldr	r4, [r1, #4]
 8002ae4:	2c03      	cmp	r4, #3
 8002ae6:	d807      	bhi.n	8002af8 <HAL_GPIO_Init+0x4c>
 8002ae8:	3c01      	subs	r4, #1
 8002aea:	2c02      	cmp	r4, #2
 8002aec:	f200 808c 	bhi.w	8002c08 <HAL_GPIO_Init+0x15c>
 8002af0:	e8df f004 	tbb	[pc, r4]
 8002af4:	a29d      	.short	0xa29d
 8002af6:	a8          	.byte	0xa8
 8002af7:	00          	.byte	0x00
 8002af8:	2c12      	cmp	r4, #18
 8002afa:	f000 80a0 	beq.w	8002c3e <HAL_GPIO_Init+0x192>
 8002afe:	d873      	bhi.n	8002be8 <HAL_GPIO_Init+0x13c>
 8002b00:	2c11      	cmp	r4, #17
 8002b02:	f000 8096 	beq.w	8002c32 <HAL_GPIO_Init+0x186>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002b06:	2dff      	cmp	r5, #255	; 0xff
 8002b08:	bf98      	it	ls
 8002b0a:	4682      	movls	sl, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002b0c:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002b10:	bf88      	it	hi
 8002b12:	f100 0a04 	addhi.w	sl, r0, #4
 8002b16:	ea4f 0486 	mov.w	r4, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002b1a:	f8da 8000 	ldr.w	r8, [sl]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002b1e:	bf88      	it	hi
 8002b20:	3c20      	subhi	r4, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002b22:	fa09 fb04 	lsl.w	fp, r9, r4
 8002b26:	ea28 080b 	bic.w	r8, r8, fp
 8002b2a:	fa02 f404 	lsl.w	r4, r2, r4
 8002b2e:	ea48 0404 	orr.w	r4, r8, r4
 8002b32:	f8ca 4000 	str.w	r4, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b36:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8002b3a:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8002b3e:	d051      	beq.n	8002be4 <HAL_GPIO_Init+0x138>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002b40:	69bc      	ldr	r4, [r7, #24]
 8002b42:	f026 0803 	bic.w	r8, r6, #3
 8002b46:	f044 0401 	orr.w	r4, r4, #1
 8002b4a:	61bc      	str	r4, [r7, #24]
 8002b4c:	69bc      	ldr	r4, [r7, #24]
 8002b4e:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8002b52:	f004 0401 	and.w	r4, r4, #1
 8002b56:	9401      	str	r4, [sp, #4]
 8002b58:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002b5c:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002b60:	9c01      	ldr	r4, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002b62:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8002b66:	f8d8 4008 	ldr.w	r4, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002b6a:	fa09 f90b 	lsl.w	r9, r9, fp
 8002b6e:	ea24 0909 	bic.w	r9, r4, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002b72:	4c3f      	ldr	r4, [pc, #252]	; (8002c70 <HAL_GPIO_Init+0x1c4>)
 8002b74:	42a0      	cmp	r0, r4
 8002b76:	d069      	beq.n	8002c4c <HAL_GPIO_Init+0x1a0>
 8002b78:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002b7c:	42a0      	cmp	r0, r4
 8002b7e:	d067      	beq.n	8002c50 <HAL_GPIO_Init+0x1a4>
 8002b80:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002b84:	42a0      	cmp	r0, r4
 8002b86:	d065      	beq.n	8002c54 <HAL_GPIO_Init+0x1a8>
 8002b88:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002b8c:	42a0      	cmp	r0, r4
 8002b8e:	d063      	beq.n	8002c58 <HAL_GPIO_Init+0x1ac>
 8002b90:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002b94:	42a0      	cmp	r0, r4
 8002b96:	d061      	beq.n	8002c5c <HAL_GPIO_Init+0x1b0>
 8002b98:	4560      	cmp	r0, ip
 8002b9a:	bf0c      	ite	eq
 8002b9c:	2405      	moveq	r4, #5
 8002b9e:	2406      	movne	r4, #6
 8002ba0:	fa04 f40b 	lsl.w	r4, r4, fp
 8002ba4:	ea44 0409 	orr.w	r4, r4, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8002ba8:	f8c8 4008 	str.w	r4, [r8, #8]
          SET_BIT(EXTI->RTSR, iocurrent);
 8002bac:	689c      	ldr	r4, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002bae:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8002bb2:	bf14      	ite	ne
 8002bb4:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002bb6:	43ac      	biceq	r4, r5
 8002bb8:	609c      	str	r4, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8002bba:	68dc      	ldr	r4, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002bbc:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8002bc0:	bf14      	ite	ne
 8002bc2:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002bc4:	43ac      	biceq	r4, r5
 8002bc6:	60dc      	str	r4, [r3, #12]
          SET_BIT(EXTI->EMR, iocurrent);
 8002bc8:	685c      	ldr	r4, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002bca:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8002bce:	bf14      	ite	ne
 8002bd0:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002bd2:	43ac      	biceq	r4, r5
 8002bd4:	605c      	str	r4, [r3, #4]
          SET_BIT(EXTI->IMR, iocurrent);
 8002bd6:	681c      	ldr	r4, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002bd8:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8002bdc:	bf14      	ite	ne
 8002bde:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002be0:	43ac      	biceq	r4, r5
 8002be2:	601c      	str	r4, [r3, #0]
	position++;
 8002be4:	3601      	adds	r6, #1
 8002be6:	e76b      	b.n	8002ac0 <HAL_GPIO_Init+0x14>
      switch (GPIO_Init->Mode)
 8002be8:	4574      	cmp	r4, lr
 8002bea:	d00d      	beq.n	8002c08 <HAL_GPIO_Init+0x15c>
 8002bec:	d818      	bhi.n	8002c20 <HAL_GPIO_Init+0x174>
 8002bee:	f8df 9084 	ldr.w	r9, [pc, #132]	; 8002c74 <HAL_GPIO_Init+0x1c8>
 8002bf2:	454c      	cmp	r4, r9
 8002bf4:	d008      	beq.n	8002c08 <HAL_GPIO_Init+0x15c>
 8002bf6:	f509 2970 	add.w	r9, r9, #983040	; 0xf0000
 8002bfa:	454c      	cmp	r4, r9
 8002bfc:	d004      	beq.n	8002c08 <HAL_GPIO_Init+0x15c>
 8002bfe:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8002c02:	454c      	cmp	r4, r9
 8002c04:	f47f af7f 	bne.w	8002b06 <HAL_GPIO_Init+0x5a>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002c08:	688a      	ldr	r2, [r1, #8]
 8002c0a:	b1ea      	cbz	r2, 8002c48 <HAL_GPIO_Init+0x19c>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002c0c:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8002c0e:	bf08      	it	eq
 8002c10:	f8c0 8010 	streq.w	r8, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c14:	f04f 0208 	mov.w	r2, #8
            GPIOx->BRR = ioposition;
 8002c18:	bf18      	it	ne
 8002c1a:	f8c0 8014 	strne.w	r8, [r0, #20]
 8002c1e:	e772      	b.n	8002b06 <HAL_GPIO_Init+0x5a>
      switch (GPIO_Init->Mode)
 8002c20:	f8df 9054 	ldr.w	r9, [pc, #84]	; 8002c78 <HAL_GPIO_Init+0x1cc>
 8002c24:	454c      	cmp	r4, r9
 8002c26:	d0ef      	beq.n	8002c08 <HAL_GPIO_Init+0x15c>
 8002c28:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8002c2c:	e7e9      	b.n	8002c02 <HAL_GPIO_Init+0x156>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002c2e:	68ca      	ldr	r2, [r1, #12]
          break;
 8002c30:	e769      	b.n	8002b06 <HAL_GPIO_Init+0x5a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002c32:	68ca      	ldr	r2, [r1, #12]
 8002c34:	3204      	adds	r2, #4
          break;
 8002c36:	e766      	b.n	8002b06 <HAL_GPIO_Init+0x5a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002c38:	68ca      	ldr	r2, [r1, #12]
 8002c3a:	3208      	adds	r2, #8
          break;
 8002c3c:	e763      	b.n	8002b06 <HAL_GPIO_Init+0x5a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002c3e:	68ca      	ldr	r2, [r1, #12]
 8002c40:	320c      	adds	r2, #12
          break;
 8002c42:	e760      	b.n	8002b06 <HAL_GPIO_Init+0x5a>
      switch (GPIO_Init->Mode)
 8002c44:	2200      	movs	r2, #0
 8002c46:	e75e      	b.n	8002b06 <HAL_GPIO_Init+0x5a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002c48:	2204      	movs	r2, #4
 8002c4a:	e75c      	b.n	8002b06 <HAL_GPIO_Init+0x5a>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002c4c:	2400      	movs	r4, #0
 8002c4e:	e7a7      	b.n	8002ba0 <HAL_GPIO_Init+0xf4>
 8002c50:	2401      	movs	r4, #1
 8002c52:	e7a5      	b.n	8002ba0 <HAL_GPIO_Init+0xf4>
 8002c54:	2402      	movs	r4, #2
 8002c56:	e7a3      	b.n	8002ba0 <HAL_GPIO_Init+0xf4>
 8002c58:	2403      	movs	r4, #3
 8002c5a:	e7a1      	b.n	8002ba0 <HAL_GPIO_Init+0xf4>
 8002c5c:	2404      	movs	r4, #4
 8002c5e:	e79f      	b.n	8002ba0 <HAL_GPIO_Init+0xf4>
 8002c60:	40021000 	.word	0x40021000
 8002c64:	40010400 	.word	0x40010400
 8002c68:	40011c00 	.word	0x40011c00
 8002c6c:	10220000 	.word	0x10220000
 8002c70:	40010800 	.word	0x40010800
 8002c74:	10120000 	.word	0x10120000
 8002c78:	10310000 	.word	0x10310000

08002c7c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002c7c:	6883      	ldr	r3, [r0, #8]
 8002c7e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8002c80:	bf14      	ite	ne
 8002c82:	2001      	movne	r0, #1
 8002c84:	2000      	moveq	r0, #0
 8002c86:	4770      	bx	lr

08002c88 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c88:	b10a      	cbz	r2, 8002c8e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002c8a:	6101      	str	r1, [r0, #16]
  }
}
 8002c8c:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002c8e:	0409      	lsls	r1, r1, #16
 8002c90:	e7fb      	b.n	8002c8a <HAL_GPIO_WritePin+0x2>
	...

08002c94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c94:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c98:	4605      	mov	r5, r0
 8002c9a:	b338      	cbz	r0, 8002cec <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c9c:	6803      	ldr	r3, [r0, #0]
 8002c9e:	07db      	lsls	r3, r3, #31
 8002ca0:	d410      	bmi.n	8002cc4 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ca2:	682b      	ldr	r3, [r5, #0]
 8002ca4:	079f      	lsls	r7, r3, #30
 8002ca6:	d45e      	bmi.n	8002d66 <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ca8:	682b      	ldr	r3, [r5, #0]
 8002caa:	0719      	lsls	r1, r3, #28
 8002cac:	f100 8095 	bmi.w	8002dda <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cb0:	682b      	ldr	r3, [r5, #0]
 8002cb2:	075a      	lsls	r2, r3, #29
 8002cb4:	f100 80c1 	bmi.w	8002e3a <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cb8:	69e8      	ldr	r0, [r5, #28]
 8002cba:	2800      	cmp	r0, #0
 8002cbc:	f040 812c 	bne.w	8002f18 <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 8002cc0:	2000      	movs	r0, #0
 8002cc2:	e029      	b.n	8002d18 <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002cc4:	4c90      	ldr	r4, [pc, #576]	; (8002f08 <HAL_RCC_OscConfig+0x274>)
 8002cc6:	6863      	ldr	r3, [r4, #4]
 8002cc8:	f003 030c 	and.w	r3, r3, #12
 8002ccc:	2b04      	cmp	r3, #4
 8002cce:	d007      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002cd0:	6863      	ldr	r3, [r4, #4]
 8002cd2:	f003 030c 	and.w	r3, r3, #12
 8002cd6:	2b08      	cmp	r3, #8
 8002cd8:	d10a      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x5c>
 8002cda:	6863      	ldr	r3, [r4, #4]
 8002cdc:	03de      	lsls	r6, r3, #15
 8002cde:	d507      	bpl.n	8002cf0 <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ce0:	6823      	ldr	r3, [r4, #0]
 8002ce2:	039c      	lsls	r4, r3, #14
 8002ce4:	d5dd      	bpl.n	8002ca2 <HAL_RCC_OscConfig+0xe>
 8002ce6:	686b      	ldr	r3, [r5, #4]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d1da      	bne.n	8002ca2 <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 8002cec:	2001      	movs	r0, #1
 8002cee:	e013      	b.n	8002d18 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cf0:	686b      	ldr	r3, [r5, #4]
 8002cf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cf6:	d112      	bne.n	8002d1e <HAL_RCC_OscConfig+0x8a>
 8002cf8:	6823      	ldr	r3, [r4, #0]
 8002cfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cfe:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002d00:	f7ff fdb4 	bl	800286c <HAL_GetTick>
 8002d04:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d06:	6823      	ldr	r3, [r4, #0]
 8002d08:	0398      	lsls	r0, r3, #14
 8002d0a:	d4ca      	bmi.n	8002ca2 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d0c:	f7ff fdae 	bl	800286c <HAL_GetTick>
 8002d10:	1b80      	subs	r0, r0, r6
 8002d12:	2864      	cmp	r0, #100	; 0x64
 8002d14:	d9f7      	bls.n	8002d06 <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 8002d16:	2003      	movs	r0, #3
}
 8002d18:	b002      	add	sp, #8
 8002d1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d1e:	b99b      	cbnz	r3, 8002d48 <HAL_RCC_OscConfig+0xb4>
 8002d20:	6823      	ldr	r3, [r4, #0]
 8002d22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d26:	6023      	str	r3, [r4, #0]
 8002d28:	6823      	ldr	r3, [r4, #0]
 8002d2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d2e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002d30:	f7ff fd9c 	bl	800286c <HAL_GetTick>
 8002d34:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d36:	6823      	ldr	r3, [r4, #0]
 8002d38:	0399      	lsls	r1, r3, #14
 8002d3a:	d5b2      	bpl.n	8002ca2 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d3c:	f7ff fd96 	bl	800286c <HAL_GetTick>
 8002d40:	1b80      	subs	r0, r0, r6
 8002d42:	2864      	cmp	r0, #100	; 0x64
 8002d44:	d9f7      	bls.n	8002d36 <HAL_RCC_OscConfig+0xa2>
 8002d46:	e7e6      	b.n	8002d16 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d4c:	6823      	ldr	r3, [r4, #0]
 8002d4e:	d103      	bne.n	8002d58 <HAL_RCC_OscConfig+0xc4>
 8002d50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d54:	6023      	str	r3, [r4, #0]
 8002d56:	e7cf      	b.n	8002cf8 <HAL_RCC_OscConfig+0x64>
 8002d58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d5c:	6023      	str	r3, [r4, #0]
 8002d5e:	6823      	ldr	r3, [r4, #0]
 8002d60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d64:	e7cb      	b.n	8002cfe <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d66:	4c68      	ldr	r4, [pc, #416]	; (8002f08 <HAL_RCC_OscConfig+0x274>)
 8002d68:	6863      	ldr	r3, [r4, #4]
 8002d6a:	f013 0f0c 	tst.w	r3, #12
 8002d6e:	d007      	beq.n	8002d80 <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002d70:	6863      	ldr	r3, [r4, #4]
 8002d72:	f003 030c 	and.w	r3, r3, #12
 8002d76:	2b08      	cmp	r3, #8
 8002d78:	d110      	bne.n	8002d9c <HAL_RCC_OscConfig+0x108>
 8002d7a:	6863      	ldr	r3, [r4, #4]
 8002d7c:	03da      	lsls	r2, r3, #15
 8002d7e:	d40d      	bmi.n	8002d9c <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d80:	6823      	ldr	r3, [r4, #0]
 8002d82:	079b      	lsls	r3, r3, #30
 8002d84:	d502      	bpl.n	8002d8c <HAL_RCC_OscConfig+0xf8>
 8002d86:	692b      	ldr	r3, [r5, #16]
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d1af      	bne.n	8002cec <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d8c:	6823      	ldr	r3, [r4, #0]
 8002d8e:	696a      	ldr	r2, [r5, #20]
 8002d90:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002d94:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002d98:	6023      	str	r3, [r4, #0]
 8002d9a:	e785      	b.n	8002ca8 <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d9c:	692a      	ldr	r2, [r5, #16]
 8002d9e:	4b5b      	ldr	r3, [pc, #364]	; (8002f0c <HAL_RCC_OscConfig+0x278>)
 8002da0:	b16a      	cbz	r2, 8002dbe <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 8002da2:	2201      	movs	r2, #1
 8002da4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002da6:	f7ff fd61 	bl	800286c <HAL_GetTick>
 8002daa:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dac:	6823      	ldr	r3, [r4, #0]
 8002dae:	079f      	lsls	r7, r3, #30
 8002db0:	d4ec      	bmi.n	8002d8c <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002db2:	f7ff fd5b 	bl	800286c <HAL_GetTick>
 8002db6:	1b80      	subs	r0, r0, r6
 8002db8:	2802      	cmp	r0, #2
 8002dba:	d9f7      	bls.n	8002dac <HAL_RCC_OscConfig+0x118>
 8002dbc:	e7ab      	b.n	8002d16 <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 8002dbe:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002dc0:	f7ff fd54 	bl	800286c <HAL_GetTick>
 8002dc4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dc6:	6823      	ldr	r3, [r4, #0]
 8002dc8:	0798      	lsls	r0, r3, #30
 8002dca:	f57f af6d 	bpl.w	8002ca8 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dce:	f7ff fd4d 	bl	800286c <HAL_GetTick>
 8002dd2:	1b80      	subs	r0, r0, r6
 8002dd4:	2802      	cmp	r0, #2
 8002dd6:	d9f6      	bls.n	8002dc6 <HAL_RCC_OscConfig+0x132>
 8002dd8:	e79d      	b.n	8002d16 <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002dda:	69aa      	ldr	r2, [r5, #24]
 8002ddc:	4e4a      	ldr	r6, [pc, #296]	; (8002f08 <HAL_RCC_OscConfig+0x274>)
 8002dde:	4b4b      	ldr	r3, [pc, #300]	; (8002f0c <HAL_RCC_OscConfig+0x278>)
 8002de0:	b1e2      	cbz	r2, 8002e1c <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8002de2:	2201      	movs	r2, #1
 8002de4:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8002de8:	f7ff fd40 	bl	800286c <HAL_GetTick>
 8002dec:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dee:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8002df0:	079b      	lsls	r3, r3, #30
 8002df2:	d50d      	bpl.n	8002e10 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002df4:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8002df8:	4b45      	ldr	r3, [pc, #276]	; (8002f10 <HAL_RCC_OscConfig+0x27c>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	fbb3 f3f2 	udiv	r3, r3, r2
 8002e00:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8002e02:	bf00      	nop
  }
  while (Delay --);
 8002e04:	9b01      	ldr	r3, [sp, #4]
 8002e06:	1e5a      	subs	r2, r3, #1
 8002e08:	9201      	str	r2, [sp, #4]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d1f9      	bne.n	8002e02 <HAL_RCC_OscConfig+0x16e>
 8002e0e:	e74f      	b.n	8002cb0 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e10:	f7ff fd2c 	bl	800286c <HAL_GetTick>
 8002e14:	1b00      	subs	r0, r0, r4
 8002e16:	2802      	cmp	r0, #2
 8002e18:	d9e9      	bls.n	8002dee <HAL_RCC_OscConfig+0x15a>
 8002e1a:	e77c      	b.n	8002d16 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 8002e1c:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8002e20:	f7ff fd24 	bl	800286c <HAL_GetTick>
 8002e24:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e26:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8002e28:	079f      	lsls	r7, r3, #30
 8002e2a:	f57f af41 	bpl.w	8002cb0 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e2e:	f7ff fd1d 	bl	800286c <HAL_GetTick>
 8002e32:	1b00      	subs	r0, r0, r4
 8002e34:	2802      	cmp	r0, #2
 8002e36:	d9f6      	bls.n	8002e26 <HAL_RCC_OscConfig+0x192>
 8002e38:	e76d      	b.n	8002d16 <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e3a:	4c33      	ldr	r4, [pc, #204]	; (8002f08 <HAL_RCC_OscConfig+0x274>)
 8002e3c:	69e3      	ldr	r3, [r4, #28]
 8002e3e:	00d8      	lsls	r0, r3, #3
 8002e40:	d424      	bmi.n	8002e8c <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 8002e42:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e44:	69e3      	ldr	r3, [r4, #28]
 8002e46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e4a:	61e3      	str	r3, [r4, #28]
 8002e4c:	69e3      	ldr	r3, [r4, #28]
 8002e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e52:	9300      	str	r3, [sp, #0]
 8002e54:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e56:	4e2f      	ldr	r6, [pc, #188]	; (8002f14 <HAL_RCC_OscConfig+0x280>)
 8002e58:	6833      	ldr	r3, [r6, #0]
 8002e5a:	05d9      	lsls	r1, r3, #23
 8002e5c:	d518      	bpl.n	8002e90 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e5e:	68eb      	ldr	r3, [r5, #12]
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d126      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x21e>
 8002e64:	6a23      	ldr	r3, [r4, #32]
 8002e66:	f043 0301 	orr.w	r3, r3, #1
 8002e6a:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8002e6c:	f7ff fcfe 	bl	800286c <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e70:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002e74:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e76:	6a23      	ldr	r3, [r4, #32]
 8002e78:	079b      	lsls	r3, r3, #30
 8002e7a:	d53f      	bpl.n	8002efc <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 8002e7c:	2f00      	cmp	r7, #0
 8002e7e:	f43f af1b 	beq.w	8002cb8 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e82:	69e3      	ldr	r3, [r4, #28]
 8002e84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e88:	61e3      	str	r3, [r4, #28]
 8002e8a:	e715      	b.n	8002cb8 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8002e8c:	2700      	movs	r7, #0
 8002e8e:	e7e2      	b.n	8002e56 <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e90:	6833      	ldr	r3, [r6, #0]
 8002e92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e96:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002e98:	f7ff fce8 	bl	800286c <HAL_GetTick>
 8002e9c:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e9e:	6833      	ldr	r3, [r6, #0]
 8002ea0:	05da      	lsls	r2, r3, #23
 8002ea2:	d4dc      	bmi.n	8002e5e <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ea4:	f7ff fce2 	bl	800286c <HAL_GetTick>
 8002ea8:	eba0 0008 	sub.w	r0, r0, r8
 8002eac:	2864      	cmp	r0, #100	; 0x64
 8002eae:	d9f6      	bls.n	8002e9e <HAL_RCC_OscConfig+0x20a>
 8002eb0:	e731      	b.n	8002d16 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002eb2:	b9ab      	cbnz	r3, 8002ee0 <HAL_RCC_OscConfig+0x24c>
 8002eb4:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eb6:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002eba:	f023 0301 	bic.w	r3, r3, #1
 8002ebe:	6223      	str	r3, [r4, #32]
 8002ec0:	6a23      	ldr	r3, [r4, #32]
 8002ec2:	f023 0304 	bic.w	r3, r3, #4
 8002ec6:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8002ec8:	f7ff fcd0 	bl	800286c <HAL_GetTick>
 8002ecc:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ece:	6a23      	ldr	r3, [r4, #32]
 8002ed0:	0798      	lsls	r0, r3, #30
 8002ed2:	d5d3      	bpl.n	8002e7c <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ed4:	f7ff fcca 	bl	800286c <HAL_GetTick>
 8002ed8:	1b80      	subs	r0, r0, r6
 8002eda:	4540      	cmp	r0, r8
 8002edc:	d9f7      	bls.n	8002ece <HAL_RCC_OscConfig+0x23a>
 8002ede:	e71a      	b.n	8002d16 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ee0:	2b05      	cmp	r3, #5
 8002ee2:	6a23      	ldr	r3, [r4, #32]
 8002ee4:	d103      	bne.n	8002eee <HAL_RCC_OscConfig+0x25a>
 8002ee6:	f043 0304 	orr.w	r3, r3, #4
 8002eea:	6223      	str	r3, [r4, #32]
 8002eec:	e7ba      	b.n	8002e64 <HAL_RCC_OscConfig+0x1d0>
 8002eee:	f023 0301 	bic.w	r3, r3, #1
 8002ef2:	6223      	str	r3, [r4, #32]
 8002ef4:	6a23      	ldr	r3, [r4, #32]
 8002ef6:	f023 0304 	bic.w	r3, r3, #4
 8002efa:	e7b6      	b.n	8002e6a <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002efc:	f7ff fcb6 	bl	800286c <HAL_GetTick>
 8002f00:	1b80      	subs	r0, r0, r6
 8002f02:	4540      	cmp	r0, r8
 8002f04:	d9b7      	bls.n	8002e76 <HAL_RCC_OscConfig+0x1e2>
 8002f06:	e706      	b.n	8002d16 <HAL_RCC_OscConfig+0x82>
 8002f08:	40021000 	.word	0x40021000
 8002f0c:	42420000 	.word	0x42420000
 8002f10:	20000000 	.word	0x20000000
 8002f14:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f18:	4c2a      	ldr	r4, [pc, #168]	; (8002fc4 <HAL_RCC_OscConfig+0x330>)
 8002f1a:	6863      	ldr	r3, [r4, #4]
 8002f1c:	f003 030c 	and.w	r3, r3, #12
 8002f20:	2b08      	cmp	r3, #8
 8002f22:	d03e      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f24:	2200      	movs	r2, #0
 8002f26:	4b28      	ldr	r3, [pc, #160]	; (8002fc8 <HAL_RCC_OscConfig+0x334>)
 8002f28:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8002f2a:	661a      	str	r2, [r3, #96]	; 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f2c:	d12c      	bne.n	8002f88 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8002f2e:	f7ff fc9d 	bl	800286c <HAL_GetTick>
 8002f32:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f34:	6823      	ldr	r3, [r4, #0]
 8002f36:	0199      	lsls	r1, r3, #6
 8002f38:	d420      	bmi.n	8002f7c <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002f3a:	6a2b      	ldr	r3, [r5, #32]
 8002f3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f40:	d105      	bne.n	8002f4e <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002f42:	6862      	ldr	r2, [r4, #4]
 8002f44:	68a9      	ldr	r1, [r5, #8]
 8002f46:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002f4a:	430a      	orrs	r2, r1
 8002f4c:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f4e:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8002f50:	6862      	ldr	r2, [r4, #4]
 8002f52:	430b      	orrs	r3, r1
 8002f54:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8002f58:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 8002f5a:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f5c:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8002f5e:	4b1a      	ldr	r3, [pc, #104]	; (8002fc8 <HAL_RCC_OscConfig+0x334>)
 8002f60:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8002f62:	f7ff fc83 	bl	800286c <HAL_GetTick>
 8002f66:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f68:	6823      	ldr	r3, [r4, #0]
 8002f6a:	019a      	lsls	r2, r3, #6
 8002f6c:	f53f aea8 	bmi.w	8002cc0 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f70:	f7ff fc7c 	bl	800286c <HAL_GetTick>
 8002f74:	1b40      	subs	r0, r0, r5
 8002f76:	2802      	cmp	r0, #2
 8002f78:	d9f6      	bls.n	8002f68 <HAL_RCC_OscConfig+0x2d4>
 8002f7a:	e6cc      	b.n	8002d16 <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f7c:	f7ff fc76 	bl	800286c <HAL_GetTick>
 8002f80:	1b80      	subs	r0, r0, r6
 8002f82:	2802      	cmp	r0, #2
 8002f84:	d9d6      	bls.n	8002f34 <HAL_RCC_OscConfig+0x2a0>
 8002f86:	e6c6      	b.n	8002d16 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8002f88:	f7ff fc70 	bl	800286c <HAL_GetTick>
 8002f8c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f8e:	6823      	ldr	r3, [r4, #0]
 8002f90:	019b      	lsls	r3, r3, #6
 8002f92:	f57f ae95 	bpl.w	8002cc0 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f96:	f7ff fc69 	bl	800286c <HAL_GetTick>
 8002f9a:	1b40      	subs	r0, r0, r5
 8002f9c:	2802      	cmp	r0, #2
 8002f9e:	d9f6      	bls.n	8002f8e <HAL_RCC_OscConfig+0x2fa>
 8002fa0:	e6b9      	b.n	8002d16 <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fa2:	2801      	cmp	r0, #1
 8002fa4:	f43f aeb8 	beq.w	8002d18 <HAL_RCC_OscConfig+0x84>
        pll_config = RCC->CFGR;
 8002fa8:	6863      	ldr	r3, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002faa:	6a2a      	ldr	r2, [r5, #32]
 8002fac:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8002fb0:	4291      	cmp	r1, r2
 8002fb2:	f47f ae9b 	bne.w	8002cec <HAL_RCC_OscConfig+0x58>
 8002fb6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002fb8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	f43f ae7f 	beq.w	8002cc0 <HAL_RCC_OscConfig+0x2c>
 8002fc2:	e693      	b.n	8002cec <HAL_RCC_OscConfig+0x58>
 8002fc4:	40021000 	.word	0x40021000
 8002fc8:	42420000 	.word	0x42420000

08002fcc <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8002fcc:	4a0d      	ldr	r2, [pc, #52]	; (8003004 <HAL_RCC_GetSysClockFreq+0x38>)
 8002fce:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8002fd0:	f003 010c 	and.w	r1, r3, #12
 8002fd4:	2908      	cmp	r1, #8
 8002fd6:	d112      	bne.n	8002ffe <HAL_RCC_GetSysClockFreq+0x32>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002fd8:	480b      	ldr	r0, [pc, #44]	; (8003008 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002fda:	f3c3 4183 	ubfx	r1, r3, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002fde:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002fe0:	5c40      	ldrb	r0, [r0, r1]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002fe2:	d509      	bpl.n	8002ff8 <HAL_RCC_GetSysClockFreq+0x2c>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002fe4:	6853      	ldr	r3, [r2, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002fe6:	4a09      	ldr	r2, [pc, #36]	; (800300c <HAL_RCC_GetSysClockFreq+0x40>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002fe8:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002fec:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002fee:	4a08      	ldr	r2, [pc, #32]	; (8003010 <HAL_RCC_GetSysClockFreq+0x44>)
 8002ff0:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002ff2:	fbb0 f0f3 	udiv	r0, r0, r3
 8002ff6:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002ff8:	4b06      	ldr	r3, [pc, #24]	; (8003014 <HAL_RCC_GetSysClockFreq+0x48>)
 8002ffa:	4358      	muls	r0, r3
 8002ffc:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8002ffe:	4803      	ldr	r0, [pc, #12]	; (800300c <HAL_RCC_GetSysClockFreq+0x40>)
}
 8003000:	4770      	bx	lr
 8003002:	bf00      	nop
 8003004:	40021000 	.word	0x40021000
 8003008:	08008bf8 	.word	0x08008bf8
 800300c:	007a1200 	.word	0x007a1200
 8003010:	08008c08 	.word	0x08008c08
 8003014:	003d0900 	.word	0x003d0900

08003018 <HAL_RCC_ClockConfig>:
{
 8003018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800301c:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800301e:	4604      	mov	r4, r0
 8003020:	b910      	cbnz	r0, 8003028 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8003022:	2001      	movs	r0, #1
}
 8003024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003028:	4a44      	ldr	r2, [pc, #272]	; (800313c <HAL_RCC_ClockConfig+0x124>)
 800302a:	6813      	ldr	r3, [r2, #0]
 800302c:	f003 0307 	and.w	r3, r3, #7
 8003030:	428b      	cmp	r3, r1
 8003032:	d328      	bcc.n	8003086 <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003034:	6821      	ldr	r1, [r4, #0]
 8003036:	078e      	lsls	r6, r1, #30
 8003038:	d430      	bmi.n	800309c <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800303a:	07ca      	lsls	r2, r1, #31
 800303c:	d443      	bmi.n	80030c6 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800303e:	4a3f      	ldr	r2, [pc, #252]	; (800313c <HAL_RCC_ClockConfig+0x124>)
 8003040:	6813      	ldr	r3, [r2, #0]
 8003042:	f003 0307 	and.w	r3, r3, #7
 8003046:	42ab      	cmp	r3, r5
 8003048:	d865      	bhi.n	8003116 <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800304a:	6822      	ldr	r2, [r4, #0]
 800304c:	4d3c      	ldr	r5, [pc, #240]	; (8003140 <HAL_RCC_ClockConfig+0x128>)
 800304e:	f012 0f04 	tst.w	r2, #4
 8003052:	d16c      	bne.n	800312e <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003054:	0713      	lsls	r3, r2, #28
 8003056:	d506      	bpl.n	8003066 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003058:	686b      	ldr	r3, [r5, #4]
 800305a:	6922      	ldr	r2, [r4, #16]
 800305c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8003060:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003064:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003066:	f7ff ffb1 	bl	8002fcc <HAL_RCC_GetSysClockFreq>
 800306a:	686b      	ldr	r3, [r5, #4]
 800306c:	4a35      	ldr	r2, [pc, #212]	; (8003144 <HAL_RCC_ClockConfig+0x12c>)
 800306e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003072:	5cd3      	ldrb	r3, [r2, r3]
 8003074:	40d8      	lsrs	r0, r3
 8003076:	4b34      	ldr	r3, [pc, #208]	; (8003148 <HAL_RCC_ClockConfig+0x130>)
 8003078:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 800307a:	4b34      	ldr	r3, [pc, #208]	; (800314c <HAL_RCC_ClockConfig+0x134>)
 800307c:	6818      	ldr	r0, [r3, #0]
 800307e:	f7ff fbb3 	bl	80027e8 <HAL_InitTick>
  return HAL_OK;
 8003082:	2000      	movs	r0, #0
 8003084:	e7ce      	b.n	8003024 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003086:	6813      	ldr	r3, [r2, #0]
 8003088:	f023 0307 	bic.w	r3, r3, #7
 800308c:	430b      	orrs	r3, r1
 800308e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003090:	6813      	ldr	r3, [r2, #0]
 8003092:	f003 0307 	and.w	r3, r3, #7
 8003096:	428b      	cmp	r3, r1
 8003098:	d1c3      	bne.n	8003022 <HAL_RCC_ClockConfig+0xa>
 800309a:	e7cb      	b.n	8003034 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800309c:	4b28      	ldr	r3, [pc, #160]	; (8003140 <HAL_RCC_ClockConfig+0x128>)
 800309e:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030a2:	bf1e      	ittt	ne
 80030a4:	685a      	ldrne	r2, [r3, #4]
 80030a6:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 80030aa:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030ac:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030ae:	bf42      	ittt	mi
 80030b0:	685a      	ldrmi	r2, [r3, #4]
 80030b2:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 80030b6:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030b8:	685a      	ldr	r2, [r3, #4]
 80030ba:	68a0      	ldr	r0, [r4, #8]
 80030bc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80030c0:	4302      	orrs	r2, r0
 80030c2:	605a      	str	r2, [r3, #4]
 80030c4:	e7b9      	b.n	800303a <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030c6:	6862      	ldr	r2, [r4, #4]
 80030c8:	4e1d      	ldr	r6, [pc, #116]	; (8003140 <HAL_RCC_ClockConfig+0x128>)
 80030ca:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030cc:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030ce:	d11a      	bne.n	8003106 <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030d0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030d4:	d0a5      	beq.n	8003022 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030d6:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030d8:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030dc:	f023 0303 	bic.w	r3, r3, #3
 80030e0:	4313      	orrs	r3, r2
 80030e2:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80030e4:	f7ff fbc2 	bl	800286c <HAL_GetTick>
 80030e8:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030ea:	6873      	ldr	r3, [r6, #4]
 80030ec:	6862      	ldr	r2, [r4, #4]
 80030ee:	f003 030c 	and.w	r3, r3, #12
 80030f2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80030f6:	d0a2      	beq.n	800303e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030f8:	f7ff fbb8 	bl	800286c <HAL_GetTick>
 80030fc:	1bc0      	subs	r0, r0, r7
 80030fe:	4540      	cmp	r0, r8
 8003100:	d9f3      	bls.n	80030ea <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 8003102:	2003      	movs	r0, #3
 8003104:	e78e      	b.n	8003024 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003106:	2a02      	cmp	r2, #2
 8003108:	d102      	bne.n	8003110 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800310a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800310e:	e7e1      	b.n	80030d4 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003110:	f013 0f02 	tst.w	r3, #2
 8003114:	e7de      	b.n	80030d4 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003116:	6813      	ldr	r3, [r2, #0]
 8003118:	f023 0307 	bic.w	r3, r3, #7
 800311c:	432b      	orrs	r3, r5
 800311e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003120:	6813      	ldr	r3, [r2, #0]
 8003122:	f003 0307 	and.w	r3, r3, #7
 8003126:	42ab      	cmp	r3, r5
 8003128:	f47f af7b 	bne.w	8003022 <HAL_RCC_ClockConfig+0xa>
 800312c:	e78d      	b.n	800304a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800312e:	686b      	ldr	r3, [r5, #4]
 8003130:	68e1      	ldr	r1, [r4, #12]
 8003132:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003136:	430b      	orrs	r3, r1
 8003138:	606b      	str	r3, [r5, #4]
 800313a:	e78b      	b.n	8003054 <HAL_RCC_ClockConfig+0x3c>
 800313c:	40022000 	.word	0x40022000
 8003140:	40021000 	.word	0x40021000
 8003144:	08008be0 	.word	0x08008be0
 8003148:	20000000 	.word	0x20000000
 800314c:	20000008 	.word	0x20000008

08003150 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003150:	4b04      	ldr	r3, [pc, #16]	; (8003164 <HAL_RCC_GetPCLK1Freq+0x14>)
 8003152:	4a05      	ldr	r2, [pc, #20]	; (8003168 <HAL_RCC_GetPCLK1Freq+0x18>)
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800315a:	5cd3      	ldrb	r3, [r2, r3]
 800315c:	4a03      	ldr	r2, [pc, #12]	; (800316c <HAL_RCC_GetPCLK1Freq+0x1c>)
 800315e:	6810      	ldr	r0, [r2, #0]
}
 8003160:	40d8      	lsrs	r0, r3
 8003162:	4770      	bx	lr
 8003164:	40021000 	.word	0x40021000
 8003168:	08008bf0 	.word	0x08008bf0
 800316c:	20000000 	.word	0x20000000

08003170 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003170:	4b04      	ldr	r3, [pc, #16]	; (8003184 <HAL_RCC_GetPCLK2Freq+0x14>)
 8003172:	4a05      	ldr	r2, [pc, #20]	; (8003188 <HAL_RCC_GetPCLK2Freq+0x18>)
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800317a:	5cd3      	ldrb	r3, [r2, r3]
 800317c:	4a03      	ldr	r2, [pc, #12]	; (800318c <HAL_RCC_GetPCLK2Freq+0x1c>)
 800317e:	6810      	ldr	r0, [r2, #0]
}
 8003180:	40d8      	lsrs	r0, r3
 8003182:	4770      	bx	lr
 8003184:	40021000 	.word	0x40021000
 8003188:	08008bf0 	.word	0x08008bf0
 800318c:	20000000 	.word	0x20000000

08003190 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8003190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003194:	b089      	sub	sp, #36	; 0x24
 8003196:	4604      	mov	r4, r0
 8003198:	460d      	mov	r5, r1
 800319a:	4616      	mov	r6, r2
 800319c:	469a      	mov	sl, r3
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800319e:	f7ff fb65 	bl	800286c <HAL_GetTick>
 80031a2:	4680      	mov	r8, r0
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
  uint8_t *tempbuff = pData;

  if(NULL == pData)
 80031a4:	b92d      	cbnz	r5, 80031b2 <HAL_SD_ReadBlocks+0x22>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80031a6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80031a8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    return HAL_OK;
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
    return HAL_ERROR;
 80031ac:	2701      	movs	r7, #1
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80031ae:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 80031b0:	e010      	b.n	80031d4 <HAL_SD_ReadBlocks+0x44>
  if(hsd->State == HAL_SD_STATE_READY)
 80031b2:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	b2df      	uxtb	r7, r3
 80031ba:	f040 80e6 	bne.w	800338a <HAL_SD_ReadBlocks+0x1fa>
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80031be:	2100      	movs	r1, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80031c0:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80031c2:	eb06 030a 	add.w	r3, r6, sl
 80031c6:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80031c8:	63a1      	str	r1, [r4, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80031ca:	d907      	bls.n	80031dc <HAL_SD_ReadBlocks+0x4c>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80031cc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80031ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80031d2:	63a3      	str	r3, [r4, #56]	; 0x38
  }
}
 80031d4:	4638      	mov	r0, r7
 80031d6:	b009      	add	sp, #36	; 0x24
 80031d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hsd->State = HAL_SD_STATE_BUSY;
 80031dc:	2303      	movs	r3, #3
 80031de:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80031e2:	6c63      	ldr	r3, [r4, #68]	; 0x44
    config.DPSM          = SDIO_DPSM_ENABLE;
 80031e4:	2200      	movs	r2, #0
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80031e6:	2b01      	cmp	r3, #1
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80031e8:	f04f 33ff 	mov.w	r3, #4294967295
 80031ec:	9302      	str	r3, [sp, #8]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80031ee:	ea4f 234a 	mov.w	r3, sl, lsl #9
    config.DPSM          = SDIO_DPSM_ENABLE;
 80031f2:	f04f 0b01 	mov.w	fp, #1
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80031f6:	9303      	str	r3, [sp, #12]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80031f8:	f04f 0902 	mov.w	r9, #2
 80031fc:	f04f 0390 	mov.w	r3, #144	; 0x90
    hsd->Instance->DCTRL = 0U;
 8003200:	6820      	ldr	r0, [r4, #0]
      add *= 512U;
 8003202:	bf18      	it	ne
 8003204:	0276      	lslne	r6, r6, #9
    hsd->Instance->DCTRL = 0U;
 8003206:	62c1      	str	r1, [r0, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8003208:	a902      	add	r1, sp, #8
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800320a:	e9cd 3904 	strd	r3, r9, [sp, #16]
    config.DPSM          = SDIO_DPSM_ENABLE;
 800320e:	e9cd 2b06 	strd	r2, fp, [sp, #24]
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8003212:	f000 fed7 	bl	8003fc4 <SDIO_ConfigData>
    if(NumberOfBlocks > 1U)
 8003216:	45da      	cmp	sl, fp
 8003218:	d912      	bls.n	8003240 <HAL_SD_ReadBlocks+0xb0>
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800321a:	4631      	mov	r1, r6
 800321c:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800321e:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8003222:	f000 ffc9 	bl	80041b8 <SDMMC_CmdReadMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003226:	b190      	cbz	r0, 800324e <HAL_SD_ReadBlocks+0xbe>
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003228:	6823      	ldr	r3, [r4, #0]
 800322a:	4a5a      	ldr	r2, [pc, #360]	; (8003394 <HAL_SD_ReadBlocks+0x204>)
 800322c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800322e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003230:	4318      	orrs	r0, r3
 8003232:	63a0      	str	r0, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8003234:	2301      	movs	r3, #1
 8003236:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800323a:	2300      	movs	r3, #0
 800323c:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_ERROR;
 800323e:	e7c9      	b.n	80031d4 <HAL_SD_ReadBlocks+0x44>
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8003240:	4631      	mov	r1, r6
 8003242:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8003244:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8003248:	f000 ff9e 	bl	8004188 <SDMMC_CmdReadSingleBlock>
 800324c:	e7eb      	b.n	8003226 <HAL_SD_ReadBlocks+0x96>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800324e:	f240 3b2a 	movw	fp, #810	; 0x32a
    dataremaining = config.DataLength;
 8003252:	9e03      	ldr	r6, [sp, #12]
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8003254:	6820      	ldr	r0, [r4, #0]
 8003256:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003258:	ea13 0f0b 	tst.w	r3, fp
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 800325c:	6b43      	ldr	r3, [r0, #52]	; 0x34
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800325e:	d017      	beq.n	8003290 <HAL_SD_ReadBlocks+0x100>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003260:	05db      	lsls	r3, r3, #23
 8003262:	d509      	bpl.n	8003278 <HAL_SD_ReadBlocks+0xe8>
 8003264:	f1ba 0f01 	cmp.w	sl, #1
 8003268:	d906      	bls.n	8003278 <HAL_SD_ReadBlocks+0xe8>
      if(hsd->SdCard.CardType != CARD_SECURED)
 800326a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800326c:	2b03      	cmp	r3, #3
 800326e:	d003      	beq.n	8003278 <HAL_SD_ReadBlocks+0xe8>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003270:	f000 ffea 	bl	8004248 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8003274:	2800      	cmp	r0, #0
 8003276:	d1d7      	bne.n	8003228 <HAL_SD_ReadBlocks+0x98>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8003278:	6823      	ldr	r3, [r4, #0]
 800327a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800327c:	f011 0108 	ands.w	r1, r1, #8
 8003280:	d038      	beq.n	80032f4 <HAL_SD_ReadBlocks+0x164>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003282:	4a44      	ldr	r2, [pc, #272]	; (8003394 <HAL_SD_ReadBlocks+0x204>)
 8003284:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003286:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003288:	f043 0308 	orr.w	r3, r3, #8
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800328c:	63a3      	str	r3, [r4, #56]	; 0x38
 800328e:	e7d1      	b.n	8003234 <HAL_SD_ReadBlocks+0xa4>
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8003290:	041a      	lsls	r2, r3, #16
 8003292:	d51a      	bpl.n	80032ca <HAL_SD_ReadBlocks+0x13a>
 8003294:	b1ce      	cbz	r6, 80032ca <HAL_SD_ReadBlocks+0x13a>
 8003296:	f105 0904 	add.w	r9, r5, #4
 800329a:	f105 0224 	add.w	r2, r5, #36	; 0x24
          data = SDIO_ReadFIFO(hsd->Instance);
 800329e:	6820      	ldr	r0, [r4, #0]
 80032a0:	9201      	str	r2, [sp, #4]
 80032a2:	f000 fe69 	bl	8003f78 <SDIO_ReadFIFO>
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80032a6:	0a01      	lsrs	r1, r0, #8
          *tempbuff = (uint8_t)(data & 0xFFU);
 80032a8:	f809 0c04 	strb.w	r0, [r9, #-4]
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80032ac:	f809 1c03 	strb.w	r1, [r9, #-3]
        for(count = 0U; count < 8U; count++)
 80032b0:	9a01      	ldr	r2, [sp, #4]
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80032b2:	0c01      	lsrs	r1, r0, #16
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80032b4:	0e00      	lsrs	r0, r0, #24
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80032b6:	f809 1c02 	strb.w	r1, [r9, #-2]
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80032ba:	f809 0c01 	strb.w	r0, [r9, #-1]
        for(count = 0U; count < 8U; count++)
 80032be:	f109 0904 	add.w	r9, r9, #4
 80032c2:	454a      	cmp	r2, r9
 80032c4:	d1eb      	bne.n	800329e <HAL_SD_ReadBlocks+0x10e>
          tempbuff++;
 80032c6:	3520      	adds	r5, #32
          dataremaining--;
 80032c8:	3e20      	subs	r6, #32
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80032ca:	f7ff facf 	bl	800286c <HAL_GetTick>
 80032ce:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80032d0:	eba0 0008 	sub.w	r0, r0, r8
 80032d4:	4298      	cmp	r0, r3
 80032d6:	d3bd      	bcc.n	8003254 <HAL_SD_ReadBlocks+0xc4>
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80032d8:	6823      	ldr	r3, [r4, #0]
 80032da:	4a2e      	ldr	r2, [pc, #184]	; (8003394 <HAL_SD_ReadBlocks+0x204>)
        return HAL_TIMEOUT;
 80032dc:	2703      	movs	r7, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80032de:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80032e0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80032e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80032e6:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80032e8:	2301      	movs	r3, #1
 80032ea:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80032ee:	2300      	movs	r3, #0
 80032f0:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_TIMEOUT;
 80032f2:	e76f      	b.n	80031d4 <HAL_SD_ReadBlocks+0x44>
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80032f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032f6:	f012 0202 	ands.w	r2, r2, #2
 80032fa:	d00a      	beq.n	8003312 <HAL_SD_ReadBlocks+0x182>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80032fc:	4a25      	ldr	r2, [pc, #148]	; (8003394 <HAL_SD_ReadBlocks+0x204>)
 80032fe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003300:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003302:	f043 0302 	orr.w	r3, r3, #2
 8003306:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003308:	2301      	movs	r3, #1
 800330a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800330e:	6321      	str	r1, [r4, #48]	; 0x30
      return HAL_ERROR;
 8003310:	e760      	b.n	80031d4 <HAL_SD_ReadBlocks+0x44>
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8003312:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003314:	0689      	lsls	r1, r1, #26
 8003316:	d529      	bpl.n	800336c <HAL_SD_ReadBlocks+0x1dc>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003318:	491e      	ldr	r1, [pc, #120]	; (8003394 <HAL_SD_ReadBlocks+0x204>)
 800331a:	6399      	str	r1, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800331c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800331e:	f043 0320 	orr.w	r3, r3, #32
 8003322:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003324:	2301      	movs	r3, #1
 8003326:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800332a:	6322      	str	r2, [r4, #48]	; 0x30
      return HAL_ERROR;
 800332c:	e752      	b.n	80031d4 <HAL_SD_ReadBlocks+0x44>
      data = SDIO_ReadFIFO(hsd->Instance);
 800332e:	f000 fe23 	bl	8003f78 <SDIO_ReadFIFO>
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8003332:	0a03      	lsrs	r3, r0, #8
 8003334:	f805 3c03 	strb.w	r3, [r5, #-3]
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8003338:	0c03      	lsrs	r3, r0, #16
 800333a:	f805 3c02 	strb.w	r3, [r5, #-2]
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800333e:	0e03      	lsrs	r3, r0, #24
 8003340:	f805 3c01 	strb.w	r3, [r5, #-1]
      *tempbuff = (uint8_t)(data & 0xFFU);
 8003344:	f805 0c04 	strb.w	r0, [r5, #-4]
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003348:	f7ff fa90 	bl	800286c <HAL_GetTick>
 800334c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800334e:	eba0 0008 	sub.w	r0, r0, r8
 8003352:	4298      	cmp	r0, r3
      dataremaining--;
 8003354:	f1a6 0604 	sub.w	r6, r6, #4
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003358:	f105 0504 	add.w	r5, r5, #4
 800335c:	d307      	bcc.n	800336e <HAL_SD_ReadBlocks+0x1de>
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800335e:	6823      	ldr	r3, [r4, #0]
 8003360:	4a0c      	ldr	r2, [pc, #48]	; (8003394 <HAL_SD_ReadBlocks+0x204>)
 8003362:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8003364:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003366:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800336a:	e78f      	b.n	800328c <HAL_SD_ReadBlocks+0xfc>
 800336c:	3504      	adds	r5, #4
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 800336e:	6820      	ldr	r0, [r4, #0]
 8003370:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003372:	029b      	lsls	r3, r3, #10
 8003374:	d501      	bpl.n	800337a <HAL_SD_ReadBlocks+0x1ea>
 8003376:	2e00      	cmp	r6, #0
 8003378:	d1d9      	bne.n	800332e <HAL_SD_ReadBlocks+0x19e>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800337a:	f240 533a 	movw	r3, #1338	; 0x53a
 800337e:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003380:	2301      	movs	r3, #1
    return HAL_OK;
 8003382:	2700      	movs	r7, #0
    hsd->State = HAL_SD_STATE_READY;
 8003384:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_OK;
 8003388:	e724      	b.n	80031d4 <HAL_SD_ReadBlocks+0x44>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800338a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800338c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003390:	e70c      	b.n	80031ac <HAL_SD_ReadBlocks+0x1c>
 8003392:	bf00      	nop
 8003394:	004005ff 	.word	0x004005ff

08003398 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8003398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800339c:	b089      	sub	sp, #36	; 0x24
 800339e:	4604      	mov	r4, r0
 80033a0:	460d      	mov	r5, r1
 80033a2:	4692      	mov	sl, r2
 80033a4:	461f      	mov	r7, r3
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80033a6:	f7ff fa61 	bl	800286c <HAL_GetTick>
 80033aa:	4681      	mov	r9, r0
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
  uint8_t *tempbuff = pData;

  if(NULL == pData)
 80033ac:	b935      	cbnz	r5, 80033bc <HAL_SD_WriteBlocks+0x24>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80033ae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80033b0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    return HAL_OK;
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
    return HAL_ERROR;
 80033b4:	f04f 0801 	mov.w	r8, #1
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80033b8:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 80033ba:	e011      	b.n	80033e0 <HAL_SD_WriteBlocks+0x48>
  if(hsd->State == HAL_SD_STATE_READY)
 80033bc:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	fa5f f883 	uxtb.w	r8, r3
 80033c6:	f040 80b1 	bne.w	800352c <HAL_SD_WriteBlocks+0x194>
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80033ca:	2100      	movs	r1, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80033cc:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80033ce:	eb0a 0307 	add.w	r3, sl, r7
 80033d2:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80033d4:	63a1      	str	r1, [r4, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80033d6:	d907      	bls.n	80033e8 <HAL_SD_WriteBlocks+0x50>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80033d8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80033da:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80033de:	63a3      	str	r3, [r4, #56]	; 0x38
  }
}
 80033e0:	4640      	mov	r0, r8
 80033e2:	b009      	add	sp, #36	; 0x24
 80033e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hsd->State = HAL_SD_STATE_BUSY;
 80033e8:	2303      	movs	r3, #3
 80033ea:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80033ee:	6c63      	ldr	r3, [r4, #68]	; 0x44
    hsd->Instance->DCTRL = 0U;
 80033f0:	6820      	ldr	r0, [r4, #0]
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80033f2:	2b01      	cmp	r3, #1
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80033f4:	f04f 33ff 	mov.w	r3, #4294967295
 80033f8:	9302      	str	r3, [sp, #8]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80033fa:	ea4f 2347 	mov.w	r3, r7, lsl #9
    hsd->Instance->DCTRL = 0U;
 80033fe:	62c1      	str	r1, [r0, #44]	; 0x2c
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8003400:	9303      	str	r3, [sp, #12]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8003402:	f04f 0190 	mov.w	r1, #144	; 0x90
 8003406:	f04f 0300 	mov.w	r3, #0
 800340a:	e9cd 1304 	strd	r1, r3, [sp, #16]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800340e:	9306      	str	r3, [sp, #24]
    config.DPSM          = SDIO_DPSM_ENABLE;
 8003410:	f04f 0301 	mov.w	r3, #1
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8003414:	a902      	add	r1, sp, #8
      add *= 512U;
 8003416:	bf18      	it	ne
 8003418:	ea4f 2a4a 	movne.w	sl, sl, lsl #9
    config.DPSM          = SDIO_DPSM_ENABLE;
 800341c:	9307      	str	r3, [sp, #28]
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800341e:	f000 fdd1 	bl	8003fc4 <SDIO_ConfigData>
    if(NumberOfBlocks > 1U)
 8003422:	2f01      	cmp	r7, #1
 8003424:	d912      	bls.n	800344c <HAL_SD_WriteBlocks+0xb4>
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8003426:	2320      	movs	r3, #32
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8003428:	4651      	mov	r1, sl
 800342a:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800342c:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800342e:	f000 fef3 	bl	8004218 <SDMMC_CmdWriteMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003432:	b190      	cbz	r0, 800345a <HAL_SD_WriteBlocks+0xc2>
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003434:	6823      	ldr	r3, [r4, #0]
 8003436:	4a3f      	ldr	r2, [pc, #252]	; (8003534 <HAL_SD_WriteBlocks+0x19c>)
 8003438:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800343a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800343c:	4318      	orrs	r0, r3
 800343e:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003440:	2301      	movs	r3, #1
 8003442:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003446:	2300      	movs	r3, #0
 8003448:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 800344a:	e7c9      	b.n	80033e0 <HAL_SD_WriteBlocks+0x48>
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800344c:	2310      	movs	r3, #16
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800344e:	4651      	mov	r1, sl
 8003450:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8003452:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8003454:	f000 fec8 	bl	80041e8 <SDMMC_CmdWriteSingleBlock>
 8003458:	e7eb      	b.n	8003432 <HAL_SD_WriteBlocks+0x9a>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800345a:	f240 3a1a 	movw	sl, #794	; 0x31a
    dataremaining = config.DataLength;
 800345e:	9e03      	ldr	r6, [sp, #12]
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8003460:	6820      	ldr	r0, [r4, #0]
 8003462:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003464:	ea13 0f0a 	tst.w	r3, sl
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8003468:	6b43      	ldr	r3, [r0, #52]	; 0x34
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800346a:	d016      	beq.n	800349a <HAL_SD_WriteBlocks+0x102>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800346c:	05db      	lsls	r3, r3, #23
 800346e:	d508      	bpl.n	8003482 <HAL_SD_WriteBlocks+0xea>
 8003470:	2f01      	cmp	r7, #1
 8003472:	d906      	bls.n	8003482 <HAL_SD_WriteBlocks+0xea>
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003474:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003476:	2b03      	cmp	r3, #3
 8003478:	d003      	beq.n	8003482 <HAL_SD_WriteBlocks+0xea>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800347a:	f000 fee5 	bl	8004248 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 800347e:	2800      	cmp	r0, #0
 8003480:	d1d8      	bne.n	8003434 <HAL_SD_WriteBlocks+0x9c>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8003482:	6823      	ldr	r3, [r4, #0]
 8003484:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003486:	f010 0008 	ands.w	r0, r0, #8
 800348a:	d029      	beq.n	80034e0 <HAL_SD_WriteBlocks+0x148>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800348c:	4a29      	ldr	r2, [pc, #164]	; (8003534 <HAL_SD_WriteBlocks+0x19c>)
 800348e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003490:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003492:	f043 0308 	orr.w	r3, r3, #8
 8003496:	63a3      	str	r3, [r4, #56]	; 0x38
 8003498:	e7d2      	b.n	8003440 <HAL_SD_WriteBlocks+0xa8>
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800349a:	045a      	lsls	r2, r3, #17
 800349c:	d50c      	bpl.n	80034b8 <HAL_SD_WriteBlocks+0x120>
 800349e:	b15e      	cbz	r6, 80034b8 <HAL_SD_WriteBlocks+0x120>
 80034a0:	f105 0b20 	add.w	fp, r5, #32
          data |= ((uint32_t)(*tempbuff) << 24U);
 80034a4:	f855 2b04 	ldr.w	r2, [r5], #4
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80034a8:	6820      	ldr	r0, [r4, #0]
 80034aa:	a901      	add	r1, sp, #4
          data |= ((uint32_t)(*tempbuff) << 24U);
 80034ac:	9201      	str	r2, [sp, #4]
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80034ae:	f000 fd66 	bl	8003f7e <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80034b2:	45ab      	cmp	fp, r5
 80034b4:	d1f6      	bne.n	80034a4 <HAL_SD_WriteBlocks+0x10c>
          dataremaining--;
 80034b6:	3e20      	subs	r6, #32
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80034b8:	f7ff f9d8 	bl	800286c <HAL_GetTick>
 80034bc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80034be:	eba0 0009 	sub.w	r0, r0, r9
 80034c2:	4298      	cmp	r0, r3
 80034c4:	d3cc      	bcc.n	8003460 <HAL_SD_WriteBlocks+0xc8>
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80034c6:	6823      	ldr	r3, [r4, #0]
 80034c8:	4a1a      	ldr	r2, [pc, #104]	; (8003534 <HAL_SD_WriteBlocks+0x19c>)
        return HAL_TIMEOUT;
 80034ca:	f04f 0803 	mov.w	r8, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80034ce:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80034d0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80034d2:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80034d4:	2301      	movs	r3, #1
 80034d6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80034da:	2300      	movs	r3, #0
 80034dc:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_TIMEOUT;
 80034de:	e77f      	b.n	80033e0 <HAL_SD_WriteBlocks+0x48>
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80034e0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80034e2:	f011 0102 	ands.w	r1, r1, #2
 80034e6:	d00a      	beq.n	80034fe <HAL_SD_WriteBlocks+0x166>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80034e8:	4a12      	ldr	r2, [pc, #72]	; (8003534 <HAL_SD_WriteBlocks+0x19c>)
 80034ea:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80034ec:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80034ee:	f043 0302 	orr.w	r3, r3, #2
 80034f2:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80034f4:	2301      	movs	r3, #1
 80034f6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80034fa:	6320      	str	r0, [r4, #48]	; 0x30
      return HAL_ERROR;
 80034fc:	e770      	b.n	80033e0 <HAL_SD_WriteBlocks+0x48>
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 80034fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003500:	f012 0210 	ands.w	r2, r2, #16
 8003504:	d00a      	beq.n	800351c <HAL_SD_WriteBlocks+0x184>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003506:	4a0b      	ldr	r2, [pc, #44]	; (8003534 <HAL_SD_WriteBlocks+0x19c>)
 8003508:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800350a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800350c:	f043 0310 	orr.w	r3, r3, #16
 8003510:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003512:	2301      	movs	r3, #1
 8003514:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003518:	6321      	str	r1, [r4, #48]	; 0x30
      return HAL_ERROR;
 800351a:	e761      	b.n	80033e0 <HAL_SD_WriteBlocks+0x48>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800351c:	f240 513a 	movw	r1, #1338	; 0x53a
 8003520:	6399      	str	r1, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003522:	2301      	movs	r3, #1
    return HAL_OK;
 8003524:	4690      	mov	r8, r2
    hsd->State = HAL_SD_STATE_READY;
 8003526:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_OK;
 800352a:	e759      	b.n	80033e0 <HAL_SD_WriteBlocks+0x48>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800352c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800352e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003532:	e73f      	b.n	80033b4 <HAL_SD_WriteBlocks+0x1c>
 8003534:	004005ff 	.word	0x004005ff

08003538 <HAL_SD_ErrorCallback>:
 8003538:	4770      	bx	lr
	...

0800353c <HAL_SD_GetCardCSD>:
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800353c:	6e43      	ldr	r3, [r0, #100]	; 0x64
{
 800353e:	b510      	push	{r4, lr}
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8003540:	0f9a      	lsrs	r2, r3, #30
 8003542:	700a      	strb	r2, [r1, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8003544:	f3c3 6283 	ubfx	r2, r3, #26, #4
 8003548:	704a      	strb	r2, [r1, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800354a:	f3c3 6201 	ubfx	r2, r3, #24, #2
 800354e:	708a      	strb	r2, [r1, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8003550:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8003554:	70ca      	strb	r2, [r1, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8003556:	f3c3 2207 	ubfx	r2, r3, #8, #8

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800355a:	b2db      	uxtb	r3, r3
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800355c:	710a      	strb	r2, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800355e:	714b      	strb	r3, [r1, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8003560:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8003562:	0d1a      	lsrs	r2, r3, #20
 8003564:	80ca      	strh	r2, [r1, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8003566:	f3c3 4203 	ubfx	r2, r3, #16, #4
 800356a:	720a      	strb	r2, [r1, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800356c:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 8003570:	724a      	strb	r2, [r1, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8003572:	f3c3 3280 	ubfx	r2, r3, #14, #1
 8003576:	728a      	strb	r2, [r1, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8003578:	f3c3 3240 	ubfx	r2, r3, #13, #1
 800357c:	72ca      	strb	r2, [r1, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800357e:	f3c3 3200 	ubfx	r2, r3, #12, #1
 8003582:	730a      	strb	r2, [r1, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8003584:	2200      	movs	r2, #0
 8003586:	734a      	strb	r2, [r1, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8003588:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800358a:	2a00      	cmp	r2, #0
 800358c:	d16c      	bne.n	8003668 <HAL_SD_GetCardCSD+0x12c>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800358e:	f640 74fc 	movw	r4, #4092	; 0xffc
 8003592:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8003594:	ea04 0383 	and.w	r3, r4, r3, lsl #2
 8003598:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
 800359c:	610b      	str	r3, [r1, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800359e:	f3c2 63c2 	ubfx	r3, r2, #27, #3
 80035a2:	750b      	strb	r3, [r1, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80035a4:	f3c2 6302 	ubfx	r3, r2, #24, #3
 80035a8:	754b      	strb	r3, [r1, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80035aa:	f3c2 5342 	ubfx	r3, r2, #21, #3
 80035ae:	758b      	strb	r3, [r1, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80035b0:	f3c2 4382 	ubfx	r3, r2, #18, #3

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80035b4:	f3c2 32c2 	ubfx	r2, r2, #15, #3
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80035b8:	75cb      	strb	r3, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80035ba:	760a      	strb	r2, [r1, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80035bc:	690b      	ldr	r3, [r1, #16]
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80035be:	7e0a      	ldrb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80035c0:	3301      	adds	r3, #1
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80035c2:	f002 0207 	and.w	r2, r2, #7
 80035c6:	3202      	adds	r2, #2
 80035c8:	fa03 f202 	lsl.w	r2, r3, r2
 80035cc:	6542      	str	r2, [r0, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80035ce:	7a0b      	ldrb	r3, [r1, #8]
 80035d0:	f003 040f 	and.w	r4, r3, #15
 80035d4:	2301      	movs	r3, #1
 80035d6:	40a3      	lsls	r3, r4
 80035d8:	6583      	str	r3, [r0, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80035da:	0a5b      	lsrs	r3, r3, #9
 80035dc:	4353      	muls	r3, r2
 80035de:	65c3      	str	r3, [r0, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80035e0:	f44f 7300 	mov.w	r3, #512	; 0x200
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
    hsd->SdCard.BlockSize = 512U;
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80035e4:	6603      	str	r3, [r0, #96]	; 0x60
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
    hsd->State = HAL_SD_STATE_READY;
    return HAL_ERROR;
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80035e6:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80035e8:	f3c3 3280 	ubfx	r2, r3, #14, #1
 80035ec:	764a      	strb	r2, [r1, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80035ee:	f3c3 12c6 	ubfx	r2, r3, #7, #7

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80035f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80035f6:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80035f8:	76cb      	strb	r3, [r1, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80035fa:	6f03      	ldr	r3, [r0, #112]	; 0x70

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);

  pCSD->Reserved3 = 0;
 80035fc:	2000      	movs	r0, #0
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80035fe:	0fda      	lsrs	r2, r3, #31
 8003600:	770a      	strb	r2, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8003602:	f3c3 7241 	ubfx	r2, r3, #29, #2
 8003606:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8003608:	f3c3 6282 	ubfx	r2, r3, #26, #3
 800360c:	778a      	strb	r2, [r1, #30]
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800360e:	f3c3 5283 	ubfx	r2, r3, #22, #4
 8003612:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8003614:	f3c3 5240 	ubfx	r2, r3, #21, #1
 8003618:	f881 2020 	strb.w	r2, [r1, #32]

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800361c:	f3c3 4200 	ubfx	r2, r3, #16, #1
  pCSD->Reserved3 = 0;
 8003620:	f881 0021 	strb.w	r0, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8003624:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8003628:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 800362c:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8003630:	f3c3 3280 	ubfx	r2, r3, #14, #1
 8003634:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8003638:	f3c3 3240 	ubfx	r2, r3, #13, #1
 800363c:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8003640:	f3c3 3200 	ubfx	r2, r3, #12, #1
 8003644:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8003648:	f3c3 2281 	ubfx	r2, r3, #10, #2
 800364c:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8003650:	f3c3 2201 	ubfx	r2, r3, #8, #2

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8003654:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8003658:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800365c:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8003660:	2301      	movs	r3, #1
 8003662:	f881 302a 	strb.w	r3, [r1, #42]	; 0x2a

  return HAL_OK;
}
 8003666:	bd10      	pop	{r4, pc}
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8003668:	2a01      	cmp	r2, #1
 800366a:	d10f      	bne.n	800368c <HAL_SD_GetCardCSD+0x150>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800366c:	f8b0 206e 	ldrh.w	r2, [r0, #110]	; 0x6e
 8003670:	041b      	lsls	r3, r3, #16
 8003672:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8003676:	4313      	orrs	r3, r2
 8003678:	610b      	str	r3, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800367a:	690b      	ldr	r3, [r1, #16]
 800367c:	3301      	adds	r3, #1
 800367e:	029b      	lsls	r3, r3, #10
 8003680:	6543      	str	r3, [r0, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8003682:	65c3      	str	r3, [r0, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8003684:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003688:	6583      	str	r3, [r0, #88]	; 0x58
 800368a:	e7ab      	b.n	80035e4 <HAL_SD_GetCardCSD+0xa8>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800368c:	6803      	ldr	r3, [r0, #0]
 800368e:	4a05      	ldr	r2, [pc, #20]	; (80036a4 <HAL_SD_GetCardCSD+0x168>)
 8003690:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003692:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003694:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003698:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800369a:	2301      	movs	r3, #1
 800369c:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    return HAL_ERROR;
 80036a0:	4618      	mov	r0, r3
 80036a2:	e7e0      	b.n	8003666 <HAL_SD_GetCardCSD+0x12a>
 80036a4:	004005ff 	.word	0x004005ff

080036a8 <HAL_SD_InitCard>:
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80036a8:	2300      	movs	r3, #0
{
 80036aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036ae:	b098      	sub	sp, #96	; 0x60
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80036b0:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80036b4:	e9cd 3307 	strd	r3, r3, [sp, #28]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80036b8:	930b      	str	r3, [sp, #44]	; 0x2c
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80036ba:	2376      	movs	r3, #118	; 0x76
{
 80036bc:	4604      	mov	r4, r0
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80036be:	930c      	str	r3, [sp, #48]	; 0x30
  status = SDIO_Init(hsd->Instance, Init);
 80036c0:	ab0a      	add	r3, sp, #40	; 0x28
 80036c2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80036c6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80036ca:	ab07      	add	r3, sp, #28
 80036cc:	6820      	ldr	r0, [r4, #0]
 80036ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80036d0:	f000 fc36 	bl	8003f40 <SDIO_Init>
  if(status != HAL_OK)
 80036d4:	4605      	mov	r5, r0
 80036d6:	2800      	cmp	r0, #0
 80036d8:	f040 80e6 	bne.w	80038a8 <HAL_SD_InitCard+0x200>
  __HAL_SD_ENABLE(hsd);
 80036dc:	2601      	movs	r6, #1
  __HAL_SD_DISABLE(hsd);
 80036de:	4f73      	ldr	r7, [pc, #460]	; (80038ac <HAL_SD_InitCard+0x204>)
 80036e0:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
  (void)SDIO_PowerState_ON(hsd->Instance);
 80036e4:	6820      	ldr	r0, [r4, #0]
 80036e6:	f000 fc4f 	bl	8003f88 <SDIO_PowerState_ON>
  HAL_Delay(2);
 80036ea:	2002      	movs	r0, #2
  __HAL_SD_ENABLE(hsd);
 80036ec:	f8c7 60a0 	str.w	r6, [r7, #160]	; 0xa0
  HAL_Delay(2);
 80036f0:	f7ff f8c2 	bl	8002878 <HAL_Delay>
  __IO uint32_t count = 0U;
  uint32_t response = 0U, validvoltage = 0U;
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80036f4:	6820      	ldr	r0, [r4, #0]
  __IO uint32_t count = 0U;
 80036f6:	9506      	str	r5, [sp, #24]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80036f8:	f000 fc78 	bl	8003fec <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 80036fc:	4605      	mov	r5, r0
 80036fe:	b940      	cbnz	r0, 8003712 <HAL_SD_InitCard+0x6a>
  {
    return errorstate;
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8003700:	6820      	ldr	r0, [r4, #0]
 8003702:	f000 ff11 	bl	8004528 <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 8003706:	b170      	cbz	r0, 8003726 <HAL_SD_InitCard+0x7e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003708:	6820      	ldr	r0, [r4, #0]
    hsd->SdCard.CardVersion = CARD_V1_X;
 800370a:	64a5      	str	r5, [r4, #72]	; 0x48
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800370c:	f000 fc6e 	bl	8003fec <SDMMC_CmdGoIdleState>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003710:	b190      	cbz	r0, 8003738 <HAL_SD_InitCard+0x90>
    hsd->State = HAL_SD_STATE_READY;
 8003712:	2501      	movs	r5, #1
 8003714:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003718:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800371a:	4303      	orrs	r3, r0
 800371c:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800371e:	4628      	mov	r0, r5
 8003720:	b018      	add	sp, #96	; 0x60
 8003722:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8003726:	64a6      	str	r6, [r4, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003728:	2100      	movs	r1, #0
 800372a:	6820      	ldr	r0, [r4, #0]
 800372c:	f000 fdbe 	bl	80042ac <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003730:	b128      	cbz	r0, 800373e <HAL_SD_InitCard+0x96>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003732:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8003736:	e7ec      	b.n	8003712 <HAL_SD_InitCard+0x6a>
  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8003738:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800373a:	2b01      	cmp	r3, #1
 800373c:	d0f4      	beq.n	8003728 <HAL_SD_InitCard+0x80>
{
 800373e:	2600      	movs	r6, #0
    }
  }
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8003740:	f64f 77fe 	movw	r7, #65534	; 0xfffe
    {
      return errorstate;
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8003744:	f8df 8168 	ldr.w	r8, [pc, #360]	; 80038b0 <HAL_SD_InitCard+0x208>
 8003748:	e014      	b.n	8003774 <HAL_SD_InitCard+0xcc>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800374a:	4631      	mov	r1, r6
 800374c:	6820      	ldr	r0, [r4, #0]
 800374e:	f000 fdad 	bl	80042ac <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003752:	2800      	cmp	r0, #0
 8003754:	d1dd      	bne.n	8003712 <HAL_SD_InitCard+0x6a>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8003756:	4641      	mov	r1, r8
 8003758:	6820      	ldr	r0, [r4, #0]
 800375a:	f000 fe47 	bl	80043ec <SDMMC_CmdAppOperCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800375e:	2800      	cmp	r0, #0
 8003760:	d1e7      	bne.n	8003732 <HAL_SD_InitCard+0x8a>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003762:	4631      	mov	r1, r6
 8003764:	6820      	ldr	r0, [r4, #0]
 8003766:	f000 fc2a 	bl	8003fbe <SDIO_GetResponse>
 800376a:	4605      	mov	r5, r0

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);

    count++;
 800376c:	9b06      	ldr	r3, [sp, #24]
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800376e:	0fc6      	lsrs	r6, r0, #31
    count++;
 8003770:	3301      	adds	r3, #1
 8003772:	9306      	str	r3, [sp, #24]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8003774:	9b06      	ldr	r3, [sp, #24]
 8003776:	42bb      	cmp	r3, r7
 8003778:	d801      	bhi.n	800377e <HAL_SD_InitCard+0xd6>
 800377a:	2e00      	cmp	r6, #0
 800377c:	d0e5      	beq.n	800374a <HAL_SD_InitCard+0xa2>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800377e:	9b06      	ldr	r3, [sp, #24]
 8003780:	42bb      	cmp	r3, r7
 8003782:	d80c      	bhi.n	800379e <HAL_SD_InitCard+0xf6>
  uint16_t sd_rca = 1U;
 8003784:	2301      	movs	r3, #1
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8003786:	f3c5 7580 	ubfx	r5, r5, #30, #1
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800378a:	6820      	ldr	r0, [r4, #0]
 800378c:	6465      	str	r5, [r4, #68]	; 0x44
  uint16_t sd_rca = 1U;
 800378e:	f8ad 3016 	strh.w	r3, [sp, #22]
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8003792:	f000 fbfd 	bl	8003f90 <SDIO_GetPowerState>
 8003796:	b928      	cbnz	r0, 80037a4 <HAL_SD_InitCard+0xfc>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003798:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 800379c:	e07d      	b.n	800389a <HAL_SD_InitCard+0x1f2>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800379e:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 80037a2:	e7b6      	b.n	8003712 <HAL_SD_InitCard+0x6a>
  if(hsd->SdCard.CardType != CARD_SECURED)
 80037a4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80037a6:	2b03      	cmp	r3, #3
 80037a8:	d044      	beq.n	8003834 <HAL_SD_InitCard+0x18c>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80037aa:	6820      	ldr	r0, [r4, #0]
 80037ac:	f000 fdd4 	bl	8004358 <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 80037b0:	4601      	mov	r1, r0
 80037b2:	2800      	cmp	r0, #0
 80037b4:	d171      	bne.n	800389a <HAL_SD_InitCard+0x1f2>
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80037b6:	6820      	ldr	r0, [r4, #0]
 80037b8:	f000 fc01 	bl	8003fbe <SDIO_GetResponse>
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80037bc:	2104      	movs	r1, #4
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80037be:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80037c0:	6820      	ldr	r0, [r4, #0]
 80037c2:	f000 fbfc 	bl	8003fbe <SDIO_GetResponse>
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80037c6:	2108      	movs	r1, #8
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80037c8:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80037ca:	6820      	ldr	r0, [r4, #0]
 80037cc:	f000 fbf7 	bl	8003fbe <SDIO_GetResponse>
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80037d0:	210c      	movs	r1, #12
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80037d2:	67e0      	str	r0, [r4, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80037d4:	6820      	ldr	r0, [r4, #0]
 80037d6:	f000 fbf2 	bl	8003fbe <SDIO_GetResponse>
  if(hsd->SdCard.CardType != CARD_SECURED)
 80037da:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80037dc:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  if(hsd->SdCard.CardType != CARD_SECURED)
 80037e0:	2b03      	cmp	r3, #3
 80037e2:	d027      	beq.n	8003834 <HAL_SD_InitCard+0x18c>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80037e4:	f10d 0116 	add.w	r1, sp, #22
 80037e8:	6820      	ldr	r0, [r4, #0]
 80037ea:	f000 fe5b 	bl	80044a4 <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 80037ee:	4601      	mov	r1, r0
 80037f0:	2800      	cmp	r0, #0
 80037f2:	d152      	bne.n	800389a <HAL_SD_InitCard+0x1f2>
  if(hsd->SdCard.CardType != CARD_SECURED)
 80037f4:	6c63      	ldr	r3, [r4, #68]	; 0x44
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80037f6:	6820      	ldr	r0, [r4, #0]
  if(hsd->SdCard.CardType != CARD_SECURED)
 80037f8:	2b03      	cmp	r3, #3
 80037fa:	d01b      	beq.n	8003834 <HAL_SD_InitCard+0x18c>
    hsd->SdCard.RelCardAdd = sd_rca;
 80037fc:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8003800:	6521      	str	r1, [r4, #80]	; 0x50
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003802:	0409      	lsls	r1, r1, #16
 8003804:	f000 fdbd 	bl	8004382 <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003808:	4601      	mov	r1, r0
 800380a:	2800      	cmp	r0, #0
 800380c:	d145      	bne.n	800389a <HAL_SD_InitCard+0x1f2>
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800380e:	6820      	ldr	r0, [r4, #0]
 8003810:	f000 fbd5 	bl	8003fbe <SDIO_GetResponse>
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003814:	2104      	movs	r1, #4
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003816:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003818:	6820      	ldr	r0, [r4, #0]
 800381a:	f000 fbd0 	bl	8003fbe <SDIO_GetResponse>
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800381e:	2108      	movs	r1, #8
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003820:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003822:	6820      	ldr	r0, [r4, #0]
 8003824:	f000 fbcb 	bl	8003fbe <SDIO_GetResponse>
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003828:	210c      	movs	r1, #12
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800382a:	66e0      	str	r0, [r4, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800382c:	6820      	ldr	r0, [r4, #0]
 800382e:	f000 fbc6 	bl	8003fbe <SDIO_GetResponse>
 8003832:	6720      	str	r0, [r4, #112]	; 0x70
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8003834:	2104      	movs	r1, #4
 8003836:	6820      	ldr	r0, [r4, #0]
 8003838:	f000 fbc1 	bl	8003fbe <SDIO_GetResponse>
 800383c:	0d00      	lsrs	r0, r0, #20
 800383e:	64e0      	str	r0, [r4, #76]	; 0x4c
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8003840:	a90d      	add	r1, sp, #52	; 0x34
 8003842:	4620      	mov	r0, r4
 8003844:	f7ff fe7a 	bl	800353c <HAL_SD_GetCardCSD>
 8003848:	4605      	mov	r5, r0
 800384a:	bb20      	cbnz	r0, 8003896 <HAL_SD_InitCard+0x1ee>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800384c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800384e:	4603      	mov	r3, r0
 8003850:	0412      	lsls	r2, r2, #16
 8003852:	6820      	ldr	r0, [r4, #0]
 8003854:	f000 fd12 	bl	800427c <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 8003858:	4601      	mov	r1, r0
 800385a:	b9f0      	cbnz	r0, 800389a <HAL_SD_InitCard+0x1f2>
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800385c:	f104 0310 	add.w	r3, r4, #16
 8003860:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003864:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8003868:	1d23      	adds	r3, r4, #4
 800386a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800386c:	6820      	ldr	r0, [r4, #0]
 800386e:	f000 fb67 	bl	8003f40 <SDIO_Init>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003872:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003876:	6820      	ldr	r0, [r4, #0]
 8003878:	f000 fc6e 	bl	8004158 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 800387c:	2800      	cmp	r0, #0
 800387e:	f43f af4e 	beq.w	800371e <HAL_SD_InitCard+0x76>
    hsd->State = HAL_SD_STATE_READY;
 8003882:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003884:	6823      	ldr	r3, [r4, #0]
 8003886:	4a0b      	ldr	r2, [pc, #44]	; (80038b4 <HAL_SD_InitCard+0x20c>)
 8003888:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800388a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800388c:	4318      	orrs	r0, r3
 800388e:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003890:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    return HAL_ERROR;
 8003894:	e743      	b.n	800371e <HAL_SD_InitCard+0x76>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003896:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    hsd->State = HAL_SD_STATE_READY;
 800389a:	2501      	movs	r5, #1
 800389c:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80038a0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80038a2:	4319      	orrs	r1, r3
 80038a4:	63a1      	str	r1, [r4, #56]	; 0x38
    return HAL_ERROR;
 80038a6:	e73a      	b.n	800371e <HAL_SD_InitCard+0x76>
    return HAL_ERROR;
 80038a8:	2501      	movs	r5, #1
 80038aa:	e738      	b.n	800371e <HAL_SD_InitCard+0x76>
 80038ac:	42300000 	.word	0x42300000
 80038b0:	c1100000 	.word	0xc1100000
 80038b4:	004005ff 	.word	0x004005ff

080038b8 <HAL_SD_Init>:
{
 80038b8:	b510      	push	{r4, lr}
  if(hsd == NULL)
 80038ba:	4604      	mov	r4, r0
 80038bc:	b908      	cbnz	r0, 80038c2 <HAL_SD_Init+0xa>
    return HAL_ERROR;
 80038be:	2001      	movs	r0, #1
}
 80038c0:	bd10      	pop	{r4, pc}
  if(hsd->State == HAL_SD_STATE_RESET)
 80038c2:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 80038c6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80038ca:	b913      	cbnz	r3, 80038d2 <HAL_SD_Init+0x1a>
    hsd->Lock = HAL_UNLOCKED;
 80038cc:	7702      	strb	r2, [r0, #28]
    HAL_SD_MspInit(hsd);
 80038ce:	f7fe fe3f 	bl	8002550 <HAL_SD_MspInit>
  hsd->State = HAL_SD_STATE_BUSY;
 80038d2:	2303      	movs	r3, #3
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80038d4:	4620      	mov	r0, r4
  hsd->State = HAL_SD_STATE_BUSY;
 80038d6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80038da:	f7ff fee5 	bl	80036a8 <HAL_SD_InitCard>
 80038de:	2800      	cmp	r0, #0
 80038e0:	d1ed      	bne.n	80038be <HAL_SD_Init+0x6>
  hsd->State = HAL_SD_STATE_READY;
 80038e2:	2301      	movs	r3, #1
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80038e4:	63a0      	str	r0, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 80038e6:	6320      	str	r0, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 80038e8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 80038ec:	e7e8      	b.n	80038c0 <HAL_SD_Init+0x8>

080038ee <HAL_SD_GetCardInfo>:
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80038ee:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80038f0:	600b      	str	r3, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80038f2:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80038f4:	604b      	str	r3, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80038f6:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80038f8:	608b      	str	r3, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80038fa:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80038fc:	60cb      	str	r3, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80038fe:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8003900:	610b      	str	r3, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8003902:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8003904:	614b      	str	r3, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8003906:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8003908:	618b      	str	r3, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800390a:	6e03      	ldr	r3, [r0, #96]	; 0x60
}
 800390c:	2000      	movs	r0, #0
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800390e:	61cb      	str	r3, [r1, #28]
}
 8003910:	4770      	bx	lr

08003912 <HAL_SD_GetCardState>:
  {
    return HAL_SD_ERROR_PARAM;
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003912:	6d01      	ldr	r1, [r0, #80]	; 0x50
{
 8003914:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003916:	0409      	lsls	r1, r1, #16
{
 8003918:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800391a:	6800      	ldr	r0, [r0, #0]
 800391c:	f000 fcde 	bl	80042dc <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 8003920:	4601      	mov	r1, r0
 8003922:	b928      	cbnz	r0, 8003930 <HAL_SD_GetCardState+0x1e>
  {
    return errorstate;
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003924:	6820      	ldr	r0, [r4, #0]
 8003926:	f000 fb4a 	bl	8003fbe <SDIO_GetResponse>
}
 800392a:	f3c0 2043 	ubfx	r0, r0, #9, #4
 800392e:	bd10      	pop	{r4, pc}
    hsd->ErrorCode |= errorstate;
 8003930:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003932:	4308      	orrs	r0, r1
 8003934:	63a0      	str	r0, [r4, #56]	; 0x38
  uint32_t resp1 = 0;
 8003936:	2000      	movs	r0, #0
 8003938:	e7f7      	b.n	800392a <HAL_SD_GetCardState+0x18>

0800393a <SD_DMATxAbort>:
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800393a:	f240 523a 	movw	r2, #1338	; 0x53a
{
 800393e:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003940:	6a44      	ldr	r4, [r0, #36]	; 0x24
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003942:	6823      	ldr	r3, [r4, #0]
  CardState = HAL_SD_GetCardState(hsd);
 8003944:	4620      	mov	r0, r4
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003946:	639a      	str	r2, [r3, #56]	; 0x38
  CardState = HAL_SD_GetCardState(hsd);
 8003948:	f7ff ffe3 	bl	8003912 <HAL_SD_GetCardState>
  hsd->State = HAL_SD_STATE_READY;
 800394c:	2301      	movs	r3, #1
 800394e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003952:	2300      	movs	r3, #0
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003954:	3805      	subs	r0, #5
 8003956:	2801      	cmp	r0, #1
  hsd->Context = SD_CONTEXT_NONE;
 8003958:	6323      	str	r3, [r4, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800395a:	d805      	bhi.n	8003968 <SD_DMATxAbort+0x2e>
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800395c:	6820      	ldr	r0, [r4, #0]
 800395e:	f000 fc73 	bl	8004248 <SDMMC_CmdStopTransfer>
 8003962:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003964:	4303      	orrs	r3, r0
 8003966:	63a3      	str	r3, [r4, #56]	; 0x38
  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8003968:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    HAL_SD_AbortCallback(hsd);
 800396a:	4620      	mov	r0, r4
  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800396c:	b913      	cbnz	r3, 8003974 <SD_DMATxAbort+0x3a>
    HAL_SD_AbortCallback(hsd);
 800396e:	f000 fe34 	bl	80045da <HAL_SD_AbortCallback>
}
 8003972:	bd10      	pop	{r4, pc}
    HAL_SD_ErrorCallback(hsd);
 8003974:	f7ff fde0 	bl	8003538 <HAL_SD_ErrorCallback>
}
 8003978:	e7fb      	b.n	8003972 <SD_DMATxAbort+0x38>
	...

0800397c <HAL_SD_IRQHandler>:
{
 800397c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t context = hsd->Context;
 8003980:	6b05      	ldr	r5, [r0, #48]	; 0x30
{
 8003982:	4604      	mov	r4, r0
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003984:	6800      	ldr	r0, [r0, #0]
 8003986:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003988:	041f      	lsls	r7, r3, #16
 800398a:	d51f      	bpl.n	80039cc <HAL_SD_IRQHandler+0x50>
 800398c:	072e      	lsls	r6, r5, #28
 800398e:	d51d      	bpl.n	80039cc <HAL_SD_IRQHandler+0x50>
{
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
  dataremaining = hsd->RxXferSize;
 8003990:	6ae7      	ldr	r7, [r4, #44]	; 0x2c

  if (dataremaining > 0U)
 8003992:	b1c7      	cbz	r7, 80039c6 <HAL_SD_IRQHandler+0x4a>
  tmp = hsd->pRxBuffPtr;
 8003994:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003996:	1d35      	adds	r5, r6, #4
 8003998:	f106 0824 	add.w	r8, r6, #36	; 0x24
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800399c:	6820      	ldr	r0, [r4, #0]
 800399e:	f000 faeb 	bl	8003f78 <SDIO_ReadFIFO>
      *tmp = (uint8_t)(data & 0xFFU);
      tmp++;
      dataremaining--;
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80039a2:	0a03      	lsrs	r3, r0, #8
      *tmp = (uint8_t)(data & 0xFFU);
 80039a4:	f805 0c04 	strb.w	r0, [r5, #-4]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80039a8:	f805 3c03 	strb.w	r3, [r5, #-3]
      tmp++;
      dataremaining--;
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80039ac:	0c03      	lsrs	r3, r0, #16
      tmp++;
      dataremaining--;
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80039ae:	0e00      	lsrs	r0, r0, #24
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80039b0:	f805 3c02 	strb.w	r3, [r5, #-2]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80039b4:	f805 0c01 	strb.w	r0, [r5, #-1]
    for(count = 0U; count < 8U; count++)
 80039b8:	3504      	adds	r5, #4
 80039ba:	4545      	cmp	r5, r8
 80039bc:	d1ee      	bne.n	800399c <HAL_SD_IRQHandler+0x20>
      tmp++;
 80039be:	3620      	adds	r6, #32
      dataremaining--;
 80039c0:	3f20      	subs	r7, #32
    }

    hsd->pRxBuffPtr = tmp;
 80039c2:	62a6      	str	r6, [r4, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 80039c4:	62e7      	str	r7, [r4, #44]	; 0x2c
}
 80039c6:	b002      	add	sp, #8
 80039c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 80039cc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80039ce:	05d9      	lsls	r1, r3, #23
 80039d0:	d544      	bpl.n	8003a5c <HAL_SD_IRQHandler+0xe0>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 80039d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80039d6:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80039d8:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    if((context & SD_CONTEXT_IT) != 0U)
 80039da:	072a      	lsls	r2, r5, #28
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80039dc:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 80039e0:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 80039e4:	63c3      	str	r3, [r0, #60]	; 0x3c
    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 80039e6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80039e8:	f023 0301 	bic.w	r3, r3, #1
 80039ec:	62c3      	str	r3, [r0, #44]	; 0x2c
    if((context & SD_CONTEXT_IT) != 0U)
 80039ee:	d51a      	bpl.n	8003a26 <HAL_SD_IRQHandler+0xaa>
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80039f0:	f015 0f22 	tst.w	r5, #34	; 0x22
 80039f4:	d008      	beq.n	8003a08 <HAL_SD_IRQHandler+0x8c>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80039f6:	f000 fc27 	bl	8004248 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 80039fa:	b128      	cbz	r0, 8003a08 <HAL_SD_IRQHandler+0x8c>
          hsd->ErrorCode |= errorstate;
 80039fc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80039fe:	4318      	orrs	r0, r3
 8003a00:	63a0      	str	r0, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8003a02:	4620      	mov	r0, r4
 8003a04:	f7ff fd98 	bl	8003538 <HAL_SD_ErrorCallback>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003a08:	f240 523a 	movw	r2, #1338	; 0x53a
 8003a0c:	6823      	ldr	r3, [r4, #0]
        HAL_SD_RxCpltCallback(hsd);
 8003a0e:	4620      	mov	r0, r4
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003a10:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003a12:	2301      	movs	r3, #1
 8003a14:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	6323      	str	r3, [r4, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003a1c:	07ab      	lsls	r3, r5, #30
 8003a1e:	d01a      	beq.n	8003a56 <HAL_SD_IRQHandler+0xda>
        HAL_SD_RxCpltCallback(hsd);
 8003a20:	f000 fde5 	bl	80045ee <HAL_SD_RxCpltCallback>
 8003a24:	e7cf      	b.n	80039c6 <HAL_SD_IRQHandler+0x4a>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8003a26:	062f      	lsls	r7, r5, #24
 8003a28:	d5cd      	bpl.n	80039c6 <HAL_SD_IRQHandler+0x4a>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8003a2a:	06ae      	lsls	r6, r5, #26
 8003a2c:	d508      	bpl.n	8003a40 <HAL_SD_IRQHandler+0xc4>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003a2e:	f000 fc0b 	bl	8004248 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8003a32:	b128      	cbz	r0, 8003a40 <HAL_SD_IRQHandler+0xc4>
          hsd->ErrorCode |= errorstate;
 8003a34:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003a36:	4318      	orrs	r0, r3
 8003a38:	63a0      	str	r0, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8003a3a:	4620      	mov	r0, r4
 8003a3c:	f7ff fd7c 	bl	8003538 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8003a40:	07a8      	lsls	r0, r5, #30
 8003a42:	d1c0      	bne.n	80039c6 <HAL_SD_IRQHandler+0x4a>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8003a44:	6822      	ldr	r2, [r4, #0]
        HAL_SD_TxCpltCallback(hsd);
 8003a46:	4620      	mov	r0, r4
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8003a48:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003a4a:	f023 0308 	bic.w	r3, r3, #8
 8003a4e:	62d3      	str	r3, [r2, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8003a50:	2301      	movs	r3, #1
 8003a52:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8003a56:	f000 fdc5 	bl	80045e4 <HAL_SD_TxCpltCallback>
 8003a5a:	e7b4      	b.n	80039c6 <HAL_SD_IRQHandler+0x4a>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003a5c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003a5e:	0459      	lsls	r1, r3, #17
 8003a60:	d526      	bpl.n	8003ab0 <HAL_SD_IRQHandler+0x134>
 8003a62:	072a      	lsls	r2, r5, #28
 8003a64:	d524      	bpl.n	8003ab0 <HAL_SD_IRQHandler+0x134>
{
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
  dataremaining = hsd->TxXferSize;
 8003a66:	6a67      	ldr	r7, [r4, #36]	; 0x24

  if (dataremaining > 0U)
 8003a68:	2f00      	cmp	r7, #0
 8003a6a:	d0ac      	beq.n	80039c6 <HAL_SD_IRQHandler+0x4a>
  tmp = hsd->pTxBuffPtr;
 8003a6c:	6a26      	ldr	r6, [r4, #32]
 8003a6e:	1d35      	adds	r5, r6, #4
 8003a70:	f106 0824 	add.w	r8, r6, #36	; 0x24
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
    {
      data = (uint32_t)(*tmp);
 8003a74:	f815 3c04 	ldrb.w	r3, [r5, #-4]
      tmp++;
      dataremaining--;
      data |= ((uint32_t)(*tmp) << 24U);
      tmp++;
      dataremaining--;
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8003a78:	6820      	ldr	r0, [r4, #0]
      data = (uint32_t)(*tmp);
 8003a7a:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 8U);
 8003a7c:	f815 2c03 	ldrb.w	r2, [r5, #-3]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8003a80:	a901      	add	r1, sp, #4
      data |= ((uint32_t)(*tmp) << 8U);
 8003a82:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003a86:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 16U);
 8003a88:	f815 2c02 	ldrb.w	r2, [r5, #-2]
    for(count = 0U; count < 8U; count++)
 8003a8c:	3504      	adds	r5, #4
      data |= ((uint32_t)(*tmp) << 16U);
 8003a8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003a92:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 24U);
 8003a94:	f815 2c05 	ldrb.w	r2, [r5, #-5]
 8003a98:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003a9c:	9301      	str	r3, [sp, #4]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8003a9e:	f000 fa6e 	bl	8003f7e <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8003aa2:	4545      	cmp	r5, r8
 8003aa4:	d1e6      	bne.n	8003a74 <HAL_SD_IRQHandler+0xf8>
      tmp++;
 8003aa6:	3620      	adds	r6, #32
      dataremaining--;
 8003aa8:	3f20      	subs	r7, #32
    }

    hsd->pTxBuffPtr = tmp;
 8003aaa:	6226      	str	r6, [r4, #32]
    hsd->TxXferSize = dataremaining;
 8003aac:	6267      	str	r7, [r4, #36]	; 0x24
  }
}
 8003aae:	e78a      	b.n	80039c6 <HAL_SD_IRQHandler+0x4a>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 8003ab0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003ab2:	f013 0f3a 	tst.w	r3, #58	; 0x3a
 8003ab6:	d086      	beq.n	80039c6 <HAL_SD_IRQHandler+0x4a>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8003ab8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003aba:	079b      	lsls	r3, r3, #30
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003abc:	bf42      	ittt	mi
 8003abe:	6ba3      	ldrmi	r3, [r4, #56]	; 0x38
 8003ac0:	f043 0302 	orrmi.w	r3, r3, #2
 8003ac4:	63a3      	strmi	r3, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8003ac6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003ac8:	071f      	lsls	r7, r3, #28
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003aca:	bf42      	ittt	mi
 8003acc:	6ba3      	ldrmi	r3, [r4, #56]	; 0x38
 8003ace:	f043 0308 	orrmi.w	r3, r3, #8
 8003ad2:	63a3      	strmi	r3, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8003ad4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003ad6:	069e      	lsls	r6, r3, #26
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003ad8:	bf42      	ittt	mi
 8003ada:	6ba3      	ldrmi	r3, [r4, #56]	; 0x38
 8003adc:	f043 0320 	orrmi.w	r3, r3, #32
 8003ae0:	63a3      	strmi	r3, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8003ae2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003ae4:	06d9      	lsls	r1, r3, #27
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003ae6:	bf42      	ittt	mi
 8003ae8:	6ba3      	ldrmi	r3, [r4, #56]	; 0x38
 8003aea:	f043 0310 	orrmi.w	r3, r3, #16
 8003aee:	63a3      	strmi	r3, [r4, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8003af0:	f240 733a 	movw	r3, #1850	; 0x73a
 8003af4:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8003af6:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8003af8:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8003afc:	f023 0302 	bic.w	r3, r3, #2
 8003b00:	63c3      	str	r3, [r0, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003b02:	f000 fba1 	bl	8004248 <SDMMC_CmdStopTransfer>
 8003b06:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8003b08:	072a      	lsls	r2, r5, #28
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003b0a:	ea43 0300 	orr.w	r3, r3, r0
 8003b0e:	63a3      	str	r3, [r4, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8003b10:	d508      	bpl.n	8003b24 <HAL_SD_IRQHandler+0x1a8>
      hsd->State = HAL_SD_STATE_READY;
 8003b12:	2301      	movs	r3, #1
 8003b14:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003b18:	2300      	movs	r3, #0
      HAL_SD_ErrorCallback(hsd);
 8003b1a:	4620      	mov	r0, r4
      hsd->Context = SD_CONTEXT_NONE;
 8003b1c:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8003b1e:	f7ff fd0b 	bl	8003538 <HAL_SD_ErrorCallback>
 8003b22:	e750      	b.n	80039c6 <HAL_SD_IRQHandler+0x4a>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8003b24:	062b      	lsls	r3, r5, #24
 8003b26:	f57f af4e 	bpl.w	80039c6 <HAL_SD_IRQHandler+0x4a>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8003b2a:	f015 0f30 	tst.w	r5, #48	; 0x30
 8003b2e:	d00d      	beq.n	8003b4c <HAL_SD_IRQHandler+0x1d0>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8003b30:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8003b32:	4b11      	ldr	r3, [pc, #68]	; (8003b78 <HAL_SD_IRQHandler+0x1fc>)
 8003b34:	6343      	str	r3, [r0, #52]	; 0x34
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8003b36:	f7fe ff17 	bl	8002968 <HAL_DMA_Abort_IT>
 8003b3a:	2800      	cmp	r0, #0
 8003b3c:	f43f af43 	beq.w	80039c6 <HAL_SD_IRQHandler+0x4a>
          SD_DMATxAbort(hsd->hdmatx);
 8003b40:	6be0      	ldr	r0, [r4, #60]	; 0x3c
}
 8003b42:	b002      	add	sp, #8
 8003b44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
          SD_DMARxAbort(hsd->hdmarx);
 8003b48:	f7ff bef7 	b.w	800393a <SD_DMATxAbort>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003b4c:	f015 0503 	ands.w	r5, r5, #3
 8003b50:	d009      	beq.n	8003b66 <HAL_SD_IRQHandler+0x1ea>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8003b52:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8003b54:	4b09      	ldr	r3, [pc, #36]	; (8003b7c <HAL_SD_IRQHandler+0x200>)
 8003b56:	6343      	str	r3, [r0, #52]	; 0x34
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003b58:	f7fe ff06 	bl	8002968 <HAL_DMA_Abort_IT>
 8003b5c:	2800      	cmp	r0, #0
 8003b5e:	f43f af32 	beq.w	80039c6 <HAL_SD_IRQHandler+0x4a>
          SD_DMARxAbort(hsd->hdmarx);
 8003b62:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8003b64:	e7ed      	b.n	8003b42 <HAL_SD_IRQHandler+0x1c6>
        hsd->State = HAL_SD_STATE_READY;
 8003b66:	2301      	movs	r3, #1
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003b68:	63a5      	str	r5, [r4, #56]	; 0x38
        HAL_SD_AbortCallback(hsd);
 8003b6a:	4620      	mov	r0, r4
        hsd->State = HAL_SD_STATE_READY;
 8003b6c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003b70:	6325      	str	r5, [r4, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8003b72:	f000 fd32 	bl	80045da <HAL_SD_AbortCallback>
}
 8003b76:	e726      	b.n	80039c6 <HAL_SD_IRQHandler+0x4a>
 8003b78:	0800393b 	.word	0x0800393b
 8003b7c:	08003b81 	.word	0x08003b81

08003b80 <SD_DMARxAbort>:
 8003b80:	f7ff bedb 	b.w	800393a <SD_DMATxAbort>

08003b84 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8003b84:	b570      	push	{r4, r5, r6, lr}
 8003b86:	460e      	mov	r6, r1
 8003b88:	4615      	mov	r5, r2
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 8003b8a:	4604      	mov	r4, r0
 8003b8c:	b348      	cbz	r0, 8003be2 <HAL_SRAM_Init+0x5e>
 8003b8e:	6983      	ldr	r3, [r0, #24]
 8003b90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b94:	d025      	beq.n	8003be2 <HAL_SRAM_Init+0x5e>
  {
    return HAL_ERROR;
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8003b96:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003b9a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003b9e:	b91b      	cbnz	r3, 8003ba8 <HAL_SRAM_Init+0x24>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8003ba0:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8003ba4:	f7fe fd5e 	bl	8002664 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8003ba8:	f104 0108 	add.w	r1, r4, #8
 8003bac:	6820      	ldr	r0, [r4, #0]
 8003bae:	f000 f959 	bl	8003e64 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8003bb2:	4631      	mov	r1, r6
 8003bb4:	68a2      	ldr	r2, [r4, #8]
 8003bb6:	6820      	ldr	r0, [r4, #0]
 8003bb8:	f000 f986 	bl	8003ec8 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8003bbc:	4629      	mov	r1, r5
 8003bbe:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003bc0:	68a2      	ldr	r2, [r4, #8]
 8003bc2:	6860      	ldr	r0, [r4, #4]
 8003bc4:	f000 f99e 	bl	8003f04 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8003bc8:	6822      	ldr	r2, [r4, #0]
 8003bca:	68a1      	ldr	r1, [r4, #8]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;

  return HAL_OK;
 8003bcc:	2000      	movs	r0, #0
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8003bce:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003bd2:	f043 0301 	orr.w	r3, r3, #1
 8003bd6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  hsram->State = HAL_SRAM_STATE_READY;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
}
 8003be0:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8003be2:	2001      	movs	r0, #1
 8003be4:	e7fc      	b.n	8003be0 <HAL_SRAM_Init+0x5c>
	...

08003be8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003be8:	b510      	push	{r4, lr}
 8003bea:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003bec:	6803      	ldr	r3, [r0, #0]
 8003bee:	68c1      	ldr	r1, [r0, #12]
 8003bf0:	691a      	ldr	r2, [r3, #16]
 8003bf2:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8003bf6:	430a      	orrs	r2, r1
 8003bf8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003bfa:	6882      	ldr	r2, [r0, #8]
 8003bfc:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8003bfe:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003c00:	4302      	orrs	r2, r0
 8003c02:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8003c04:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 8003c08:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003c0c:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8003c0e:	430a      	orrs	r2, r1
 8003c10:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c12:	695a      	ldr	r2, [r3, #20]
 8003c14:	69a1      	ldr	r1, [r4, #24]
 8003c16:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003c1a:	430a      	orrs	r2, r1
 8003c1c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003c1e:	4a0e      	ldr	r2, [pc, #56]	; (8003c58 <UART_SetConfig+0x70>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d115      	bne.n	8003c50 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003c24:	f7ff faa4 	bl	8003170 <HAL_RCC_GetPCLK2Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c28:	2319      	movs	r3, #25
 8003c2a:	4343      	muls	r3, r0
 8003c2c:	6862      	ldr	r2, [r4, #4]
 8003c2e:	6820      	ldr	r0, [r4, #0]
 8003c30:	0092      	lsls	r2, r2, #2
 8003c32:	fbb3 f3f2 	udiv	r3, r3, r2
 8003c36:	2264      	movs	r2, #100	; 0x64
 8003c38:	fbb3 f1f2 	udiv	r1, r3, r2
 8003c3c:	fb02 3311 	mls	r3, r2, r1, r3
 8003c40:	011b      	lsls	r3, r3, #4
 8003c42:	3332      	adds	r3, #50	; 0x32
 8003c44:	fbb3 f3f2 	udiv	r3, r3, r2
 8003c48:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8003c4c:	6083      	str	r3, [r0, #8]
#endif /* USART_CR1_OVER8 */
}
 8003c4e:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8003c50:	f7ff fa7e 	bl	8003150 <HAL_RCC_GetPCLK1Freq>
 8003c54:	e7e8      	b.n	8003c28 <UART_SetConfig+0x40>
 8003c56:	bf00      	nop
 8003c58:	40013800 	.word	0x40013800

08003c5c <UART_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
 8003c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c5e:	4604      	mov	r4, r0
 8003c60:	460e      	mov	r6, r1
 8003c62:	4617      	mov	r7, r2
 8003c64:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c66:	6822      	ldr	r2, [r4, #0]
 8003c68:	6813      	ldr	r3, [r2, #0]
 8003c6a:	ea36 0303 	bics.w	r3, r6, r3
 8003c6e:	d101      	bne.n	8003c74 <UART_WaitOnFlagUntilTimeout.constprop.0+0x18>
  return HAL_OK;
 8003c70:	2000      	movs	r0, #0
 8003c72:	e028      	b.n	8003cc6 <UART_WaitOnFlagUntilTimeout.constprop.0+0x6a>
    if (Timeout != HAL_MAX_DELAY)
 8003c74:	1c6b      	adds	r3, r5, #1
 8003c76:	d0f7      	beq.n	8003c68 <UART_WaitOnFlagUntilTimeout.constprop.0+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003c78:	b125      	cbz	r5, 8003c84 <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
 8003c7a:	f7fe fdf7 	bl	800286c <HAL_GetTick>
 8003c7e:	1bc0      	subs	r0, r0, r7
 8003c80:	4285      	cmp	r5, r0
 8003c82:	d2f0      	bcs.n	8003c66 <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c84:	6822      	ldr	r2, [r4, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c86:	f102 030c 	add.w	r3, r2, #12
 8003c8a:	e853 3f00 	ldrex	r3, [r3]
 8003c8e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c92:	320c      	adds	r2, #12
 8003c94:	e842 3000 	strex	r0, r3, [r2]
   return(result);
 8003c98:	6821      	ldr	r1, [r4, #0]
 8003c9a:	2800      	cmp	r0, #0
 8003c9c:	d1f2      	bne.n	8003c84 <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c9e:	f101 0314 	add.w	r3, r1, #20
 8003ca2:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ca6:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003caa:	f101 0014 	add.w	r0, r1, #20
 8003cae:	e840 3200 	strex	r2, r3, [r0]
 8003cb2:	2a00      	cmp	r2, #0
 8003cb4:	d1f3      	bne.n	8003c9e <UART_WaitOnFlagUntilTimeout.constprop.0+0x42>
        huart->gState  = HAL_UART_STATE_READY;
 8003cb6:	2320      	movs	r3, #32
        __HAL_UNLOCK(huart);
 8003cb8:	2003      	movs	r0, #3
        huart->gState  = HAL_UART_STATE_READY;
 8003cba:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        __HAL_UNLOCK(huart);
 8003cbe:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        huart->RxState = HAL_UART_STATE_READY;
 8003cc2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
}
 8003cc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003cc8 <HAL_UART_Init>:
{
 8003cc8:	b510      	push	{r4, lr}
  if (huart == NULL)
 8003cca:	4604      	mov	r4, r0
 8003ccc:	b348      	cbz	r0, 8003d22 <HAL_UART_Init+0x5a>
  if (huart->gState == HAL_UART_STATE_RESET)
 8003cce:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003cd2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003cd6:	b91b      	cbnz	r3, 8003ce0 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8003cd8:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_UART_MspInit(huart);
 8003cdc:	f7fe fc86 	bl	80025ec <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8003ce0:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8003ce2:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003ce4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UART_DISABLE(huart);
 8003ce8:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8003cea:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8003cec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003cf0:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8003cf2:	f7ff ff79 	bl	8003be8 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cf6:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cf8:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cfa:	691a      	ldr	r2, [r3, #16]
 8003cfc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d02:	695a      	ldr	r2, [r3, #20]
 8003d04:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d08:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8003d0a:	68da      	ldr	r2, [r3, #12]
 8003d0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d10:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8003d12:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d14:	6460      	str	r0, [r4, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003d16:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003d1a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d1e:	6360      	str	r0, [r4, #52]	; 0x34
}
 8003d20:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003d22:	2001      	movs	r0, #1
 8003d24:	e7fc      	b.n	8003d20 <HAL_UART_Init+0x58>

08003d26 <HAL_UART_Transmit>:
{
 8003d26:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d2a:	4699      	mov	r9, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8003d2c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8003d30:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8003d32:	2b20      	cmp	r3, #32
{
 8003d34:	460e      	mov	r6, r1
 8003d36:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8003d38:	d13c      	bne.n	8003db4 <HAL_UART_Transmit+0x8e>
    if ((pData == NULL) || (Size == 0U))
 8003d3a:	2900      	cmp	r1, #0
 8003d3c:	d03c      	beq.n	8003db8 <HAL_UART_Transmit+0x92>
 8003d3e:	2a00      	cmp	r2, #0
 8003d40:	d03a      	beq.n	8003db8 <HAL_UART_Transmit+0x92>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d42:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d44:	2500      	movs	r5, #0
 8003d46:	6445      	str	r5, [r0, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d48:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    tickstart = HAL_GetTick();
 8003d4c:	f7fe fd8e 	bl	800286c <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d50:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8003d52:	4680      	mov	r8, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferSize = Size;
 8003d58:	84a7      	strh	r7, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8003d5a:	84e7      	strh	r7, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d5c:	d103      	bne.n	8003d66 <HAL_UART_Transmit+0x40>
 8003d5e:	6923      	ldr	r3, [r4, #16]
 8003d60:	b90b      	cbnz	r3, 8003d66 <HAL_UART_Transmit+0x40>
 8003d62:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8003d64:	461e      	mov	r6, r3
    while (huart->TxXferCount > 0U)
 8003d66:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	b953      	cbnz	r3, 8003d82 <HAL_UART_Transmit+0x5c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d6c:	464b      	mov	r3, r9
 8003d6e:	4642      	mov	r2, r8
 8003d70:	2140      	movs	r1, #64	; 0x40
 8003d72:	4620      	mov	r0, r4
 8003d74:	f7ff ff72 	bl	8003c5c <UART_WaitOnFlagUntilTimeout.constprop.0>
 8003d78:	b950      	cbnz	r0, 8003d90 <HAL_UART_Transmit+0x6a>
    huart->gState = HAL_UART_STATE_READY;
 8003d7a:	2320      	movs	r3, #32
 8003d7c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    return HAL_OK;
 8003d80:	e007      	b.n	8003d92 <HAL_UART_Transmit+0x6c>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d82:	464b      	mov	r3, r9
 8003d84:	4642      	mov	r2, r8
 8003d86:	2180      	movs	r1, #128	; 0x80
 8003d88:	4620      	mov	r0, r4
 8003d8a:	f7ff ff67 	bl	8003c5c <UART_WaitOnFlagUntilTimeout.constprop.0>
 8003d8e:	b110      	cbz	r0, 8003d96 <HAL_UART_Transmit+0x70>
        return HAL_TIMEOUT;
 8003d90:	2003      	movs	r0, #3
}
 8003d92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d96:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8003d98:	b94e      	cbnz	r6, 8003dae <HAL_UART_Transmit+0x88>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d9a:	f835 3b02 	ldrh.w	r3, [r5], #2
 8003d9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003da2:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8003da4:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 8003da6:	3901      	subs	r1, #1
 8003da8:	b289      	uxth	r1, r1
 8003daa:	84e1      	strh	r1, [r4, #38]	; 0x26
 8003dac:	e7db      	b.n	8003d66 <HAL_UART_Transmit+0x40>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003dae:	f816 3b01 	ldrb.w	r3, [r6], #1
 8003db2:	e7f6      	b.n	8003da2 <HAL_UART_Transmit+0x7c>
    return HAL_BUSY;
 8003db4:	2002      	movs	r0, #2
 8003db6:	e7ec      	b.n	8003d92 <HAL_UART_Transmit+0x6c>
      return  HAL_ERROR;
 8003db8:	2001      	movs	r0, #1
 8003dba:	e7ea      	b.n	8003d92 <HAL_UART_Transmit+0x6c>

08003dbc <HAL_UART_Receive>:
{
 8003dbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003dc0:	461f      	mov	r7, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 8003dc2:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
{
 8003dc6:	4604      	mov	r4, r0
  if (huart->RxState == HAL_UART_STATE_READY)
 8003dc8:	2b20      	cmp	r3, #32
{
 8003dca:	460e      	mov	r6, r1
 8003dcc:	4691      	mov	r9, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 8003dce:	d143      	bne.n	8003e58 <HAL_UART_Receive+0x9c>
    if ((pData == NULL) || (Size == 0U))
 8003dd0:	2900      	cmp	r1, #0
 8003dd2:	d043      	beq.n	8003e5c <HAL_UART_Receive+0xa0>
 8003dd4:	2a00      	cmp	r2, #0
 8003dd6:	d041      	beq.n	8003e5c <HAL_UART_Receive+0xa0>
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003dd8:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dda:	2500      	movs	r5, #0
 8003ddc:	6445      	str	r5, [r0, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003dde:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003de2:	6305      	str	r5, [r0, #48]	; 0x30
    tickstart = HAL_GetTick();
 8003de4:	f7fe fd42 	bl	800286c <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003de8:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8003dea:	4680      	mov	r8, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003dec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->RxXferSize = Size;
 8003df0:	f8a4 902c 	strh.w	r9, [r4, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003df4:	f8a4 902e 	strh.w	r9, [r4, #46]	; 0x2e
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003df8:	d103      	bne.n	8003e02 <HAL_UART_Receive+0x46>
 8003dfa:	6923      	ldr	r3, [r4, #16]
 8003dfc:	b90b      	cbnz	r3, 8003e02 <HAL_UART_Receive+0x46>
 8003dfe:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8003e00:	461e      	mov	r6, r3
    while (huart->RxXferCount > 0U)
 8003e02:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
 8003e04:	b280      	uxth	r0, r0
 8003e06:	b920      	cbnz	r0, 8003e12 <HAL_UART_Receive+0x56>
    huart->RxState = HAL_UART_STATE_READY;
 8003e08:	2320      	movs	r3, #32
 8003e0a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
}
 8003e0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003e12:	463b      	mov	r3, r7
 8003e14:	4642      	mov	r2, r8
 8003e16:	2120      	movs	r1, #32
 8003e18:	4620      	mov	r0, r4
 8003e1a:	f7ff ff1f 	bl	8003c5c <UART_WaitOnFlagUntilTimeout.constprop.0>
 8003e1e:	b9f8      	cbnz	r0, 8003e60 <HAL_UART_Receive+0xa4>
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003e20:	6823      	ldr	r3, [r4, #0]
      if (pdata8bits == NULL)
 8003e22:	b94e      	cbnz	r6, 8003e38 <HAL_UART_Receive+0x7c>
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e2a:	f825 3b02 	strh.w	r3, [r5], #2
      huart->RxXferCount--;
 8003e2e:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8003e30:	3b01      	subs	r3, #1
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	85e3      	strh	r3, [r4, #46]	; 0x2e
 8003e36:	e7e4      	b.n	8003e02 <HAL_UART_Receive+0x46>
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003e38:	68a2      	ldr	r2, [r4, #8]
 8003e3a:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8003e3e:	d002      	beq.n	8003e46 <HAL_UART_Receive+0x8a>
 8003e40:	b932      	cbnz	r2, 8003e50 <HAL_UART_Receive+0x94>
 8003e42:	6922      	ldr	r2, [r4, #16]
 8003e44:	b922      	cbnz	r2, 8003e50 <HAL_UART_Receive+0x94>
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003e46:	6859      	ldr	r1, [r3, #4]
 8003e48:	b2c9      	uxtb	r1, r1
 8003e4a:	f806 1b01 	strb.w	r1, [r6], #1
        pdata8bits++;
 8003e4e:	e7ee      	b.n	8003e2e <HAL_UART_Receive+0x72>
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003e50:	6859      	ldr	r1, [r3, #4]
 8003e52:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8003e56:	e7f8      	b.n	8003e4a <HAL_UART_Receive+0x8e>
    return HAL_BUSY;
 8003e58:	2002      	movs	r0, #2
 8003e5a:	e7d8      	b.n	8003e0e <HAL_UART_Receive+0x52>
      return  HAL_ERROR;
 8003e5c:	2001      	movs	r0, #1
 8003e5e:	e7d6      	b.n	8003e0e <HAL_UART_Receive+0x52>
        return HAL_TIMEOUT;
 8003e60:	2003      	movs	r0, #3
 8003e62:	e7d4      	b.n	8003e0e <HAL_UART_Receive+0x52>

08003e64 <FSMC_NORSRAM_Init>:
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8003e64:	680a      	ldr	r2, [r1, #0]
{
 8003e66:	b570      	push	{r4, r5, r6, lr}
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8003e68:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
          FSMC_BCRx_CBURSTRW);

  mask |= FSMC_BCRx_WRAPMOD;
  mask |= 0x00070000U; /* CPSIZE to be defined in CMSIS file */

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8003e6c:	684e      	ldr	r6, [r1, #4]
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8003e6e:	f023 0301 	bic.w	r3, r3, #1
 8003e72:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8003e76:	688b      	ldr	r3, [r1, #8]
  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8003e78:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8003e7c:	2b08      	cmp	r3, #8
 8003e7e:	bf0c      	ite	eq
 8003e80:	2440      	moveq	r4, #64	; 0x40
 8003e82:	2400      	movne	r4, #0
  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8003e84:	4333      	orrs	r3, r6
 8003e86:	68ce      	ldr	r6, [r1, #12]
 8003e88:	4333      	orrs	r3, r6
 8003e8a:	690e      	ldr	r6, [r1, #16]
 8003e8c:	4333      	orrs	r3, r6
 8003e8e:	694e      	ldr	r6, [r1, #20]
 8003e90:	4333      	orrs	r3, r6
 8003e92:	69ce      	ldr	r6, [r1, #28]
 8003e94:	4333      	orrs	r3, r6
 8003e96:	6a0e      	ldr	r6, [r1, #32]
 8003e98:	4333      	orrs	r3, r6
 8003e9a:	6a4e      	ldr	r6, [r1, #36]	; 0x24
 8003e9c:	4333      	orrs	r3, r6
 8003e9e:	6a8e      	ldr	r6, [r1, #40]	; 0x28
 8003ea0:	4333      	orrs	r3, r6
 8003ea2:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 8003ea4:	4333      	orrs	r3, r6
 8003ea6:	6b0e      	ldr	r6, [r1, #48]	; 0x30
 8003ea8:	4333      	orrs	r3, r6
 8003eaa:	698e      	ldr	r6, [r1, #24]
 8003eac:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8003eae:	4333      	orrs	r3, r6
 8003eb0:	430b      	orrs	r3, r1
 8003eb2:	4904      	ldr	r1, [pc, #16]	; (8003ec4 <FSMC_NORSRAM_Init+0x60>)
 8003eb4:	4029      	ands	r1, r5
 8003eb6:	430b      	orrs	r3, r1
 8003eb8:	4323      	orrs	r3, r4
 8003eba:	f840 3022 	str.w	r3, [r0, r2, lsl #2]


  return HAL_OK;
}
 8003ebe:	2000      	movs	r0, #0
 8003ec0:	bd70      	pop	{r4, r5, r6, pc}
 8003ec2:	bf00      	nop
 8003ec4:	fff00080 	.word	0xfff00080

08003ec8 <FSMC_NORSRAM_Timing_Init>:
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8003ec8:	680b      	ldr	r3, [r1, #0]
{
 8003eca:	b510      	push	{r4, lr}
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8003ecc:	698c      	ldr	r4, [r1, #24]
 8003ece:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003ed2:	4323      	orrs	r3, r4
 8003ed4:	684c      	ldr	r4, [r1, #4]
 8003ed6:	6850      	ldr	r0, [r2, #4]
 8003ed8:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 8003edc:	688c      	ldr	r4, [r1, #8]
 8003ede:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8003ee2:	68cc      	ldr	r4, [r1, #12]
 8003ee4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8003ee8:	690c      	ldr	r4, [r1, #16]
 8003eea:	6949      	ldr	r1, [r1, #20]
 8003eec:	3c01      	subs	r4, #1
 8003eee:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
 8003ef2:	3902      	subs	r1, #2
 8003ef4:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003ef8:	f000 4140 	and.w	r1, r0, #3221225472	; 0xc0000000
 8003efc:	430b      	orrs	r3, r1
                                                       (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  return HAL_OK;
}
 8003efe:	2000      	movs	r0, #0
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8003f00:	6053      	str	r3, [r2, #4]
}
 8003f02:	bd10      	pop	{r4, pc}

08003f04 <FSMC_NORSRAM_Extended_Timing_Init>:
{
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8003f04:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
{
 8003f08:	b530      	push	{r4, r5, lr}
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8003f0a:	d114      	bne.n	8003f36 <FSMC_NORSRAM_Extended_Timing_Init+0x32>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FSMC_BWTRx_BUSTURN)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8003f0c:	698d      	ldr	r5, [r1, #24]
 8003f0e:	680b      	ldr	r3, [r1, #0]
 8003f10:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
 8003f14:	432b      	orrs	r3, r5
 8003f16:	684d      	ldr	r5, [r1, #4]
 8003f18:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 8003f1c:	688d      	ldr	r5, [r1, #8]
 8003f1e:	68c9      	ldr	r1, [r1, #12]
 8003f20:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8003f24:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8003f28:	4904      	ldr	r1, [pc, #16]	; (8003f3c <FSMC_NORSRAM_Extended_Timing_Init+0x38>)
 8003f2a:	4021      	ands	r1, r4
 8003f2c:	430b      	orrs	r3, r1
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* FSMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8003f2e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 8003f32:	2000      	movs	r0, #0
 8003f34:	bd30      	pop	{r4, r5, pc}
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8003f36:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8003f3a:	e7f8      	b.n	8003f2e <FSMC_NORSRAM_Extended_Timing_Init+0x2a>
 8003f3c:	cff00000 	.word	0xcff00000

08003f40 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8003f40:	b084      	sub	sp, #16
 8003f42:	b510      	push	{r4, lr}
 8003f44:	ac03      	add	r4, sp, #12
 8003f46:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8003f4a:	460b      	mov	r3, r1
 8003f4c:	9904      	ldr	r1, [sp, #16]
             Init.HardwareFlowControl |\
             Init.ClockDiv
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8003f4e:	6842      	ldr	r2, [r0, #4]
  tmpreg |= (Init.ClockEdge           |\
 8003f50:	430b      	orrs	r3, r1
             Init.ClockBypass         |\
 8003f52:	9905      	ldr	r1, [sp, #20]
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8003f54:	f422 42fd 	bic.w	r2, r2, #32384	; 0x7e80
             Init.ClockBypass         |\
 8003f58:	430b      	orrs	r3, r1
             Init.ClockPowerSave      |\
 8003f5a:	9906      	ldr	r1, [sp, #24]
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8003f5c:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
             Init.ClockPowerSave      |\
 8003f60:	430b      	orrs	r3, r1
             Init.BusWide             |\
 8003f62:	9907      	ldr	r1, [sp, #28]
 8003f64:	430b      	orrs	r3, r1
             Init.HardwareFlowControl |\
 8003f66:	9908      	ldr	r1, [sp, #32]

  return HAL_OK;
}
 8003f68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
             Init.HardwareFlowControl |\
 8003f6c:	430b      	orrs	r3, r1
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	6043      	str	r3, [r0, #4]
}
 8003f72:	b004      	add	sp, #16
 8003f74:	2000      	movs	r0, #0
 8003f76:	4770      	bx	lr

08003f78 <SDIO_ReadFIFO>:
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8003f78:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 8003f7c:	4770      	bx	lr

08003f7e <SDIO_WriteFIFO>:
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8003f7e:	680b      	ldr	r3, [r1, #0]
 8003f80:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80

  return HAL_OK;
}
 8003f84:	2000      	movs	r0, #0
 8003f86:	4770      	bx	lr

08003f88 <SDIO_PowerState_ON>:
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8003f88:	2303      	movs	r3, #3
 8003f8a:	6003      	str	r3, [r0, #0]

  return HAL_OK;
}
 8003f8c:	2000      	movs	r0, #0
 8003f8e:	4770      	bx	lr

08003f90 <SDIO_GetPowerState>:
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8003f90:	6800      	ldr	r0, [r0, #0]
}
 8003f92:	f000 0003 	and.w	r0, r0, #3
 8003f96:	4770      	bx	lr

08003f98 <SDIO_SendCommand>:
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8003f98:	680b      	ldr	r3, [r1, #0]
{
 8003f9a:	b510      	push	{r4, lr}
  SDIOx->ARG = Command->Argument;
 8003f9c:	6083      	str	r3, [r0, #8]
                       Command->Response         |\
                       Command->WaitForInterrupt |\
                       Command->CPSM);
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003f9e:	68c2      	ldr	r2, [r0, #12]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003fa0:	e9d1 3401 	ldrd	r3, r4, [r1, #4]
 8003fa4:	4323      	orrs	r3, r4
                       Command->Response         |\
 8003fa6:	68cc      	ldr	r4, [r1, #12]
                       Command->WaitForInterrupt |\
 8003fa8:	6909      	ldr	r1, [r1, #16]
                       Command->Response         |\
 8003faa:	4323      	orrs	r3, r4
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003fac:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
                       Command->WaitForInterrupt |\
 8003fb0:	430b      	orrs	r3, r1
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003fb2:	f022 020f 	bic.w	r2, r2, #15
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	60c3      	str	r3, [r0, #12]
  
  return HAL_OK;  
}
 8003fba:	2000      	movs	r0, #0
 8003fbc:	bd10      	pop	{r4, pc}

08003fbe <SDIO_GetResponse>:

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8003fbe:	3014      	adds	r0, #20
  
  return (*(__IO uint32_t *) tmp);
 8003fc0:	5840      	ldr	r0, [r0, r1]
}  
 8003fc2:	4770      	bx	lr

08003fc4 <SDIO_ConfigData>:
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8003fc4:	680b      	ldr	r3, [r1, #0]
{
 8003fc6:	b510      	push	{r4, lr}
  SDIOx->DTIMER = Data->DataTimeOut;
 8003fc8:	6243      	str	r3, [r0, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8003fca:	684b      	ldr	r3, [r1, #4]
 8003fcc:	6283      	str	r3, [r0, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003fce:	e9d1 3402 	ldrd	r3, r4, [r1, #8]
 8003fd2:	4323      	orrs	r3, r4
                       Data->TransferDir   |\
 8003fd4:	690c      	ldr	r4, [r1, #16]
                       Data->TransferMode  |\
                       Data->DPSM);
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8003fd6:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
                       Data->TransferMode  |\
 8003fd8:	6949      	ldr	r1, [r1, #20]
                       Data->TransferDir   |\
 8003fda:	4323      	orrs	r3, r4
                       Data->TransferMode  |\
 8003fdc:	430b      	orrs	r3, r1
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8003fde:	f022 02f7 	bic.w	r2, r2, #247	; 0xf7
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	62c3      	str	r3, [r0, #44]	; 0x2c

  return HAL_OK;

}
 8003fe6:	2000      	movs	r0, #0
 8003fe8:	bd10      	pop	{r4, pc}
	...

08003fec <SDMMC_CmdGoIdleState>:
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8003fec:	2300      	movs	r3, #0
{
 8003fee:	b510      	push	{r4, lr}
 8003ff0:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8003ff2:	e9cd 3301 	strd	r3, r3, [sp, #4]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003ff6:	e9cd 3303 	strd	r3, r3, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003ffa:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003ffe:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004000:	9305      	str	r3, [sp, #20]
{
 8004002:	4604      	mov	r4, r0
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004004:	f7ff ffc8 	bl	8003f98 <SDIO_SendCommand>
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004008:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800400c:	4b09      	ldr	r3, [pc, #36]	; (8004034 <SDMMC_CmdGoIdleState+0x48>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	fbb3 f3f2 	udiv	r3, r3, r2
 8004014:	f241 3288 	movw	r2, #5000	; 0x1388
 8004018:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0U)
 800401a:	3b01      	subs	r3, #1
 800401c:	d307      	bcc.n	800402e <SDMMC_CmdGoIdleState+0x42>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800401e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8004020:	0612      	lsls	r2, r2, #24
 8004022:	d5fa      	bpl.n	800401a <SDMMC_CmdGoIdleState+0x2e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004024:	23c5      	movs	r3, #197	; 0xc5
  
  return SDMMC_ERROR_NONE;
 8004026:	2000      	movs	r0, #0
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004028:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800402a:	b006      	add	sp, #24
 800402c:	bd10      	pop	{r4, pc}
      return SDMMC_ERROR_TIMEOUT;
 800402e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  return errorstate;
 8004032:	e7fa      	b.n	800402a <SDMMC_CmdGoIdleState+0x3e>
 8004034:	20000000 	.word	0x20000000

08004038 <SDMMC_GetCmdResp1>:
{
 8004038:	b510      	push	{r4, lr}
 800403a:	4604      	mov	r4, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800403c:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8004040:	4b43      	ldr	r3, [pc, #268]	; (8004150 <SDMMC_GetCmdResp1+0x118>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	fbb3 f3f0 	udiv	r3, r3, r0
 8004048:	435a      	muls	r2, r3
    if (count-- == 0U)
 800404a:	2a00      	cmp	r2, #0
 800404c:	d049      	beq.n	80040e2 <SDMMC_GetCmdResp1+0xaa>
    sta_reg = SDIOx->STA;
 800404e:	6b63      	ldr	r3, [r4, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004050:	f013 0f45 	tst.w	r3, #69	; 0x45
 8004054:	d007      	beq.n	8004066 <SDMMC_GetCmdResp1+0x2e>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004056:	051b      	lsls	r3, r3, #20
 8004058:	d405      	bmi.n	8004066 <SDMMC_GetCmdResp1+0x2e>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800405a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800405c:	0758      	lsls	r0, r3, #29
 800405e:	d504      	bpl.n	800406a <SDMMC_GetCmdResp1+0x32>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004060:	2004      	movs	r0, #4
 8004062:	63a0      	str	r0, [r4, #56]	; 0x38
}
 8004064:	bd10      	pop	{r4, pc}
 8004066:	3a01      	subs	r2, #1
 8004068:	e7ef      	b.n	800404a <SDMMC_GetCmdResp1+0x12>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800406a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800406c:	f010 0001 	ands.w	r0, r0, #1
 8004070:	d002      	beq.n	8004078 <SDMMC_GetCmdResp1+0x40>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004072:	2301      	movs	r3, #1
 8004074:	63a3      	str	r3, [r4, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004076:	e7f5      	b.n	8004064 <SDMMC_GetCmdResp1+0x2c>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004078:	23c5      	movs	r3, #197	; 0xc5
 800407a:	63a3      	str	r3, [r4, #56]	; 0x38
  return (uint8_t)(SDIOx->RESPCMD);
 800407c:	6923      	ldr	r3, [r4, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800407e:	b2db      	uxtb	r3, r3
 8004080:	4299      	cmp	r1, r3
 8004082:	d131      	bne.n	80040e8 <SDMMC_GetCmdResp1+0xb0>
  return (*(__IO uint32_t *) tmp);
 8004084:	6963      	ldr	r3, [r4, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8004086:	4833      	ldr	r0, [pc, #204]	; (8004154 <SDMMC_GetCmdResp1+0x11c>)
 8004088:	4018      	ands	r0, r3
 800408a:	2800      	cmp	r0, #0
 800408c:	d0ea      	beq.n	8004064 <SDMMC_GetCmdResp1+0x2c>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800408e:	2b00      	cmp	r3, #0
 8004090:	db2c      	blt.n	80040ec <SDMMC_GetCmdResp1+0xb4>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8004092:	005a      	lsls	r2, r3, #1
 8004094:	d42d      	bmi.n	80040f2 <SDMMC_GetCmdResp1+0xba>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8004096:	009c      	lsls	r4, r3, #2
 8004098:	d42d      	bmi.n	80040f6 <SDMMC_GetCmdResp1+0xbe>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800409a:	00d9      	lsls	r1, r3, #3
 800409c:	d42d      	bmi.n	80040fa <SDMMC_GetCmdResp1+0xc2>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800409e:	011a      	lsls	r2, r3, #4
 80040a0:	d42e      	bmi.n	8004100 <SDMMC_GetCmdResp1+0xc8>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80040a2:	015c      	lsls	r4, r3, #5
 80040a4:	d42f      	bmi.n	8004106 <SDMMC_GetCmdResp1+0xce>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80040a6:	01d9      	lsls	r1, r3, #7
 80040a8:	d430      	bmi.n	800410c <SDMMC_GetCmdResp1+0xd4>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80040aa:	021a      	lsls	r2, r3, #8
 80040ac:	d431      	bmi.n	8004112 <SDMMC_GetCmdResp1+0xda>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80040ae:	025c      	lsls	r4, r3, #9
 80040b0:	d432      	bmi.n	8004118 <SDMMC_GetCmdResp1+0xe0>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80040b2:	0299      	lsls	r1, r3, #10
 80040b4:	d433      	bmi.n	800411e <SDMMC_GetCmdResp1+0xe6>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80040b6:	02da      	lsls	r2, r3, #11
 80040b8:	d434      	bmi.n	8004124 <SDMMC_GetCmdResp1+0xec>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80040ba:	035c      	lsls	r4, r3, #13
 80040bc:	d435      	bmi.n	800412a <SDMMC_GetCmdResp1+0xf2>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80040be:	0399      	lsls	r1, r3, #14
 80040c0:	d436      	bmi.n	8004130 <SDMMC_GetCmdResp1+0xf8>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80040c2:	03da      	lsls	r2, r3, #15
 80040c4:	d437      	bmi.n	8004136 <SDMMC_GetCmdResp1+0xfe>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80040c6:	041c      	lsls	r4, r3, #16
 80040c8:	d438      	bmi.n	800413c <SDMMC_GetCmdResp1+0x104>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80040ca:	0459      	lsls	r1, r3, #17
 80040cc:	d439      	bmi.n	8004142 <SDMMC_GetCmdResp1+0x10a>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80040ce:	049a      	lsls	r2, r3, #18
 80040d0:	d43a      	bmi.n	8004148 <SDMMC_GetCmdResp1+0x110>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80040d2:	f013 0f08 	tst.w	r3, #8
 80040d6:	bf14      	ite	ne
 80040d8:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 80040dc:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 80040e0:	e7c0      	b.n	8004064 <SDMMC_GetCmdResp1+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 80040e2:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80040e6:	e7bd      	b.n	8004064 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80040e8:	2001      	movs	r0, #1
 80040ea:	e7bb      	b.n	8004064 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80040ec:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 80040f0:	e7b8      	b.n	8004064 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80040f2:	2040      	movs	r0, #64	; 0x40
 80040f4:	e7b6      	b.n	8004064 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80040f6:	2080      	movs	r0, #128	; 0x80
 80040f8:	e7b4      	b.n	8004064 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80040fa:	f44f 7080 	mov.w	r0, #256	; 0x100
 80040fe:	e7b1      	b.n	8004064 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8004100:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004104:	e7ae      	b.n	8004064 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8004106:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800410a:	e7ab      	b.n	8004064 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800410c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004110:	e7a8      	b.n	8004064 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004112:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004116:	e7a5      	b.n	8004064 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004118:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800411c:	e7a2      	b.n	8004064 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800411e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004122:	e79f      	b.n	8004064 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CC_ERR;
 8004124:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004128:	e79c      	b.n	8004064 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800412a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800412e:	e799      	b.n	8004064 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8004130:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8004134:	e796      	b.n	8004064 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8004136:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800413a:	e793      	b.n	8004064 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800413c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8004140:	e790      	b.n	8004064 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8004142:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8004146:	e78d      	b.n	8004064 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ERASE_RESET;
 8004148:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800414c:	e78a      	b.n	8004064 <SDMMC_GetCmdResp1+0x2c>
 800414e:	bf00      	nop
 8004150:	20000000 	.word	0x20000000
 8004154:	fdffe008 	.word	0xfdffe008

08004158 <SDMMC_CmdBlockLength>:
{
 8004158:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800415a:	2340      	movs	r3, #64	; 0x40
 800415c:	2510      	movs	r5, #16
{
 800415e:	b087      	sub	sp, #28
 8004160:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004162:	2200      	movs	r2, #0
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004164:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004168:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800416c:	9101      	str	r1, [sp, #4]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800416e:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004170:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004174:	f7ff ff10 	bl	8003f98 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8004178:	f241 3288 	movw	r2, #5000	; 0x1388
 800417c:	4629      	mov	r1, r5
 800417e:	4620      	mov	r0, r4
 8004180:	f7ff ff5a 	bl	8004038 <SDMMC_GetCmdResp1>
}
 8004184:	b007      	add	sp, #28
 8004186:	bd30      	pop	{r4, r5, pc}

08004188 <SDMMC_CmdReadSingleBlock>:
{
 8004188:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800418a:	2340      	movs	r3, #64	; 0x40
 800418c:	2511      	movs	r5, #17
{
 800418e:	b087      	sub	sp, #28
 8004190:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004192:	2200      	movs	r2, #0
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004194:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004198:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800419c:	9101      	str	r1, [sp, #4]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800419e:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80041a0:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80041a4:	f7ff fef8 	bl	8003f98 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80041a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80041ac:	4629      	mov	r1, r5
 80041ae:	4620      	mov	r0, r4
 80041b0:	f7ff ff42 	bl	8004038 <SDMMC_GetCmdResp1>
}
 80041b4:	b007      	add	sp, #28
 80041b6:	bd30      	pop	{r4, r5, pc}

080041b8 <SDMMC_CmdReadMultiBlock>:
{
 80041b8:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80041ba:	2340      	movs	r3, #64	; 0x40
 80041bc:	2512      	movs	r5, #18
{
 80041be:	b087      	sub	sp, #28
 80041c0:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80041c2:	2200      	movs	r2, #0
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80041c4:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80041c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80041cc:	9101      	str	r1, [sp, #4]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80041ce:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80041d0:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80041d4:	f7ff fee0 	bl	8003f98 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80041d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80041dc:	4629      	mov	r1, r5
 80041de:	4620      	mov	r0, r4
 80041e0:	f7ff ff2a 	bl	8004038 <SDMMC_GetCmdResp1>
}
 80041e4:	b007      	add	sp, #28
 80041e6:	bd30      	pop	{r4, r5, pc}

080041e8 <SDMMC_CmdWriteSingleBlock>:
{
 80041e8:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80041ea:	2340      	movs	r3, #64	; 0x40
 80041ec:	2518      	movs	r5, #24
{
 80041ee:	b087      	sub	sp, #28
 80041f0:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80041f2:	2200      	movs	r2, #0
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80041f4:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80041f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80041fc:	9101      	str	r1, [sp, #4]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80041fe:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004200:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004204:	f7ff fec8 	bl	8003f98 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8004208:	f241 3288 	movw	r2, #5000	; 0x1388
 800420c:	4629      	mov	r1, r5
 800420e:	4620      	mov	r0, r4
 8004210:	f7ff ff12 	bl	8004038 <SDMMC_GetCmdResp1>
}
 8004214:	b007      	add	sp, #28
 8004216:	bd30      	pop	{r4, r5, pc}

08004218 <SDMMC_CmdWriteMultiBlock>:
{
 8004218:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800421a:	2340      	movs	r3, #64	; 0x40
 800421c:	2519      	movs	r5, #25
{
 800421e:	b087      	sub	sp, #28
 8004220:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004222:	2200      	movs	r2, #0
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004224:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004228:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800422c:	9101      	str	r1, [sp, #4]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800422e:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004230:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004234:	f7ff feb0 	bl	8003f98 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8004238:	f241 3288 	movw	r2, #5000	; 0x1388
 800423c:	4629      	mov	r1, r5
 800423e:	4620      	mov	r0, r4
 8004240:	f7ff fefa 	bl	8004038 <SDMMC_GetCmdResp1>
}
 8004244:	b007      	add	sp, #28
 8004246:	bd30      	pop	{r4, r5, pc}

08004248 <SDMMC_CmdStopTransfer>:
{
 8004248:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800424a:	2300      	movs	r3, #0
 800424c:	250c      	movs	r5, #12
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800424e:	2240      	movs	r2, #64	; 0x40
{
 8004250:	b087      	sub	sp, #28
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004252:	e9cd 2303 	strd	r2, r3, [sp, #12]
{
 8004256:	4604      	mov	r4, r0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8004258:	e9cd 3501 	strd	r3, r5, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800425c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004260:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004262:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004264:	f7ff fe98 	bl	8003f98 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8004268:	4629      	mov	r1, r5
 800426a:	4620      	mov	r0, r4
 800426c:	4a02      	ldr	r2, [pc, #8]	; (8004278 <SDMMC_CmdStopTransfer+0x30>)
 800426e:	f7ff fee3 	bl	8004038 <SDMMC_GetCmdResp1>
}
 8004272:	b007      	add	sp, #28
 8004274:	bd30      	pop	{r4, r5, pc}
 8004276:	bf00      	nop
 8004278:	05f5e100 	.word	0x05f5e100

0800427c <SDMMC_CmdSelDesel>:
{
 800427c:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800427e:	2340      	movs	r3, #64	; 0x40
 8004280:	2507      	movs	r5, #7
{
 8004282:	b087      	sub	sp, #28
 8004284:	4604      	mov	r4, r0
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004286:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800428a:	9201      	str	r2, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800428c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004290:	2200      	movs	r2, #0
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004292:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004294:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004298:	f7ff fe7e 	bl	8003f98 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800429c:	f241 3288 	movw	r2, #5000	; 0x1388
 80042a0:	4629      	mov	r1, r5
 80042a2:	4620      	mov	r0, r4
 80042a4:	f7ff fec8 	bl	8004038 <SDMMC_GetCmdResp1>
}
 80042a8:	b007      	add	sp, #28
 80042aa:	bd30      	pop	{r4, r5, pc}

080042ac <SDMMC_CmdAppCommand>:
{
 80042ac:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80042ae:	2340      	movs	r3, #64	; 0x40
 80042b0:	2537      	movs	r5, #55	; 0x37
{
 80042b2:	b087      	sub	sp, #28
 80042b4:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80042b6:	2200      	movs	r2, #0
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80042b8:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80042bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80042c0:	9101      	str	r1, [sp, #4]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80042c2:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80042c4:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80042c8:	f7ff fe66 	bl	8003f98 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80042cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80042d0:	4629      	mov	r1, r5
 80042d2:	4620      	mov	r0, r4
 80042d4:	f7ff feb0 	bl	8004038 <SDMMC_GetCmdResp1>
}
 80042d8:	b007      	add	sp, #28
 80042da:	bd30      	pop	{r4, r5, pc}

080042dc <SDMMC_CmdSendStatus>:
{
 80042dc:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80042de:	2340      	movs	r3, #64	; 0x40
 80042e0:	250d      	movs	r5, #13
{
 80042e2:	b087      	sub	sp, #28
 80042e4:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80042e6:	2200      	movs	r2, #0
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80042e8:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80042ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.Argument         = Argument;
 80042f0:	9101      	str	r1, [sp, #4]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80042f2:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80042f4:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80042f8:	f7ff fe4e 	bl	8003f98 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80042fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004300:	4629      	mov	r1, r5
 8004302:	4620      	mov	r0, r4
 8004304:	f7ff fe98 	bl	8004038 <SDMMC_GetCmdResp1>
}
 8004308:	b007      	add	sp, #28
 800430a:	bd30      	pop	{r4, r5, pc}

0800430c <SDMMC_GetCmdResp2>:
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800430c:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8004310:	4b10      	ldr	r3, [pc, #64]	; (8004354 <SDMMC_GetCmdResp2+0x48>)
{
 8004312:	4602      	mov	r2, r0
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	fbb3 f3f1 	udiv	r3, r3, r1
 800431a:	f241 3188 	movw	r1, #5000	; 0x1388
 800431e:	434b      	muls	r3, r1
    if (count-- == 0U)
 8004320:	3b01      	subs	r3, #1
 8004322:	d313      	bcc.n	800434c <SDMMC_GetCmdResp2+0x40>
    sta_reg = SDIOx->STA;
 8004324:	6b51      	ldr	r1, [r2, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004326:	f011 0f45 	tst.w	r1, #69	; 0x45
 800432a:	d0f9      	beq.n	8004320 <SDMMC_GetCmdResp2+0x14>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800432c:	0509      	lsls	r1, r1, #20
 800432e:	d4f7      	bmi.n	8004320 <SDMMC_GetCmdResp2+0x14>
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004330:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8004332:	075b      	lsls	r3, r3, #29
 8004334:	d502      	bpl.n	800433c <SDMMC_GetCmdResp2+0x30>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004336:	2004      	movs	r0, #4
 8004338:	6390      	str	r0, [r2, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800433a:	4770      	bx	lr
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800433c:	6b50      	ldr	r0, [r2, #52]	; 0x34
 800433e:	f010 0001 	ands.w	r0, r0, #1
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004342:	bf14      	ite	ne
 8004344:	2301      	movne	r3, #1
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004346:	23c5      	moveq	r3, #197	; 0xc5
 8004348:	6393      	str	r3, [r2, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 800434a:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 800434c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8004350:	4770      	bx	lr
 8004352:	bf00      	nop
 8004354:	20000000 	.word	0x20000000

08004358 <SDMMC_CmdSendCID>:
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8004358:	2300      	movs	r3, #0
 800435a:	2202      	movs	r2, #2
{
 800435c:	b510      	push	{r4, lr}
 800435e:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8004360:	e9cd 3201 	strd	r3, r2, [sp, #4]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004364:	22c0      	movs	r2, #192	; 0xc0
{
 8004366:	4604      	mov	r4, r0
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004368:	e9cd 2303 	strd	r2, r3, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800436c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004370:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004372:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004374:	f7ff fe10 	bl	8003f98 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8004378:	4620      	mov	r0, r4
 800437a:	f7ff ffc7 	bl	800430c <SDMMC_GetCmdResp2>
}
 800437e:	b006      	add	sp, #24
 8004380:	bd10      	pop	{r4, pc}

08004382 <SDMMC_CmdSendCSD>:
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004382:	2209      	movs	r2, #9
 8004384:	23c0      	movs	r3, #192	; 0xc0
{
 8004386:	b510      	push	{r4, lr}
 8004388:	b086      	sub	sp, #24
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800438a:	e9cd 2302 	strd	r2, r3, [sp, #8]
  sdmmc_cmdinit.Argument         = Argument;
 800438e:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004390:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004394:	2100      	movs	r1, #0
{
 8004396:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004398:	e9cd 1304 	strd	r1, r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800439c:	a901      	add	r1, sp, #4
 800439e:	f7ff fdfb 	bl	8003f98 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80043a2:	4620      	mov	r0, r4
 80043a4:	f7ff ffb2 	bl	800430c <SDMMC_GetCmdResp2>
}
 80043a8:	b006      	add	sp, #24
 80043aa:	bd10      	pop	{r4, pc}

080043ac <SDMMC_GetCmdResp3>:
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80043ac:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 80043b0:	4b0d      	ldr	r3, [pc, #52]	; (80043e8 <SDMMC_GetCmdResp3+0x3c>)
{
 80043b2:	4602      	mov	r2, r0
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80043ba:	f241 3188 	movw	r1, #5000	; 0x1388
 80043be:	434b      	muls	r3, r1
    if (count-- == 0U)
 80043c0:	3b01      	subs	r3, #1
 80043c2:	d30e      	bcc.n	80043e2 <SDMMC_GetCmdResp3+0x36>
    sta_reg = SDIOx->STA;
 80043c4:	6b51      	ldr	r1, [r2, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80043c6:	f011 0f45 	tst.w	r1, #69	; 0x45
 80043ca:	d0f9      	beq.n	80043c0 <SDMMC_GetCmdResp3+0x14>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80043cc:	0509      	lsls	r1, r1, #20
 80043ce:	d4f7      	bmi.n	80043c0 <SDMMC_GetCmdResp3+0x14>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80043d0:	6b50      	ldr	r0, [r2, #52]	; 0x34
 80043d2:	f010 0004 	ands.w	r0, r0, #4
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80043d6:	bf15      	itete	ne
 80043d8:	2004      	movne	r0, #4
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80043da:	23c5      	moveq	r3, #197	; 0xc5
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80043dc:	6390      	strne	r0, [r2, #56]	; 0x38
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80043de:	6393      	streq	r3, [r2, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 80043e0:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 80043e2:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80043e6:	4770      	bx	lr
 80043e8:	20000000 	.word	0x20000000

080043ec <SDMMC_CmdAppOperCommand>:
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80043ec:	2229      	movs	r2, #41	; 0x29
 80043ee:	2340      	movs	r3, #64	; 0x40
{
 80043f0:	b510      	push	{r4, lr}
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80043f2:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
{
 80043f6:	b086      	sub	sp, #24
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80043f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80043fc:	e9cd 2302 	strd	r2, r3, [sp, #8]
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8004400:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004402:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004406:	2100      	movs	r1, #0
{
 8004408:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800440a:	e9cd 1304 	strd	r1, r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800440e:	a901      	add	r1, sp, #4
 8004410:	f7ff fdc2 	bl	8003f98 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8004414:	4620      	mov	r0, r4
 8004416:	f7ff ffc9 	bl	80043ac <SDMMC_GetCmdResp3>
}
 800441a:	b006      	add	sp, #24
 800441c:	bd10      	pop	{r4, pc}
	...

08004420 <SDMMC_GetCmdResp6>:
{
 8004420:	b510      	push	{r4, lr}
 8004422:	4604      	mov	r4, r0
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004424:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8004428:	4b1d      	ldr	r3, [pc, #116]	; (80044a0 <SDMMC_GetCmdResp6+0x80>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	fbb3 f3f0 	udiv	r3, r3, r0
 8004430:	f241 3088 	movw	r0, #5000	; 0x1388
 8004434:	4343      	muls	r3, r0
    if (count-- == 0U)
 8004436:	3b01      	subs	r3, #1
 8004438:	d329      	bcc.n	800448e <SDMMC_GetCmdResp6+0x6e>
    sta_reg = SDIOx->STA;
 800443a:	6b60      	ldr	r0, [r4, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800443c:	f010 0f45 	tst.w	r0, #69	; 0x45
 8004440:	d0f9      	beq.n	8004436 <SDMMC_GetCmdResp6+0x16>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004442:	0500      	lsls	r0, r0, #20
 8004444:	d4f7      	bmi.n	8004436 <SDMMC_GetCmdResp6+0x16>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004446:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004448:	0758      	lsls	r0, r3, #29
 800444a:	d502      	bpl.n	8004452 <SDMMC_GetCmdResp6+0x32>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800444c:	2004      	movs	r0, #4
 800444e:	63a0      	str	r0, [r4, #56]	; 0x38
}
 8004450:	bd10      	pop	{r4, pc}
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004452:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8004454:	f010 0001 	ands.w	r0, r0, #1
 8004458:	d002      	beq.n	8004460 <SDMMC_GetCmdResp6+0x40>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800445a:	2301      	movs	r3, #1
 800445c:	63a3      	str	r3, [r4, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800445e:	e7f7      	b.n	8004450 <SDMMC_GetCmdResp6+0x30>
  return (uint8_t)(SDIOx->RESPCMD);
 8004460:	6923      	ldr	r3, [r4, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8004462:	b2db      	uxtb	r3, r3
 8004464:	4299      	cmp	r1, r3
 8004466:	d115      	bne.n	8004494 <SDMMC_GetCmdResp6+0x74>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004468:	23c5      	movs	r3, #197	; 0xc5
 800446a:	63a3      	str	r3, [r4, #56]	; 0x38
  return (*(__IO uint32_t *) tmp);
 800446c:	6963      	ldr	r3, [r4, #20]
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800446e:	f413 4060 	ands.w	r0, r3, #57344	; 0xe000
 8004472:	d102      	bne.n	800447a <SDMMC_GetCmdResp6+0x5a>
    *pRCA = (uint16_t) (response_r1 >> 16);
 8004474:	0c1b      	lsrs	r3, r3, #16
 8004476:	8013      	strh	r3, [r2, #0]
    return SDMMC_ERROR_NONE;
 8004478:	e7ea      	b.n	8004450 <SDMMC_GetCmdResp6+0x30>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800447a:	045a      	lsls	r2, r3, #17
 800447c:	d40c      	bmi.n	8004498 <SDMMC_GetCmdResp6+0x78>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800447e:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8004482:	bf14      	ite	ne
 8004484:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 8004488:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800448c:	e7e0      	b.n	8004450 <SDMMC_GetCmdResp6+0x30>
      return SDMMC_ERROR_TIMEOUT;
 800448e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8004492:	e7dd      	b.n	8004450 <SDMMC_GetCmdResp6+0x30>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004494:	2001      	movs	r0, #1
 8004496:	e7db      	b.n	8004450 <SDMMC_GetCmdResp6+0x30>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004498:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800449c:	e7d8      	b.n	8004450 <SDMMC_GetCmdResp6+0x30>
 800449e:	bf00      	nop
 80044a0:	20000000 	.word	0x20000000

080044a4 <SDMMC_CmdSetRelAdd>:
{
 80044a4:	b570      	push	{r4, r5, r6, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80044a6:	2300      	movs	r3, #0
 80044a8:	2603      	movs	r6, #3
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80044aa:	2240      	movs	r2, #64	; 0x40
{
 80044ac:	b086      	sub	sp, #24
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80044ae:	e9cd 2303 	strd	r2, r3, [sp, #12]
{
 80044b2:	4604      	mov	r4, r0
 80044b4:	460d      	mov	r5, r1
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80044b6:	e9cd 3601 	strd	r3, r6, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80044ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80044be:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80044c0:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80044c2:	f7ff fd69 	bl	8003f98 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80044c6:	462a      	mov	r2, r5
 80044c8:	4631      	mov	r1, r6
 80044ca:	4620      	mov	r0, r4
 80044cc:	f7ff ffa8 	bl	8004420 <SDMMC_GetCmdResp6>
}
 80044d0:	b006      	add	sp, #24
 80044d2:	bd70      	pop	{r4, r5, r6, pc}

080044d4 <SDMMC_GetCmdResp7>:
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80044d4:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 80044d8:	4b12      	ldr	r3, [pc, #72]	; (8004524 <SDMMC_GetCmdResp7+0x50>)
{
 80044da:	4602      	mov	r2, r0
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	fbb3 f3f1 	udiv	r3, r3, r1
 80044e2:	f241 3188 	movw	r1, #5000	; 0x1388
 80044e6:	434b      	muls	r3, r1
    if (count-- == 0U)
 80044e8:	3b01      	subs	r3, #1
 80044ea:	d317      	bcc.n	800451c <SDMMC_GetCmdResp7+0x48>
    sta_reg = SDIOx->STA;
 80044ec:	6b51      	ldr	r1, [r2, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80044ee:	f011 0f45 	tst.w	r1, #69	; 0x45
 80044f2:	d0f9      	beq.n	80044e8 <SDMMC_GetCmdResp7+0x14>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80044f4:	0508      	lsls	r0, r1, #20
 80044f6:	d4f7      	bmi.n	80044e8 <SDMMC_GetCmdResp7+0x14>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80044f8:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80044fa:	0759      	lsls	r1, r3, #29
 80044fc:	d502      	bpl.n	8004504 <SDMMC_GetCmdResp7+0x30>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80044fe:	2004      	movs	r0, #4
 8004500:	6390      	str	r0, [r2, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004502:	4770      	bx	lr
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004504:	6b50      	ldr	r0, [r2, #52]	; 0x34
 8004506:	f010 0001 	ands.w	r0, r0, #1
 800450a:	d002      	beq.n	8004512 <SDMMC_GetCmdResp7+0x3e>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800450c:	2301      	movs	r3, #1
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800450e:	6393      	str	r3, [r2, #56]	; 0x38
 8004510:	4770      	bx	lr
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8004512:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8004514:	065b      	lsls	r3, r3, #25
 8004516:	d503      	bpl.n	8004520 <SDMMC_GetCmdResp7+0x4c>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8004518:	2340      	movs	r3, #64	; 0x40
 800451a:	e7f8      	b.n	800450e <SDMMC_GetCmdResp7+0x3a>
      return SDMMC_ERROR_TIMEOUT;
 800451c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8004520:	4770      	bx	lr
 8004522:	bf00      	nop
 8004524:	20000000 	.word	0x20000000

08004528 <SDMMC_CmdOperCond>:
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8004528:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800452c:	2308      	movs	r3, #8
{
 800452e:	b510      	push	{r4, lr}
 8004530:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8004532:	e9cd 2301 	strd	r2, r3, [sp, #4]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004536:	2140      	movs	r1, #64	; 0x40
 8004538:	2300      	movs	r3, #0
{
 800453a:	4604      	mov	r4, r0
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800453c:	e9cd 1303 	strd	r1, r3, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004540:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004544:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004546:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004548:	f7ff fd26 	bl	8003f98 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800454c:	4620      	mov	r0, r4
 800454e:	f7ff ffc1 	bl	80044d4 <SDMMC_GetCmdResp7>
}
 8004552:	b006      	add	sp, #24
 8004554:	bd10      	pop	{r4, pc}
	...

08004558 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004558:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800455a:	4903      	ldr	r1, [pc, #12]	; (8004568 <MX_FATFS_Init+0x10>)
 800455c:	4803      	ldr	r0, [pc, #12]	; (800456c <MX_FATFS_Init+0x14>)
 800455e:	f001 f941 	bl	80057e4 <FATFS_LinkDriver>
 8004562:	4b03      	ldr	r3, [pc, #12]	; (8004570 <MX_FATFS_Init+0x18>)
 8004564:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004566:	bd08      	pop	{r3, pc}
 8004568:	200081d8 	.word	0x200081d8
 800456c:	08008c9c 	.word	0x08008c9c
 8004570:	200081dc 	.word	0x200081dc

08004574 <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */
}
 8004574:	2000      	movs	r0, #0
 8004576:	4770      	bx	lr

08004578 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8004578:	b507      	push	{r0, r1, r2, lr}
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800457a:	9300      	str	r3, [sp, #0]
 800457c:	4613      	mov	r3, r2
 800457e:	460a      	mov	r2, r1
 8004580:	4601      	mov	r1, r0
 8004582:	4804      	ldr	r0, [pc, #16]	; (8004594 <BSP_SD_ReadBlocks+0x1c>)
 8004584:	f7fe fe04 	bl	8003190 <HAL_SD_ReadBlocks>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
 8004588:	3800      	subs	r0, #0
 800458a:	bf18      	it	ne
 800458c:	2001      	movne	r0, #1
 800458e:	b003      	add	sp, #12
 8004590:	f85d fb04 	ldr.w	pc, [sp], #4
 8004594:	20008094 	.word	0x20008094

08004598 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8004598:	b507      	push	{r0, r1, r2, lr}
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800459a:	9300      	str	r3, [sp, #0]
 800459c:	4613      	mov	r3, r2
 800459e:	460a      	mov	r2, r1
 80045a0:	4601      	mov	r1, r0
 80045a2:	4804      	ldr	r0, [pc, #16]	; (80045b4 <BSP_SD_WriteBlocks+0x1c>)
 80045a4:	f7fe fef8 	bl	8003398 <HAL_SD_WriteBlocks>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
 80045a8:	3800      	subs	r0, #0
 80045aa:	bf18      	it	ne
 80045ac:	2001      	movne	r0, #1
 80045ae:	b003      	add	sp, #12
 80045b0:	f85d fb04 	ldr.w	pc, [sp], #4
 80045b4:	20008094 	.word	0x20008094

080045b8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80045b8:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80045ba:	4803      	ldr	r0, [pc, #12]	; (80045c8 <BSP_SD_GetCardState+0x10>)
 80045bc:	f7ff f9a9 	bl	8003912 <HAL_SD_GetCardState>
}
 80045c0:	3804      	subs	r0, #4
 80045c2:	bf18      	it	ne
 80045c4:	2001      	movne	r0, #1
 80045c6:	bd08      	pop	{r3, pc}
 80045c8:	20008094 	.word	0x20008094

080045cc <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80045cc:	4601      	mov	r1, r0
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80045ce:	4801      	ldr	r0, [pc, #4]	; (80045d4 <BSP_SD_GetCardInfo+0x8>)
 80045d0:	f7ff b98d 	b.w	80038ee <HAL_SD_GetCardInfo>
 80045d4:	20008094 	.word	0x20008094

080045d8 <BSP_SD_AbortCallback>:
 80045d8:	4770      	bx	lr

080045da <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 80045da:	b508      	push	{r3, lr}
  BSP_SD_AbortCallback();
 80045dc:	f7ff fffc 	bl	80045d8 <BSP_SD_AbortCallback>
}
 80045e0:	bd08      	pop	{r3, pc}

080045e2 <BSP_SD_WriteCpltCallback>:
 80045e2:	4770      	bx	lr

080045e4 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80045e4:	b508      	push	{r3, lr}
  BSP_SD_WriteCpltCallback();
 80045e6:	f7ff fffc 	bl	80045e2 <BSP_SD_WriteCpltCallback>
}
 80045ea:	bd08      	pop	{r3, pc}

080045ec <BSP_SD_ReadCpltCallback>:
 80045ec:	4770      	bx	lr

080045ee <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80045ee:	b508      	push	{r3, lr}
  BSP_SD_ReadCpltCallback();
 80045f0:	f7ff fffc 	bl	80045ec <BSP_SD_ReadCpltCallback>
}
 80045f4:	bd08      	pop	{r3, pc}

080045f6 <BSP_SD_IsDetected>:
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
  __IO uint8_t status = SD_PRESENT;
 80045f6:	2301      	movs	r3, #1
{
 80045f8:	b507      	push	{r0, r1, r2, lr}
  __IO uint8_t status = SD_PRESENT;
 80045fa:	f88d 3007 	strb.w	r3, [sp, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80045fe:	f000 f817 	bl	8004630 <BSP_PlatformIsDetected>
 8004602:	b908      	cbnz	r0, 8004608 <BSP_SD_IsDetected+0x12>
  {
    status = SD_NOT_PRESENT;
 8004604:	f88d 0007 	strb.w	r0, [sp, #7]
  }

  return status;
 8004608:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 800460c:	b003      	add	sp, #12
 800460e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08004614 <BSP_SD_Init>:
{
 8004614:	b508      	push	{r3, lr}
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8004616:	f7ff ffee 	bl	80045f6 <BSP_SD_IsDetected>
 800461a:	2801      	cmp	r0, #1
 800461c:	d104      	bne.n	8004628 <BSP_SD_Init+0x14>
}
 800461e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sd_state = HAL_SD_Init(&hsd);
 8004622:	4802      	ldr	r0, [pc, #8]	; (800462c <BSP_SD_Init+0x18>)
 8004624:	f7ff b948 	b.w	80038b8 <HAL_SD_Init>
}
 8004628:	2001      	movs	r0, #1
 800462a:	bd08      	pop	{r3, pc}
 800462c:	20008094 	.word	0x20008094

08004630 <BSP_PlatformIsDetected>:
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
    uint8_t status = SD_PRESENT;
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8004630:	f44f 7180 	mov.w	r1, #256	; 0x100
uint8_t	BSP_PlatformIsDetected(void) {
 8004634:	b508      	push	{r3, lr}
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8004636:	4803      	ldr	r0, [pc, #12]	; (8004644 <BSP_PlatformIsDetected+0x14>)
 8004638:	f7fe fb20 	bl	8002c7c <HAL_GPIO_ReadPin>
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
}
 800463c:	fab0 f080 	clz	r0, r0
 8004640:	0940      	lsrs	r0, r0, #5
 8004642:	bd08      	pop	{r3, pc}
 8004644:	40010c00 	.word	0x40010c00

08004648 <disk_status>:
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8004648:	4b03      	ldr	r3, [pc, #12]	; (8004658 <disk_status+0x10>)
 800464a:	181a      	adds	r2, r3, r0
 800464c:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	7a10      	ldrb	r0, [r2, #8]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	4718      	bx	r3
 8004658:	20008200 	.word	0x20008200

0800465c <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;
  
  if(disk.is_initialized[pdrv] == 0)
 800465c:	4b06      	ldr	r3, [pc, #24]	; (8004678 <disk_initialize+0x1c>)
 800465e:	5c1a      	ldrb	r2, [r3, r0]
 8004660:	b942      	cbnz	r2, 8004674 <disk_initialize+0x18>
  { 
    disk.is_initialized[pdrv] = 1;
 8004662:	2201      	movs	r2, #1
 8004664:	541a      	strb	r2, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004666:	181a      	adds	r2, r3, r0
 8004668:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	7a10      	ldrb	r0, [r2, #8]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4718      	bx	r3
  }
  return stat;
}
 8004674:	2000      	movs	r0, #0
 8004676:	4770      	bx	lr
 8004678:	20008200 	.word	0x20008200

0800467c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800467c:	b430      	push	{r4, r5}
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800467e:	4c05      	ldr	r4, [pc, #20]	; (8004694 <disk_read+0x18>)
 8004680:	1825      	adds	r5, r4, r0
 8004682:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8004686:	6860      	ldr	r0, [r4, #4]
 8004688:	6884      	ldr	r4, [r0, #8]
 800468a:	7a28      	ldrb	r0, [r5, #8]
 800468c:	46a4      	mov	ip, r4
  return res;
}
 800468e:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004690:	4760      	bx	ip
 8004692:	bf00      	nop
 8004694:	20008200 	.word	0x20008200

08004698 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004698:	b430      	push	{r4, r5}
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800469a:	4c05      	ldr	r4, [pc, #20]	; (80046b0 <disk_write+0x18>)
 800469c:	1825      	adds	r5, r4, r0
 800469e:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 80046a2:	6860      	ldr	r0, [r4, #4]
 80046a4:	68c4      	ldr	r4, [r0, #12]
 80046a6:	7a28      	ldrb	r0, [r5, #8]
 80046a8:	46a4      	mov	ip, r4
  return res;
}
 80046aa:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80046ac:	4760      	bx	ip
 80046ae:	bf00      	nop
 80046b0:	20008200 	.word	0x20008200

080046b4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80046b4:	b410      	push	{r4}
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80046b6:	4b04      	ldr	r3, [pc, #16]	; (80046c8 <disk_ioctl+0x14>)
 80046b8:	181c      	adds	r4, r3, r0
 80046ba:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	7a20      	ldrb	r0, [r4, #8]
 80046c2:	691b      	ldr	r3, [r3, #16]
  return res;
}
 80046c4:	bc10      	pop	{r4}
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80046c6:	4718      	bx	r3
 80046c8:	20008200 	.word	0x20008200

080046cc <mem_cpy>:
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 80046cc:	3801      	subs	r0, #1
 80046ce:	440a      	add	r2, r1
 80046d0:	4291      	cmp	r1, r2
 80046d2:	d100      	bne.n	80046d6 <mem_cpy+0xa>
		*d++ = *s++;
}
 80046d4:	4770      	bx	lr
		*d++ = *s++;
 80046d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80046da:	f800 3f01 	strb.w	r3, [r0, #1]!
 80046de:	e7f7      	b.n	80046d0 <mem_cpy+0x4>

080046e0 <mem_set>:
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
 80046e0:	4402      	add	r2, r0
 80046e2:	4290      	cmp	r0, r2
 80046e4:	d100      	bne.n	80046e8 <mem_set+0x8>
		*d++ = (BYTE)val;
}
 80046e6:	4770      	bx	lr
		*d++ = (BYTE)val;
 80046e8:	f800 1b01 	strb.w	r1, [r0], #1
 80046ec:	e7f9      	b.n	80046e2 <mem_set+0x2>
	...

080046f0 <chk_lock>:
{
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
		if (Files[i].fs) {	/* Existing entry */
 80046f0:	4a1f      	ldr	r2, [pc, #124]	; (8004770 <chk_lock+0x80>)
{
 80046f2:	4603      	mov	r3, r0
		if (Files[i].fs) {	/* Existing entry */
 80046f4:	6810      	ldr	r0, [r2, #0]
{
 80046f6:	b530      	push	{r4, r5, lr}
		if (Files[i].fs) {	/* Existing entry */
 80046f8:	b178      	cbz	r0, 800471a <chk_lock+0x2a>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 80046fa:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
 80046fe:	4284      	cmp	r4, r0
 8004700:	d109      	bne.n	8004716 <chk_lock+0x26>
 8004702:	6854      	ldr	r4, [r2, #4]
 8004704:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
 8004708:	4284      	cmp	r4, r0
 800470a:	d104      	bne.n	8004716 <chk_lock+0x26>
				Files[i].clu == dp->sclust &&
 800470c:	8914      	ldrh	r4, [r2, #8]
 800470e:	f8b3 0206 	ldrh.w	r0, [r3, #518]	; 0x206
 8004712:	4284      	cmp	r4, r0
 8004714:	d024      	beq.n	8004760 <chk_lock+0x70>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004716:	2400      	movs	r4, #0
 8004718:	e000      	b.n	800471c <chk_lock+0x2c>
				Files[i].idx == dp->index) break;
		} else {			/* Blank entry */
			be = 1;
 800471a:	2401      	movs	r4, #1
		if (Files[i].fs) {	/* Existing entry */
 800471c:	68d0      	ldr	r0, [r2, #12]
 800471e:	b190      	cbz	r0, 8004746 <chk_lock+0x56>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8004720:	f8d3 5200 	ldr.w	r5, [r3, #512]	; 0x200
 8004724:	42a8      	cmp	r0, r5
 8004726:	d109      	bne.n	800473c <chk_lock+0x4c>
 8004728:	6915      	ldr	r5, [r2, #16]
 800472a:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
 800472e:	4285      	cmp	r5, r0
 8004730:	d104      	bne.n	800473c <chk_lock+0x4c>
				Files[i].clu == dp->sclust &&
 8004732:	8a90      	ldrh	r0, [r2, #20]
 8004734:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 8004738:	4298      	cmp	r0, r3
 800473a:	d016      	beq.n	800476a <chk_lock+0x7a>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800473c:	b974      	cbnz	r4, 800475c <chk_lock+0x6c>
 800473e:	2902      	cmp	r1, #2
 8004740:	bf0c      	ite	eq
 8004742:	2000      	moveq	r0, #0
 8004744:	2012      	movne	r0, #18

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
}
 8004746:	bd30      	pop	{r4, r5, pc}
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004748:	210c      	movs	r1, #12
 800474a:	fb01 2303 	mla	r3, r1, r3, r2
 800474e:	895b      	ldrh	r3, [r3, #10]
 8004750:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004754:	bf14      	ite	ne
 8004756:	2000      	movne	r0, #0
 8004758:	2010      	moveq	r0, #16
 800475a:	e7f4      	b.n	8004746 <chk_lock+0x56>
 800475c:	2000      	movs	r0, #0
 800475e:	e7f2      	b.n	8004746 <chk_lock+0x56>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004760:	2300      	movs	r3, #0
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004762:	2900      	cmp	r1, #0
 8004764:	d0f0      	beq.n	8004748 <chk_lock+0x58>
 8004766:	2010      	movs	r0, #16
 8004768:	e7ed      	b.n	8004746 <chk_lock+0x56>
	for (i = be = 0; i < _FS_LOCK; i++) {
 800476a:	2301      	movs	r3, #1
 800476c:	e7f9      	b.n	8004762 <chk_lock+0x72>
 800476e:	bf00      	nop
 8004770:	200081e4 	.word	0x200081e4

08004774 <inc_lock>:
{
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->fs &&
 8004774:	4a24      	ldr	r2, [pc, #144]	; (8004808 <inc_lock+0x94>)
{
 8004776:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (Files[i].fs == dp->fs &&
 8004778:	6813      	ldr	r3, [r2, #0]
 800477a:	f8d0 6200 	ldr.w	r6, [r0, #512]	; 0x200
 800477e:	429e      	cmp	r6, r3
 8004780:	d109      	bne.n	8004796 <inc_lock+0x22>
 8004782:	6855      	ldr	r5, [r2, #4]
 8004784:	f8d0 4208 	ldr.w	r4, [r0, #520]	; 0x208
 8004788:	42a5      	cmp	r5, r4
 800478a:	d104      	bne.n	8004796 <inc_lock+0x22>
			Files[i].clu == dp->sclust &&
 800478c:	f8b0 5206 	ldrh.w	r5, [r0, #518]	; 0x206
 8004790:	8914      	ldrh	r4, [r2, #8]
 8004792:	42a5      	cmp	r5, r4
 8004794:	d028      	beq.n	80047e8 <inc_lock+0x74>
		if (Files[i].fs == dp->fs &&
 8004796:	68d4      	ldr	r4, [r2, #12]
 8004798:	42b4      	cmp	r4, r6
 800479a:	d109      	bne.n	80047b0 <inc_lock+0x3c>
 800479c:	6917      	ldr	r7, [r2, #16]
 800479e:	f8d0 5208 	ldr.w	r5, [r0, #520]	; 0x208
 80047a2:	42af      	cmp	r7, r5
 80047a4:	d104      	bne.n	80047b0 <inc_lock+0x3c>
			Files[i].clu == dp->sclust &&
 80047a6:	8a97      	ldrh	r7, [r2, #20]
 80047a8:	f8b0 5206 	ldrh.w	r5, [r0, #518]	; 0x206
 80047ac:	42af      	cmp	r7, r5
 80047ae:	d026      	beq.n	80047fe <inc_lock+0x8a>
			Files[i].idx == dp->index) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80047b0:	b10b      	cbz	r3, 80047b6 <inc_lock+0x42>
 80047b2:	bb34      	cbnz	r4, 8004802 <inc_lock+0x8e>
 80047b4:	2301      	movs	r3, #1
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
		Files[i].fs = dp->fs;
 80047b6:	240c      	movs	r4, #12
 80047b8:	435c      	muls	r4, r3
 80047ba:	1915      	adds	r5, r2, r4
 80047bc:	5116      	str	r6, [r2, r4]
		Files[i].clu = dp->sclust;
 80047be:	f8d0 4208 	ldr.w	r4, [r0, #520]	; 0x208
		Files[i].idx = dp->index;
 80047c2:	f8b0 0206 	ldrh.w	r0, [r0, #518]	; 0x206
		Files[i].clu = dp->sclust;
 80047c6:	606c      	str	r4, [r5, #4]
		Files[i].idx = dp->index;
 80047c8:	8128      	strh	r0, [r5, #8]
		Files[i].ctr = 0;
 80047ca:	2000      	movs	r0, #0
 80047cc:	8168      	strh	r0, [r5, #10]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80047ce:	b999      	cbnz	r1, 80047f8 <inc_lock+0x84>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80047d0:	210c      	movs	r1, #12
 80047d2:	fb01 2103 	mla	r1, r1, r3, r2
 80047d6:	8949      	ldrh	r1, [r1, #10]
 80047d8:	3101      	adds	r1, #1
 80047da:	b289      	uxth	r1, r1
 80047dc:	200c      	movs	r0, #12
 80047de:	fb00 2203 	mla	r2, r0, r3, r2

	return i + 1;
 80047e2:	1c58      	adds	r0, r3, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80047e4:	8151      	strh	r1, [r2, #10]
}
 80047e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80047e8:	2300      	movs	r3, #0
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80047ea:	2900      	cmp	r1, #0
 80047ec:	d0f0      	beq.n	80047d0 <inc_lock+0x5c>
 80047ee:	210c      	movs	r1, #12
 80047f0:	fb01 2103 	mla	r1, r1, r3, r2
 80047f4:	8949      	ldrh	r1, [r1, #10]
 80047f6:	b921      	cbnz	r1, 8004802 <inc_lock+0x8e>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80047f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80047fc:	e7ee      	b.n	80047dc <inc_lock+0x68>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80047fe:	2301      	movs	r3, #1
 8004800:	e7f3      	b.n	80047ea <inc_lock+0x76>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8004802:	2000      	movs	r0, #0
 8004804:	e7ef      	b.n	80047e6 <inc_lock+0x72>
 8004806:	bf00      	nop
 8004808:	200081e4 	.word	0x200081e4

0800480c <dec_lock>:
{
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800480c:	3801      	subs	r0, #1
 800480e:	2801      	cmp	r0, #1
 8004810:	d817      	bhi.n	8004842 <dec_lock+0x36>
		n = Files[i].ctr;
 8004812:	220c      	movs	r2, #12
 8004814:	490c      	ldr	r1, [pc, #48]	; (8004848 <dec_lock+0x3c>)
 8004816:	fb02 1200 	mla	r2, r2, r0, r1
 800481a:	8953      	ldrh	r3, [r2, #10]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800481c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004820:	d106      	bne.n	8004830 <dec_lock+0x24>
		if (n) n--;					/* Decrement read mode open count */
		Files[i].ctr = n;
 8004822:	2300      	movs	r3, #0
 8004824:	8153      	strh	r3, [r2, #10]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8004826:	230c      	movs	r3, #12
 8004828:	4358      	muls	r0, r3
 800482a:	2300      	movs	r3, #0
 800482c:	500b      	str	r3, [r1, r0]
 800482e:	e006      	b.n	800483e <dec_lock+0x32>
		if (n) n--;					/* Decrement read mode open count */
 8004830:	2b00      	cmp	r3, #0
 8004832:	d0f8      	beq.n	8004826 <dec_lock+0x1a>
 8004834:	3b01      	subs	r3, #1
 8004836:	b29b      	uxth	r3, r3
		Files[i].ctr = n;
 8004838:	8153      	strh	r3, [r2, #10]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800483a:	2b00      	cmp	r3, #0
 800483c:	d0f3      	beq.n	8004826 <dec_lock+0x1a>
		res = FR_OK;
 800483e:	2000      	movs	r0, #0
 8004840:	4770      	bx	lr
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8004842:	2002      	movs	r0, #2
	}
	return res;
}
 8004844:	4770      	bx	lr
 8004846:	bf00      	nop
 8004848:	200081e4 	.word	0x200081e4

0800484c <clear_lock>:
)
{
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
		if (Files[i].fs == fs) Files[i].fs = 0;
 800484c:	4b05      	ldr	r3, [pc, #20]	; (8004864 <clear_lock+0x18>)
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	4290      	cmp	r0, r2
 8004852:	bf04      	itt	eq
 8004854:	2200      	moveq	r2, #0
 8004856:	601a      	streq	r2, [r3, #0]
 8004858:	68da      	ldr	r2, [r3, #12]
 800485a:	4290      	cmp	r0, r2
 800485c:	bf04      	itt	eq
 800485e:	2200      	moveq	r2, #0
 8004860:	60da      	streq	r2, [r3, #12]
	}
}
 8004862:	4770      	bx	lr
 8004864:	200081e4 	.word	0x200081e4

08004868 <clmt_clust>:
{
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8004868:	f8d0 2200 	ldr.w	r2, [r0, #512]	; 0x200
 800486c:	0a49      	lsrs	r1, r1, #9
 800486e:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8004872:	f8d0 3224 	ldr.w	r3, [r0, #548]	; 0x224
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8004876:	fbb1 f1f2 	udiv	r1, r1, r2
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800487a:	3304      	adds	r3, #4
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800487c:	6818      	ldr	r0, [r3, #0]
		if (!ncl) return 0;		/* End of table? (error) */
 800487e:	b130      	cbz	r0, 800488e <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8004880:	4281      	cmp	r1, r0
 8004882:	d302      	bcc.n	800488a <clmt_clust+0x22>
		cl -= ncl; tbl++;		/* Next fragment */
 8004884:	1a09      	subs	r1, r1, r0
 8004886:	3308      	adds	r3, #8
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004888:	e7f8      	b.n	800487c <clmt_clust+0x14>
	}
	return cl + *tbl;	/* Return the cluster number */
 800488a:	6858      	ldr	r0, [r3, #4]
 800488c:	4408      	add	r0, r1
}
 800488e:	4770      	bx	lr

08004890 <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8004890:	6802      	ldr	r2, [r0, #0]
{
 8004892:	b510      	push	{r4, lr}
	if (*path) {	/* If the pointer is not a null */
 8004894:	b152      	cbz	r2, 80048ac <get_ldnumber+0x1c>
 8004896:	4611      	mov	r1, r2
 8004898:	460b      	mov	r3, r1
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800489a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800489e:	2c20      	cmp	r4, #32
 80048a0:	d90c      	bls.n	80048bc <get_ldnumber+0x2c>
 80048a2:	2c3a      	cmp	r4, #58	; 0x3a
 80048a4:	d1f8      	bne.n	8004898 <get_ldnumber+0x8>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0'; 
 80048a6:	1c51      	adds	r1, r2, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80048a8:	428b      	cmp	r3, r1
 80048aa:	d002      	beq.n	80048b2 <get_ldnumber+0x22>
	int vol = -1;
 80048ac:	f04f 30ff 	mov.w	r0, #4294967295
 80048b0:	e005      	b.n	80048be <get_ldnumber+0x2e>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80048b2:	7812      	ldrb	r2, [r2, #0]
 80048b4:	2a30      	cmp	r2, #48	; 0x30
 80048b6:	d1f9      	bne.n	80048ac <get_ldnumber+0x1c>
					vol = (int)i;
					*path = ++tt;
 80048b8:	3301      	adds	r3, #1
 80048ba:	6003      	str	r3, [r0, #0]
			return vol;
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80048bc:	2000      	movs	r0, #0
#endif
	}
	return vol;
}
 80048be:	bd10      	pop	{r4, pc}

080048c0 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 80048c0:	b508      	push	{r3, lr}
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 80048c2:	b190      	cbz	r0, 80048ea <validate+0x2a>
 80048c4:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
 80048c8:	b17b      	cbz	r3, 80048ea <validate+0x2a>
 80048ca:	f893 2200 	ldrb.w	r2, [r3, #512]	; 0x200
 80048ce:	b162      	cbz	r2, 80048ea <validate+0x2a>
 80048d0:	f8b3 1206 	ldrh.w	r1, [r3, #518]	; 0x206
 80048d4:	f8b0 2204 	ldrh.w	r2, [r0, #516]	; 0x204
 80048d8:	4291      	cmp	r1, r2
 80048da:	d106      	bne.n	80048ea <validate+0x2a>
 80048dc:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80048e0:	f7ff feb2 	bl	8004648 <disk_status>
 80048e4:	f010 0001 	ands.w	r0, r0, #1
 80048e8:	d000      	beq.n	80048ec <validate+0x2c>
		return FR_INVALID_OBJECT;
 80048ea:	2009      	movs	r0, #9

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
}
 80048ec:	bd08      	pop	{r3, pc}

080048ee <sync_window.part.0>:
FRESULT sync_window (
 80048ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		wsect = fs->winsect;	/* Current sector number */
 80048f0:	f8d0 622c 	ldr.w	r6, [r0, #556]	; 0x22c
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 80048f4:	4601      	mov	r1, r0
FRESULT sync_window (
 80048f6:	4604      	mov	r4, r0
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 80048f8:	2301      	movs	r3, #1
 80048fa:	4632      	mov	r2, r6
 80048fc:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 8004900:	f7ff feca 	bl	8004698 <disk_write>
 8004904:	4605      	mov	r5, r0
 8004906:	b9d0      	cbnz	r0, 800493e <sync_window.part.0+0x50>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004908:	f8d4 3220 	ldr.w	r3, [r4, #544]	; 0x220
 800490c:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
 8004910:	1af3      	subs	r3, r6, r3
 8004912:	4293      	cmp	r3, r2
			fs->wflag = 0;
 8004914:	f884 0204 	strb.w	r0, [r4, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004918:	d203      	bcs.n	8004922 <sync_window.part.0+0x34>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800491a:	f894 7203 	ldrb.w	r7, [r4, #515]	; 0x203
 800491e:	2f01      	cmp	r7, #1
 8004920:	d801      	bhi.n	8004926 <sync_window.part.0+0x38>
}
 8004922:	4628      	mov	r0, r5
 8004924:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					wsect += fs->fsize;
 8004926:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 800492a:	4621      	mov	r1, r4
					wsect += fs->fsize;
 800492c:	441e      	add	r6, r3
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 800492e:	4632      	mov	r2, r6
 8004930:	2301      	movs	r3, #1
 8004932:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
 8004936:	f7ff feaf 	bl	8004698 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800493a:	3f01      	subs	r7, #1
 800493c:	e7ef      	b.n	800491e <sync_window.part.0+0x30>
			res = FR_DISK_ERR;
 800493e:	2501      	movs	r5, #1
 8004940:	e7ef      	b.n	8004922 <sync_window.part.0+0x34>

08004942 <sync_window>:
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004942:	f890 3204 	ldrb.w	r3, [r0, #516]	; 0x204
 8004946:	b10b      	cbz	r3, 800494c <sync_window+0xa>
 8004948:	f7ff bfd1 	b.w	80048ee <sync_window.part.0>
}
 800494c:	4618      	mov	r0, r3
 800494e:	4770      	bx	lr

08004950 <move_window>:
{
 8004950:	b538      	push	{r3, r4, r5, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
 8004952:	f8d0 322c 	ldr.w	r3, [r0, #556]	; 0x22c
{
 8004956:	4605      	mov	r5, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 8004958:	428b      	cmp	r3, r1
{
 800495a:	460c      	mov	r4, r1
	if (sector != fs->winsect) {	/* Window offset changed? */
 800495c:	d011      	beq.n	8004982 <move_window+0x32>
		res = sync_window(fs);		/* Write-back changes */
 800495e:	f7ff fff0 	bl	8004942 <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 8004962:	b968      	cbnz	r0, 8004980 <move_window+0x30>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8004964:	4622      	mov	r2, r4
 8004966:	2301      	movs	r3, #1
 8004968:	4629      	mov	r1, r5
 800496a:	f895 0201 	ldrb.w	r0, [r5, #513]	; 0x201
 800496e:	f7ff fe85 	bl	800467c <disk_read>
				res = FR_DISK_ERR;
 8004972:	2800      	cmp	r0, #0
 8004974:	bf1c      	itt	ne
 8004976:	f04f 34ff 	movne.w	r4, #4294967295
 800497a:	2001      	movne	r0, #1
			fs->winsect = sector;
 800497c:	f8c5 422c 	str.w	r4, [r5, #556]	; 0x22c
}
 8004980:	bd38      	pop	{r3, r4, r5, pc}
	FRESULT res = FR_OK;
 8004982:	2000      	movs	r0, #0
 8004984:	e7fc      	b.n	8004980 <move_window+0x30>
	...

08004988 <check_fs>:
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8004988:	2300      	movs	r3, #0
{
 800498a:	b510      	push	{r4, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 800498c:	f880 3204 	strb.w	r3, [r0, #516]	; 0x204
 8004990:	f04f 33ff 	mov.w	r3, #4294967295
 8004994:	f8c0 322c 	str.w	r3, [r0, #556]	; 0x22c
{
 8004998:	4604      	mov	r4, r0
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 800499a:	f7ff ffd9 	bl	8004950 <move_window>
 800499e:	b9a0      	cbnz	r0, 80049ca <check_fs+0x42>
	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 80049a0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80049a4:	f8b4 21fe 	ldrh.w	r2, [r4, #510]	; 0x1fe
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d110      	bne.n	80049ce <check_fs+0x46>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 80049ac:	f8d4 3036 	ldr.w	r3, [r4, #54]	; 0x36
 80049b0:	4a08      	ldr	r2, [pc, #32]	; (80049d4 <check_fs+0x4c>)
 80049b2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d006      	beq.n	80049c8 <check_fs+0x40>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 80049ba:	f8d4 0052 	ldr.w	r0, [r4, #82]	; 0x52
 80049be:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		return 3;
 80049c2:	1a80      	subs	r0, r0, r2
 80049c4:	bf18      	it	ne
 80049c6:	2001      	movne	r0, #1
}
 80049c8:	bd10      	pop	{r4, pc}
		return 3;
 80049ca:	2003      	movs	r0, #3
 80049cc:	e7fc      	b.n	80049c8 <check_fs+0x40>
		return 2;
 80049ce:	2002      	movs	r0, #2
 80049d0:	e7fa      	b.n	80049c8 <check_fs+0x40>
 80049d2:	bf00      	nop
 80049d4:	00544146 	.word	0x00544146

080049d8 <find_volume>:
{
 80049d8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	*rfs = 0;
 80049dc:	2300      	movs	r3, #0
{
 80049de:	4607      	mov	r7, r0
	*rfs = 0;
 80049e0:	6003      	str	r3, [r0, #0]
	vol = get_ldnumber(path);
 80049e2:	4608      	mov	r0, r1
{
 80049e4:	4615      	mov	r5, r2
	vol = get_ldnumber(path);
 80049e6:	f7ff ff53 	bl	8004890 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 80049ea:	1e06      	subs	r6, r0, #0
 80049ec:	f2c0 8101 	blt.w	8004bf2 <find_volume+0x21a>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80049f0:	4b84      	ldr	r3, [pc, #528]	; (8004c04 <find_volume+0x22c>)
 80049f2:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80049f6:	2c00      	cmp	r4, #0
 80049f8:	f000 80fd 	beq.w	8004bf6 <find_volume+0x21e>
	*rfs = fs;							/* Return pointer to the file system object */
 80049fc:	603c      	str	r4, [r7, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80049fe:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8004a02:	b173      	cbz	r3, 8004a22 <find_volume+0x4a>
		stat = disk_status(fs->drv);
 8004a04:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
 8004a08:	f7ff fe1e 	bl	8004648 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8004a0c:	07c1      	lsls	r1, r0, #31
 8004a0e:	d408      	bmi.n	8004a22 <find_volume+0x4a>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8004a10:	b11d      	cbz	r5, 8004a1a <find_volume+0x42>
 8004a12:	f010 0504 	ands.w	r5, r0, #4
 8004a16:	d000      	beq.n	8004a1a <find_volume+0x42>
				return FR_WRITE_PROTECTED;
 8004a18:	250a      	movs	r5, #10
}
 8004a1a:	4628      	mov	r0, r5
 8004a1c:	b004      	add	sp, #16
 8004a1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	fs->fs_type = 0;					/* Clear the file system object */
 8004a22:	2300      	movs	r3, #0
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8004a24:	b2f0      	uxtb	r0, r6
	fs->fs_type = 0;					/* Clear the file system object */
 8004a26:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8004a2a:	f884 0201 	strb.w	r0, [r4, #513]	; 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8004a2e:	f7ff fe15 	bl	800465c <disk_initialize>
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8004a32:	07c2      	lsls	r2, r0, #31
 8004a34:	f100 80e1 	bmi.w	8004bfa <find_volume+0x222>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8004a38:	b10d      	cbz	r5, 8004a3e <find_volume+0x66>
 8004a3a:	0743      	lsls	r3, r0, #29
 8004a3c:	d4ec      	bmi.n	8004a18 <find_volume+0x40>
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8004a3e:	2100      	movs	r1, #0
 8004a40:	4620      	mov	r0, r4
 8004a42:	f7ff ffa1 	bl	8004988 <check_fs>
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8004a46:	2801      	cmp	r0, #1
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8004a48:	4605      	mov	r5, r0
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8004a4a:	f040 80b8 	bne.w	8004bbe <find_volume+0x1e6>
 8004a4e:	46e8      	mov	r8, sp
 8004a50:	4641      	mov	r1, r8
 8004a52:	f504 73df 	add.w	r3, r4, #446	; 0x1be
 8004a56:	f504 70ff 	add.w	r0, r4, #510	; 0x1fe
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8004a5a:	791a      	ldrb	r2, [r3, #4]
 8004a5c:	b102      	cbz	r2, 8004a60 <find_volume+0x88>
 8004a5e:	689a      	ldr	r2, [r3, #8]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8004a60:	3310      	adds	r3, #16
 8004a62:	4283      	cmp	r3, r0
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8004a64:	f841 2b04 	str.w	r2, [r1], #4
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8004a68:	d1f7      	bne.n	8004a5a <find_volume+0x82>
 8004a6a:	2700      	movs	r7, #0
			bsect = br[i];
 8004a6c:	f858 6b04 	ldr.w	r6, [r8], #4
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8004a70:	2e00      	cmp	r6, #0
 8004a72:	f000 809c 	beq.w	8004bae <find_volume+0x1d6>
 8004a76:	4631      	mov	r1, r6
 8004a78:	4620      	mov	r0, r4
 8004a7a:	f7ff ff85 	bl	8004988 <check_fs>
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8004a7e:	2800      	cmp	r0, #0
 8004a80:	f040 8096 	bne.w	8004bb0 <find_volume+0x1d8>
	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8004a84:	f8b4 300b 	ldrh.w	r3, [r4, #11]
 8004a88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a8c:	f040 809a 	bne.w	8004bc4 <find_volume+0x1ec>
	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8004a90:	8ae0      	ldrh	r0, [r4, #22]
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8004a92:	b900      	cbnz	r0, 8004a96 <find_volume+0xbe>
 8004a94:	6a60      	ldr	r0, [r4, #36]	; 0x24
	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8004a96:	7c27      	ldrb	r7, [r4, #16]
	fs->fsize = fasize;
 8004a98:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8004a9c:	1e7b      	subs	r3, r7, #1
 8004a9e:	2b01      	cmp	r3, #1
	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8004aa0:	f884 7203 	strb.w	r7, [r4, #515]	; 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8004aa4:	f200 808e 	bhi.w	8004bc4 <find_volume+0x1ec>
	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8004aa8:	7b65      	ldrb	r5, [r4, #13]
 8004aaa:	f884 5202 	strb.w	r5, [r4, #514]	; 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8004aae:	2d00      	cmp	r5, #0
 8004ab0:	f000 8088 	beq.w	8004bc4 <find_volume+0x1ec>
 8004ab4:	1e6b      	subs	r3, r5, #1
 8004ab6:	422b      	tst	r3, r5
 8004ab8:	f040 8084 	bne.w	8004bc4 <find_volume+0x1ec>
	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8004abc:	f8b4 c011 	ldrh.w	ip, [r4, #17]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8004ac0:	f01c 0f0f 	tst.w	ip, #15
	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8004ac4:	f8a4 c208 	strh.w	ip, [r4, #520]	; 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8004ac8:	d17c      	bne.n	8004bc4 <find_volume+0x1ec>
	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8004aca:	f8b4 3013 	ldrh.w	r3, [r4, #19]
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8004ace:	b903      	cbnz	r3, 8004ad2 <find_volume+0xfa>
 8004ad0:	6a23      	ldr	r3, [r4, #32]
	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8004ad2:	89e2      	ldrh	r2, [r4, #14]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8004ad4:	2a00      	cmp	r2, #0
 8004ad6:	d075      	beq.n	8004bc4 <find_volume+0x1ec>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8004ad8:	4347      	muls	r7, r0
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8004ada:	eb02 111c 	add.w	r1, r2, ip, lsr #4
 8004ade:	4439      	add	r1, r7
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8004ae0:	428b      	cmp	r3, r1
 8004ae2:	d36f      	bcc.n	8004bc4 <find_volume+0x1ec>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8004ae4:	1a5b      	subs	r3, r3, r1
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8004ae6:	42ab      	cmp	r3, r5
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8004ae8:	fbb3 fef5 	udiv	lr, r3, r5
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8004aec:	d36a      	bcc.n	8004bc4 <find_volume+0x1ec>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8004aee:	f640 73f5 	movw	r3, #4085	; 0xff5
 8004af2:	459e      	cmp	lr, r3
 8004af4:	d96a      	bls.n	8004bcc <find_volume+0x1f4>
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8004af6:	f64f 75f5 	movw	r5, #65525	; 0xfff5
 8004afa:	45ae      	cmp	lr, r5
 8004afc:	bf94      	ite	ls
 8004afe:	2502      	movls	r5, #2
 8004b00:	2503      	movhi	r5, #3
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8004b02:	f10e 0302 	add.w	r3, lr, #2
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8004b06:	4432      	add	r2, r6
	fs->database = bsect + sysect;						/* Data start sector */
 8004b08:	4431      	add	r1, r6
	if (fmt == FS_FAT32) {
 8004b0a:	2d03      	cmp	r5, #3
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8004b0c:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
	fs->volbase = bsect;								/* Volume start sector */
 8004b10:	f8c4 621c 	str.w	r6, [r4, #540]	; 0x21c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8004b14:	f8c4 2220 	str.w	r2, [r4, #544]	; 0x220
	fs->database = bsect + sysect;						/* Data start sector */
 8004b18:	f8c4 1228 	str.w	r1, [r4, #552]	; 0x228
	if (fmt == FS_FAT32) {
 8004b1c:	d158      	bne.n	8004bd0 <find_volume+0x1f8>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8004b1e:	f1bc 0f00 	cmp.w	ip, #0
 8004b22:	d14f      	bne.n	8004bc4 <find_volume+0x1ec>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8004b24:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8004b26:	009b      	lsls	r3, r3, #2
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8004b28:	f8c4 2224 	str.w	r2, [r4, #548]	; 0x224
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8004b2c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004b30:	ebb0 2f53 	cmp.w	r0, r3, lsr #9
 8004b34:	d346      	bcc.n	8004bc4 <find_volume+0x1ec>
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8004b36:	f04f 33ff 	mov.w	r3, #4294967295
 8004b3a:	e9c4 3383 	strd	r3, r3, [r4, #524]	; 0x20c
	fs->fsi_flag = 0x80;
 8004b3e:	2380      	movs	r3, #128	; 0x80
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8004b40:	2d03      	cmp	r5, #3
	fs->fsi_flag = 0x80;
 8004b42:	f884 3205 	strb.w	r3, [r4, #517]	; 0x205
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8004b46:	d124      	bne.n	8004b92 <find_volume+0x1ba>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8004b48:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	d121      	bne.n	8004b92 <find_volume+0x1ba>
		&& move_window(fs, bsect + 1) == FR_OK)
 8004b4e:	4620      	mov	r0, r4
 8004b50:	1c71      	adds	r1, r6, #1
 8004b52:	f7ff fefd 	bl	8004950 <move_window>
 8004b56:	b9e0      	cbnz	r0, 8004b92 <find_volume+0x1ba>
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8004b58:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8004b5c:	f8b4 21fe 	ldrh.w	r2, [r4, #510]	; 0x1fe
		fs->fsi_flag = 0;
 8004b60:	f884 0205 	strb.w	r0, [r4, #517]	; 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d114      	bne.n	8004b92 <find_volume+0x1ba>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8004b68:	6822      	ldr	r2, [r4, #0]
 8004b6a:	4b27      	ldr	r3, [pc, #156]	; (8004c08 <find_volume+0x230>)
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d110      	bne.n	8004b92 <find_volume+0x1ba>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8004b70:	f103 53ff 	add.w	r3, r3, #534773760	; 0x1fe00000
 8004b74:	f8d4 21e4 	ldr.w	r2, [r4, #484]	; 0x1e4
 8004b78:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004b7c:	3320      	adds	r3, #32
 8004b7e:	429a      	cmp	r2, r3
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8004b80:	bf01      	itttt	eq
 8004b82:	f8d4 31e8 	ldreq.w	r3, [r4, #488]	; 0x1e8
 8004b86:	f8c4 3210 	streq.w	r3, [r4, #528]	; 0x210
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8004b8a:	f8d4 31ec 	ldreq.w	r3, [r4, #492]	; 0x1ec
 8004b8e:	f8c4 320c 	streq.w	r3, [r4, #524]	; 0x20c
	fs->id = ++Fsid;	/* File system mount ID */
 8004b92:	4a1e      	ldr	r2, [pc, #120]	; (8004c0c <find_volume+0x234>)
	fs->fs_type = fmt;	/* FAT sub-type */
 8004b94:	f884 5200 	strb.w	r5, [r4, #512]	; 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 8004b98:	8813      	ldrh	r3, [r2, #0]
	clear_lock(fs);
 8004b9a:	4620      	mov	r0, r4
	fs->id = ++Fsid;	/* File system mount ID */
 8004b9c:	3301      	adds	r3, #1
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	f8a4 3206 	strh.w	r3, [r4, #518]	; 0x206
 8004ba4:	8013      	strh	r3, [r2, #0]
	return FR_OK;
 8004ba6:	2500      	movs	r5, #0
	clear_lock(fs);
 8004ba8:	f7ff fe50 	bl	800484c <clear_lock>
	return FR_OK;
 8004bac:	e735      	b.n	8004a1a <find_volume+0x42>
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8004bae:	2002      	movs	r0, #2
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8004bb0:	3701      	adds	r7, #1
 8004bb2:	2f04      	cmp	r7, #4
 8004bb4:	f47f af5a 	bne.w	8004a6c <find_volume+0x94>
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8004bb8:	2803      	cmp	r0, #3
 8004bba:	d103      	bne.n	8004bc4 <find_volume+0x1ec>
 8004bbc:	e72d      	b.n	8004a1a <find_volume+0x42>
 8004bbe:	2803      	cmp	r0, #3
 8004bc0:	d01d      	beq.n	8004bfe <find_volume+0x226>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8004bc2:	b108      	cbz	r0, 8004bc8 <find_volume+0x1f0>
 8004bc4:	250d      	movs	r5, #13
 8004bc6:	e728      	b.n	8004a1a <find_volume+0x42>
	bsect = 0;
 8004bc8:	4606      	mov	r6, r0
 8004bca:	e75b      	b.n	8004a84 <find_volume+0xac>
	fmt = FS_FAT12;
 8004bcc:	2501      	movs	r5, #1
 8004bce:	e798      	b.n	8004b02 <find_volume+0x12a>
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8004bd0:	f1bc 0f00 	cmp.w	ip, #0
 8004bd4:	d0f6      	beq.n	8004bc4 <find_volume+0x1ec>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8004bd6:	443a      	add	r2, r7
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8004bd8:	2d02      	cmp	r5, #2
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8004bda:	f8c4 2224 	str.w	r2, [r4, #548]	; 0x224
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8004bde:	ea4f 0243 	mov.w	r2, r3, lsl #1
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8004be2:	bf1b      	ittet	ne
 8004be4:	18d2      	addne	r2, r2, r3
 8004be6:	f003 0301 	andne.w	r3, r3, #1
 8004bea:	4613      	moveq	r3, r2
 8004bec:	eb03 0352 	addne.w	r3, r3, r2, lsr #1
 8004bf0:	e79c      	b.n	8004b2c <find_volume+0x154>
	if (vol < 0) return FR_INVALID_DRIVE;
 8004bf2:	250b      	movs	r5, #11
 8004bf4:	e711      	b.n	8004a1a <find_volume+0x42>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8004bf6:	250c      	movs	r5, #12
 8004bf8:	e70f      	b.n	8004a1a <find_volume+0x42>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8004bfa:	2503      	movs	r5, #3
 8004bfc:	e70d      	b.n	8004a1a <find_volume+0x42>
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8004bfe:	2501      	movs	r5, #1
 8004c00:	e70b      	b.n	8004a1a <find_volume+0x42>
 8004c02:	bf00      	nop
 8004c04:	200081e0 	.word	0x200081e0
 8004c08:	41615252 	.word	0x41615252
 8004c0c:	200081fc 	.word	0x200081fc

08004c10 <sync_fs>:
{
 8004c10:	b538      	push	{r3, r4, r5, lr}
 8004c12:	4604      	mov	r4, r0
	res = sync_window(fs);
 8004c14:	f7ff fe95 	bl	8004942 <sync_window>
 8004c18:	4605      	mov	r5, r0
	if (res == FR_OK) {
 8004c1a:	bbb8      	cbnz	r0, 8004c8c <sync_fs+0x7c>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8004c1c:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8004c20:	2b03      	cmp	r3, #3
 8004c22:	d12a      	bne.n	8004c7a <sync_fs+0x6a>
 8004c24:	f894 3205 	ldrb.w	r3, [r4, #517]	; 0x205
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	d126      	bne.n	8004c7a <sync_fs+0x6a>
			mem_set(fs->win.d8, 0, SS(fs));
 8004c2c:	4601      	mov	r1, r0
 8004c2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c32:	4620      	mov	r0, r4
 8004c34:	f7ff fd54 	bl	80046e0 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8004c38:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8004c3c:	f8a4 21fe 	strh.w	r2, [r4, #510]	; 0x1fe
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8004c40:	4a13      	ldr	r2, [pc, #76]	; (8004c90 <sync_fs+0x80>)
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8004c42:	4621      	mov	r1, r4
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8004c44:	6022      	str	r2, [r4, #0]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8004c46:	f102 52ff 	add.w	r2, r2, #534773760	; 0x1fe00000
 8004c4a:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8004c4e:	3220      	adds	r2, #32
 8004c50:	f8c4 21e4 	str.w	r2, [r4, #484]	; 0x1e4
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8004c54:	f8d4 2210 	ldr.w	r2, [r4, #528]	; 0x210
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8004c58:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8004c5c:	f8c4 21e8 	str.w	r2, [r4, #488]	; 0x1e8
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8004c60:	f8d4 220c 	ldr.w	r2, [r4, #524]	; 0x20c
 8004c64:	f8c4 21ec 	str.w	r2, [r4, #492]	; 0x1ec
			fs->winsect = fs->volbase + 1;
 8004c68:	f8d4 221c 	ldr.w	r2, [r4, #540]	; 0x21c
 8004c6c:	3201      	adds	r2, #1
 8004c6e:	f8c4 222c 	str.w	r2, [r4, #556]	; 0x22c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8004c72:	f7ff fd11 	bl	8004698 <disk_write>
			fs->fsi_flag = 0;
 8004c76:	f884 5205 	strb.w	r5, [r4, #517]	; 0x205
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
 8004c80:	4611      	mov	r1, r2
 8004c82:	f7ff fd17 	bl	80046b4 <disk_ioctl>
	res = sync_window(fs);
 8004c86:	3800      	subs	r0, #0
 8004c88:	bf18      	it	ne
 8004c8a:	2001      	movne	r0, #1
}
 8004c8c:	bd38      	pop	{r3, r4, r5, pc}
 8004c8e:	bf00      	nop
 8004c90:	41615252 	.word	0x41615252

08004c94 <ld_clust.isra.0>:
	if (fs->fs_type == FS_FAT32)
 8004c94:	2803      	cmp	r0, #3
	cl = LD_WORD(dir + DIR_FstClusLO);
 8004c96:	8b4b      	ldrh	r3, [r1, #26]
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8004c98:	bf04      	itt	eq
 8004c9a:	8a8a      	ldrheq	r2, [r1, #20]
 8004c9c:	ea43 4302 	orreq.w	r3, r3, r2, lsl #16
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	4770      	bx	lr

08004ca4 <clust2sect>:
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004ca4:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
	clst -= 2;
 8004ca8:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004caa:	3b02      	subs	r3, #2
 8004cac:	428b      	cmp	r3, r1
	return clst * fs->csize + fs->database;
 8004cae:	bf83      	ittte	hi
 8004cb0:	f890 3202 	ldrbhi.w	r3, [r0, #514]	; 0x202
 8004cb4:	f8d0 0228 	ldrhi.w	r0, [r0, #552]	; 0x228
 8004cb8:	fb01 0003 	mlahi	r0, r1, r3, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004cbc:	2000      	movls	r0, #0
}
 8004cbe:	4770      	bx	lr

08004cc0 <get_fat>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8004cc0:	2901      	cmp	r1, #1
{
 8004cc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cc4:	4606      	mov	r6, r0
 8004cc6:	460d      	mov	r5, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8004cc8:	d959      	bls.n	8004d7e <get_fat+0xbe>
 8004cca:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8004cce:	428b      	cmp	r3, r1
 8004cd0:	d955      	bls.n	8004d7e <get_fat+0xbe>
		switch (fs->fs_type) {
 8004cd2:	f890 3200 	ldrb.w	r3, [r0, #512]	; 0x200
 8004cd6:	2b02      	cmp	r3, #2
 8004cd8:	d027      	beq.n	8004d2a <get_fat+0x6a>
 8004cda:	2b03      	cmp	r3, #3
 8004cdc:	d036      	beq.n	8004d4c <get_fat+0x8c>
 8004cde:	2b01      	cmp	r3, #1
 8004ce0:	d14d      	bne.n	8004d7e <get_fat+0xbe>
			bc = (UINT)clst; bc += bc / 2;
 8004ce2:	eb01 0451 	add.w	r4, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004ce6:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 8004cea:	eb01 2154 	add.w	r1, r1, r4, lsr #9
 8004cee:	f7ff fe2f 	bl	8004950 <move_window>
 8004cf2:	b110      	cbz	r0, 8004cfa <get_fat+0x3a>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8004cf4:	f04f 30ff 	mov.w	r0, #4294967295
}
 8004cf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004cfa:	f8d6 1220 	ldr.w	r1, [r6, #544]	; 0x220
			wc = fs->win.d8[bc++ % SS(fs)];
 8004cfe:	1c67      	adds	r7, r4, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004d00:	4630      	mov	r0, r6
			wc = fs->win.d8[bc++ % SS(fs)];
 8004d02:	f3c4 0408 	ubfx	r4, r4, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004d06:	eb01 2157 	add.w	r1, r1, r7, lsr #9
			wc = fs->win.d8[bc++ % SS(fs)];
 8004d0a:	5d34      	ldrb	r4, [r6, r4]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004d0c:	f7ff fe20 	bl	8004950 <move_window>
 8004d10:	2800      	cmp	r0, #0
 8004d12:	d1ef      	bne.n	8004cf4 <get_fat+0x34>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8004d14:	f3c7 0708 	ubfx	r7, r7, #0, #9
 8004d18:	5df0      	ldrb	r0, [r6, r7]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8004d1a:	07eb      	lsls	r3, r5, #31
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8004d1c:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8004d20:	bf4c      	ite	mi
 8004d22:	0900      	lsrmi	r0, r0, #4
 8004d24:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
 8004d28:	e7e6      	b.n	8004cf8 <get_fat+0x38>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004d2a:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 8004d2e:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8004d32:	f7ff fe0d 	bl	8004950 <move_window>
 8004d36:	2800      	cmp	r0, #0
 8004d38:	d1dc      	bne.n	8004cf4 <get_fat+0x34>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8004d3a:	006d      	lsls	r5, r5, #1
 8004d3c:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
			val = LD_WORD(p);
 8004d40:	1973      	adds	r3, r6, r5
 8004d42:	785b      	ldrb	r3, [r3, #1]
 8004d44:	5d70      	ldrb	r0, [r6, r5]
 8004d46:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
			break;
 8004d4a:	e7d5      	b.n	8004cf8 <get_fat+0x38>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004d4c:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 8004d50:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
 8004d54:	f7ff fdfc 	bl	8004950 <move_window>
 8004d58:	2800      	cmp	r0, #0
 8004d5a:	d1cb      	bne.n	8004cf4 <get_fat+0x34>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8004d5c:	00ad      	lsls	r5, r5, #2
 8004d5e:	f405 75fe 	and.w	r5, r5, #508	; 0x1fc
 8004d62:	1973      	adds	r3, r6, r5
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8004d64:	7898      	ldrb	r0, [r3, #2]
 8004d66:	78da      	ldrb	r2, [r3, #3]
 8004d68:	0400      	lsls	r0, r0, #16
 8004d6a:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 8004d6e:	5d72      	ldrb	r2, [r6, r5]
 8004d70:	785b      	ldrb	r3, [r3, #1]
 8004d72:	4310      	orrs	r0, r2
 8004d74:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8004d78:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
			break;
 8004d7c:	e7bc      	b.n	8004cf8 <get_fat+0x38>
		switch (fs->fs_type) {
 8004d7e:	2001      	movs	r0, #1
	return val;
 8004d80:	e7ba      	b.n	8004cf8 <get_fat+0x38>

08004d82 <dir_sdi>:
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8004d82:	f8d0 2208 	ldr.w	r2, [r0, #520]	; 0x208
{
 8004d86:	b570      	push	{r4, r5, r6, lr}
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8004d88:	2a01      	cmp	r2, #1
{
 8004d8a:	4604      	mov	r4, r0
 8004d8c:	460d      	mov	r5, r1
	dp->index = (WORD)idx;	/* Current index */
 8004d8e:	f8a0 1206 	strh.w	r1, [r0, #518]	; 0x206
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8004d92:	d101      	bne.n	8004d98 <dir_sdi+0x16>
		return FR_INT_ERR;
 8004d94:	2002      	movs	r0, #2
}
 8004d96:	bd70      	pop	{r4, r5, r6, pc}
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8004d98:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
 8004d9c:	f8d3 1214 	ldr.w	r1, [r3, #532]	; 0x214
 8004da0:	4291      	cmp	r1, r2
 8004da2:	d9f7      	bls.n	8004d94 <dir_sdi+0x12>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8004da4:	b9fa      	cbnz	r2, 8004de6 <dir_sdi+0x64>
 8004da6:	f893 1200 	ldrb.w	r1, [r3, #512]	; 0x200
 8004daa:	2903      	cmp	r1, #3
 8004dac:	d102      	bne.n	8004db4 <dir_sdi+0x32>
		clst = dp->fs->dirbase;
 8004dae:	f8d3 1224 	ldr.w	r1, [r3, #548]	; 0x224
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8004db2:	b9b9      	cbnz	r1, 8004de4 <dir_sdi+0x62>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8004db4:	f8b3 1208 	ldrh.w	r1, [r3, #520]	; 0x208
 8004db8:	42a9      	cmp	r1, r5
 8004dba:	d9eb      	bls.n	8004d94 <dir_sdi+0x12>
		sect = dp->fs->dirbase;
 8004dbc:	f8d3 0224 	ldr.w	r0, [r3, #548]	; 0x224
	dp->clust = clst;	/* Current cluster# */
 8004dc0:	f8c4 220c 	str.w	r2, [r4, #524]	; 0x20c
	if (!sect) return FR_INT_ERR;
 8004dc4:	2800      	cmp	r0, #0
 8004dc6:	d0e5      	beq.n	8004d94 <dir_sdi+0x12>
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8004dc8:	f8d4 1200 	ldr.w	r1, [r4, #512]	; 0x200
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8004dcc:	eb00 1015 	add.w	r0, r0, r5, lsr #4
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8004dd0:	f005 050f 	and.w	r5, r5, #15
 8004dd4:	eb01 1545 	add.w	r5, r1, r5, lsl #5
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8004dd8:	f8c4 0210 	str.w	r0, [r4, #528]	; 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8004ddc:	f8c4 5214 	str.w	r5, [r4, #532]	; 0x214
	return FR_OK;
 8004de0:	2000      	movs	r0, #0
 8004de2:	e7d8      	b.n	8004d96 <dir_sdi+0x14>
 8004de4:	460a      	mov	r2, r1
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8004de6:	f893 6202 	ldrb.w	r6, [r3, #514]	; 0x202
 8004dea:	0136      	lsls	r6, r6, #4
		while (idx >= ic) {	/* Follow cluster chain */
 8004dec:	42b5      	cmp	r5, r6
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8004dee:	4611      	mov	r1, r2
 8004df0:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
		while (idx >= ic) {	/* Follow cluster chain */
 8004df4:	d202      	bcs.n	8004dfc <dir_sdi+0x7a>
		sect = clust2sect(dp->fs, clst);
 8004df6:	f7ff ff55 	bl	8004ca4 <clust2sect>
 8004dfa:	e7e1      	b.n	8004dc0 <dir_sdi+0x3e>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8004dfc:	f7ff ff60 	bl	8004cc0 <get_fat>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004e00:	1c43      	adds	r3, r0, #1
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8004e02:	4602      	mov	r2, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004e04:	d009      	beq.n	8004e1a <dir_sdi+0x98>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8004e06:	2801      	cmp	r0, #1
 8004e08:	d9c4      	bls.n	8004d94 <dir_sdi+0x12>
 8004e0a:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 8004e0e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004e12:	4283      	cmp	r3, r0
 8004e14:	d9be      	bls.n	8004d94 <dir_sdi+0x12>
			idx -= ic;
 8004e16:	1bad      	subs	r5, r5, r6
 8004e18:	e7e8      	b.n	8004dec <dir_sdi+0x6a>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004e1a:	2001      	movs	r0, #1
 8004e1c:	e7bb      	b.n	8004d96 <dir_sdi+0x14>

08004e1e <put_fat>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8004e1e:	2901      	cmp	r1, #1
{
 8004e20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e24:	4605      	mov	r5, r0
 8004e26:	460c      	mov	r4, r1
 8004e28:	4616      	mov	r6, r2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8004e2a:	d970      	bls.n	8004f0e <put_fat+0xf0>
 8004e2c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8004e30:	428b      	cmp	r3, r1
 8004e32:	d96c      	bls.n	8004f0e <put_fat+0xf0>
		switch (fs->fs_type) {
 8004e34:	f890 3200 	ldrb.w	r3, [r0, #512]	; 0x200
 8004e38:	2b02      	cmp	r3, #2
 8004e3a:	d03c      	beq.n	8004eb6 <put_fat+0x98>
 8004e3c:	2b03      	cmp	r3, #3
 8004e3e:	d04b      	beq.n	8004ed8 <put_fat+0xba>
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	d164      	bne.n	8004f0e <put_fat+0xf0>
			bc = (UINT)clst; bc += bc / 2;
 8004e44:	eb01 0751 	add.w	r7, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004e48:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 8004e4c:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 8004e50:	f7ff fd7e 	bl	8004950 <move_window>
			if (res != FR_OK) break;
 8004e54:	bb28      	cbnz	r0, 8004ea2 <put_fat+0x84>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004e56:	f014 0401 	ands.w	r4, r4, #1
			p = &fs->win.d8[bc++ % SS(fs)];
 8004e5a:	f107 0801 	add.w	r8, r7, #1
 8004e5e:	f3c7 0708 	ubfx	r7, r7, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004e62:	bf17      	itett	ne
 8004e64:	5deb      	ldrbne	r3, [r5, r7]
 8004e66:	b2f3      	uxtbeq	r3, r6
 8004e68:	f003 020f 	andne.w	r2, r3, #15
 8004e6c:	0133      	lslne	r3, r6, #4
 8004e6e:	bf1c      	itt	ne
 8004e70:	f003 03f0 	andne.w	r3, r3, #240	; 0xf0
 8004e74:	4313      	orrne	r3, r2
 8004e76:	55eb      	strb	r3, [r5, r7]
			fs->wflag = 1;
 8004e78:	2301      	movs	r3, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004e7a:	f8d5 1220 	ldr.w	r1, [r5, #544]	; 0x220
 8004e7e:	4628      	mov	r0, r5
			fs->wflag = 1;
 8004e80:	f885 3204 	strb.w	r3, [r5, #516]	; 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004e84:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 8004e88:	f7ff fd62 	bl	8004950 <move_window>
			if (res != FR_OK) break;
 8004e8c:	b948      	cbnz	r0, 8004ea2 <put_fat+0x84>
			p = &fs->win.d8[bc % SS(fs)];
 8004e8e:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004e92:	b144      	cbz	r4, 8004ea6 <put_fat+0x88>
 8004e94:	f3c6 1207 	ubfx	r2, r6, #4, #8
 8004e98:	f805 2008 	strb.w	r2, [r5, r8]
			fs->wflag = 1;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	f885 3204 	strb.w	r3, [r5, #516]	; 0x204
}
 8004ea2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004ea6:	f815 2008 	ldrb.w	r2, [r5, r8]
 8004eaa:	f022 030f 	bic.w	r3, r2, #15
 8004eae:	f3c6 2203 	ubfx	r2, r6, #8, #4
 8004eb2:	431a      	orrs	r2, r3
 8004eb4:	e7f0      	b.n	8004e98 <put_fat+0x7a>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8004eb6:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 8004eba:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 8004ebe:	f7ff fd47 	bl	8004950 <move_window>
			if (res != FR_OK) break;
 8004ec2:	2800      	cmp	r0, #0
 8004ec4:	d1ed      	bne.n	8004ea2 <put_fat+0x84>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8004ec6:	0064      	lsls	r4, r4, #1
 8004ec8:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
			ST_WORD(p, (WORD)val);
 8004ecc:	552e      	strb	r6, [r5, r4]
 8004ece:	f3c6 2207 	ubfx	r2, r6, #8, #8
 8004ed2:	442c      	add	r4, r5
 8004ed4:	7062      	strb	r2, [r4, #1]
			fs->wflag = 1;
 8004ed6:	e7e1      	b.n	8004e9c <put_fat+0x7e>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8004ed8:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 8004edc:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8004ee0:	f7ff fd36 	bl	8004950 <move_window>
			if (res != FR_OK) break;
 8004ee4:	2800      	cmp	r0, #0
 8004ee6:	d1dc      	bne.n	8004ea2 <put_fat+0x84>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8004ee8:	00a4      	lsls	r4, r4, #2
 8004eea:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 8004eee:	1929      	adds	r1, r5, r4
			val |= LD_DWORD(p) & 0xF0000000;
 8004ef0:	78cb      	ldrb	r3, [r1, #3]
 8004ef2:	061b      	lsls	r3, r3, #24
 8004ef4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004ef8:	ea43 0206 	orr.w	r2, r3, r6
			ST_DWORD(p, val);
 8004efc:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8004f00:	552a      	strb	r2, [r5, r4]
 8004f02:	704b      	strb	r3, [r1, #1]
 8004f04:	0c13      	lsrs	r3, r2, #16
 8004f06:	0e12      	lsrs	r2, r2, #24
 8004f08:	708b      	strb	r3, [r1, #2]
 8004f0a:	70ca      	strb	r2, [r1, #3]
 8004f0c:	e7c6      	b.n	8004e9c <put_fat+0x7e>
		switch (fs->fs_type) {
 8004f0e:	2002      	movs	r0, #2
 8004f10:	e7c7      	b.n	8004ea2 <put_fat+0x84>

08004f12 <create_chain>:
{
 8004f12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f14:	4605      	mov	r5, r0
	if (clst == 0) {		/* Create a new chain */
 8004f16:	460f      	mov	r7, r1
 8004f18:	b989      	cbnz	r1, 8004f3e <create_chain+0x2c>
		scl = fs->last_clust;			/* Get suggested start point */
 8004f1a:	f8d0 620c 	ldr.w	r6, [r0, #524]	; 0x20c
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8004f1e:	b1f6      	cbz	r6, 8004f5e <create_chain+0x4c>
 8004f20:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8004f24:	429e      	cmp	r6, r3
 8004f26:	bf28      	it	cs
 8004f28:	2601      	movcs	r6, #1
	ncl = scl;				/* Start cluster */
 8004f2a:	4634      	mov	r4, r6
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8004f2c:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
		ncl++;							/* Next cluster */
 8004f30:	3401      	adds	r4, #1
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8004f32:	42a3      	cmp	r3, r4
 8004f34:	d816      	bhi.n	8004f64 <create_chain+0x52>
			if (ncl > scl) return 0;	/* No free cluster */
 8004f36:	2e01      	cmp	r6, #1
 8004f38:	d813      	bhi.n	8004f62 <create_chain+0x50>
 8004f3a:	2400      	movs	r4, #0
 8004f3c:	e005      	b.n	8004f4a <create_chain+0x38>
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8004f3e:	f7ff febf 	bl	8004cc0 <get_fat>
		if (cs < 2) return 1;			/* Invalid value */
 8004f42:	2801      	cmp	r0, #1
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8004f44:	4604      	mov	r4, r0
		if (cs < 2) return 1;			/* Invalid value */
 8004f46:	d802      	bhi.n	8004f4e <create_chain+0x3c>
 8004f48:	2401      	movs	r4, #1
}
 8004f4a:	4620      	mov	r0, r4
 8004f4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8004f4e:	1c60      	adds	r0, r4, #1
 8004f50:	d035      	beq.n	8004fbe <create_chain+0xac>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8004f52:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
 8004f56:	42a3      	cmp	r3, r4
 8004f58:	d8f7      	bhi.n	8004f4a <create_chain+0x38>
 8004f5a:	463e      	mov	r6, r7
 8004f5c:	e7e5      	b.n	8004f2a <create_chain+0x18>
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8004f5e:	2601      	movs	r6, #1
 8004f60:	e7e3      	b.n	8004f2a <create_chain+0x18>
			ncl = 2;
 8004f62:	2402      	movs	r4, #2
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8004f64:	4621      	mov	r1, r4
 8004f66:	4628      	mov	r0, r5
 8004f68:	f7ff feaa 	bl	8004cc0 <get_fat>
		if (cs == 0) break;				/* Found a free cluster */
 8004f6c:	b130      	cbz	r0, 8004f7c <create_chain+0x6a>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8004f6e:	1c41      	adds	r1, r0, #1
 8004f70:	d025      	beq.n	8004fbe <create_chain+0xac>
 8004f72:	2801      	cmp	r0, #1
 8004f74:	d0e8      	beq.n	8004f48 <create_chain+0x36>
		if (ncl == scl) return 0;		/* No free cluster */
 8004f76:	42b4      	cmp	r4, r6
 8004f78:	d1d8      	bne.n	8004f2c <create_chain+0x1a>
 8004f7a:	e7de      	b.n	8004f3a <create_chain+0x28>
	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8004f7c:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8004f80:	4621      	mov	r1, r4
 8004f82:	4628      	mov	r0, r5
 8004f84:	f7ff ff4b 	bl	8004e1e <put_fat>
	if (res == FR_OK && clst != 0) {
 8004f88:	b9b8      	cbnz	r0, 8004fba <create_chain+0xa8>
 8004f8a:	b97f      	cbnz	r7, 8004fac <create_chain+0x9a>
		if (fs->free_clust != 0xFFFFFFFF) {
 8004f8c:	f8d5 3210 	ldr.w	r3, [r5, #528]	; 0x210
		fs->last_clust = ncl;			/* Update FSINFO */
 8004f90:	f8c5 420c 	str.w	r4, [r5, #524]	; 0x20c
		if (fs->free_clust != 0xFFFFFFFF) {
 8004f94:	1c5a      	adds	r2, r3, #1
 8004f96:	d0d8      	beq.n	8004f4a <create_chain+0x38>
			fs->free_clust--;
 8004f98:	3b01      	subs	r3, #1
 8004f9a:	f8c5 3210 	str.w	r3, [r5, #528]	; 0x210
			fs->fsi_flag |= 1;
 8004f9e:	f895 3205 	ldrb.w	r3, [r5, #517]	; 0x205
 8004fa2:	f043 0301 	orr.w	r3, r3, #1
 8004fa6:	f885 3205 	strb.w	r3, [r5, #517]	; 0x205
 8004faa:	e7ce      	b.n	8004f4a <create_chain+0x38>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8004fac:	4622      	mov	r2, r4
 8004fae:	4639      	mov	r1, r7
 8004fb0:	4628      	mov	r0, r5
 8004fb2:	f7ff ff34 	bl	8004e1e <put_fat>
	if (res == FR_OK) {
 8004fb6:	2800      	cmp	r0, #0
 8004fb8:	d0e8      	beq.n	8004f8c <create_chain+0x7a>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8004fba:	2801      	cmp	r0, #1
 8004fbc:	d1c4      	bne.n	8004f48 <create_chain+0x36>
 8004fbe:	f04f 34ff 	mov.w	r4, #4294967295
 8004fc2:	e7c2      	b.n	8004f4a <create_chain+0x38>

08004fc4 <dir_next>:
{
 8004fc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	i = dp->index + 1;
 8004fc8:	f8b0 6206 	ldrh.w	r6, [r0, #518]	; 0x206
{
 8004fcc:	4604      	mov	r4, r0
	i = dp->index + 1;
 8004fce:	3601      	adds	r6, #1
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8004fd0:	b2b3      	uxth	r3, r6
{
 8004fd2:	4689      	mov	r9, r1
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8004fd4:	b913      	cbnz	r3, 8004fdc <dir_next+0x18>
		return FR_NO_FILE;
 8004fd6:	2004      	movs	r0, #4
}
 8004fd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8004fdc:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d0f8      	beq.n	8004fd6 <dir_next+0x12>
	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8004fe4:	f016 080f 	ands.w	r8, r6, #15
 8004fe8:	d10b      	bne.n	8005002 <dir_next+0x3e>
		if (!dp->clust) {		/* Static table */
 8004fea:	f8d4 120c 	ldr.w	r1, [r4, #524]	; 0x20c
		dp->sect++;					/* Next sector */
 8004fee:	3301      	adds	r3, #1
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8004ff0:	f8d0 0200 	ldr.w	r0, [r0, #512]	; 0x200
		dp->sect++;					/* Next sector */
 8004ff4:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
		if (!dp->clust) {		/* Static table */
 8004ff8:	b969      	cbnz	r1, 8005016 <dir_next+0x52>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8004ffa:	f8b0 3208 	ldrh.w	r3, [r0, #520]	; 0x208
 8004ffe:	42b3      	cmp	r3, r6
 8005000:	d9e9      	bls.n	8004fd6 <dir_next+0x12>
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8005002:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
	return FR_OK;
 8005006:	2000      	movs	r0, #0
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8005008:	eb03 1348 	add.w	r3, r3, r8, lsl #5
	dp->index = (WORD)i;	/* Current index */
 800500c:	f8a4 6206 	strh.w	r6, [r4, #518]	; 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8005010:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
	return FR_OK;
 8005014:	e7e0      	b.n	8004fd8 <dir_next+0x14>
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8005016:	f890 7202 	ldrb.w	r7, [r0, #514]	; 0x202
 800501a:	3f01      	subs	r7, #1
 800501c:	ea17 1716 	ands.w	r7, r7, r6, lsr #4
 8005020:	d1ef      	bne.n	8005002 <dir_next+0x3e>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8005022:	f7ff fe4d 	bl	8004cc0 <get_fat>
				if (clst <= 1) return FR_INT_ERR;
 8005026:	2801      	cmp	r0, #1
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8005028:	4605      	mov	r5, r0
				if (clst <= 1) return FR_INT_ERR;
 800502a:	d801      	bhi.n	8005030 <dir_next+0x6c>
 800502c:	2002      	movs	r0, #2
 800502e:	e7d3      	b.n	8004fd8 <dir_next+0x14>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8005030:	1c42      	adds	r2, r0, #1
 8005032:	d101      	bne.n	8005038 <dir_next+0x74>
 8005034:	2001      	movs	r0, #1
 8005036:	e7cf      	b.n	8004fd8 <dir_next+0x14>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8005038:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 800503c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8005040:	42ab      	cmp	r3, r5
 8005042:	d82f      	bhi.n	80050a4 <dir_next+0xe0>
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8005044:	f1b9 0f00 	cmp.w	r9, #0
 8005048:	d0c5      	beq.n	8004fd6 <dir_next+0x12>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 800504a:	f8d4 120c 	ldr.w	r1, [r4, #524]	; 0x20c
 800504e:	f7ff ff60 	bl	8004f12 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005052:	4605      	mov	r5, r0
 8005054:	2800      	cmp	r0, #0
 8005056:	d03e      	beq.n	80050d6 <dir_next+0x112>
					if (clst == 1) return FR_INT_ERR;
 8005058:	2801      	cmp	r0, #1
 800505a:	d0e7      	beq.n	800502c <dir_next+0x68>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800505c:	1c43      	adds	r3, r0, #1
 800505e:	d0e9      	beq.n	8005034 <dir_next+0x70>
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8005060:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8005064:	f7ff fc6d 	bl	8004942 <sync_window>
 8005068:	4601      	mov	r1, r0
 800506a:	2800      	cmp	r0, #0
 800506c:	d1e2      	bne.n	8005034 <dir_next+0x70>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 800506e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005072:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8005076:	f7ff fb33 	bl	80046e0 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 800507a:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
 800507e:	4629      	mov	r1, r5
 8005080:	4610      	mov	r0, r2
 8005082:	f7ff fe0f 	bl	8004ca4 <clust2sect>
						dp->fs->wflag = 1;
 8005086:	f04f 0901 	mov.w	r9, #1
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 800508a:	f8c2 022c 	str.w	r0, [r2, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800508e:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8005092:	f890 3202 	ldrb.w	r3, [r0, #514]	; 0x202
 8005096:	42bb      	cmp	r3, r7
 8005098:	d80e      	bhi.n	80050b8 <dir_next+0xf4>
					dp->fs->winsect -= c;						/* Rewind window offset */
 800509a:	f8d0 322c 	ldr.w	r3, [r0, #556]	; 0x22c
 800509e:	1bdb      	subs	r3, r3, r7
 80050a0:	f8c0 322c 	str.w	r3, [r0, #556]	; 0x22c
				dp->sect = clust2sect(dp->fs, clst);
 80050a4:	4629      	mov	r1, r5
 80050a6:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
				dp->clust = clst;				/* Initialize data for new cluster */
 80050aa:	f8c4 520c 	str.w	r5, [r4, #524]	; 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 80050ae:	f7ff fdf9 	bl	8004ca4 <clust2sect>
 80050b2:	f8c4 0210 	str.w	r0, [r4, #528]	; 0x210
 80050b6:	e7a4      	b.n	8005002 <dir_next+0x3e>
						dp->fs->wflag = 1;
 80050b8:	f880 9204 	strb.w	r9, [r0, #516]	; 0x204
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80050bc:	f7ff fc17 	bl	80048ee <sync_window.part.0>
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 80050c0:	2800      	cmp	r0, #0
 80050c2:	d1b7      	bne.n	8005034 <dir_next+0x70>
						dp->fs->winsect++;
 80050c4:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80050c8:	3701      	adds	r7, #1
						dp->fs->winsect++;
 80050ca:	f8d2 322c 	ldr.w	r3, [r2, #556]	; 0x22c
 80050ce:	3301      	adds	r3, #1
 80050d0:	f8c2 322c 	str.w	r3, [r2, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80050d4:	e7db      	b.n	800508e <dir_next+0xca>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80050d6:	2007      	movs	r0, #7
 80050d8:	e77e      	b.n	8004fd8 <dir_next+0x14>
	...

080050dc <follow_path>:
{
 80050dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 80050e0:	780b      	ldrb	r3, [r1, #0]
{
 80050e2:	4604      	mov	r4, r0
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 80050e4:	2b2f      	cmp	r3, #47	; 0x2f
{
 80050e6:	460d      	mov	r5, r1
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 80050e8:	d001      	beq.n	80050ee <follow_path+0x12>
 80050ea:	2b5c      	cmp	r3, #92	; 0x5c
 80050ec:	d100      	bne.n	80050f0 <follow_path+0x14>
		path++;
 80050ee:	3501      	adds	r5, #1
	dp->sclust = 0;							/* Always start from the root directory */
 80050f0:	2600      	movs	r6, #0
 80050f2:	f8c4 6208 	str.w	r6, [r4, #520]	; 0x208
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80050f6:	782b      	ldrb	r3, [r5, #0]
 80050f8:	2b1f      	cmp	r3, #31
 80050fa:	d935      	bls.n	8005168 <follow_path+0x8c>
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80050fc:	4e5d      	ldr	r6, [pc, #372]	; (8005274 <follow_path+0x198>)
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 80050fe:	782b      	ldrb	r3, [r5, #0]
 8005100:	46a8      	mov	r8, r5
 8005102:	2b2f      	cmp	r3, #47	; 0x2f
 8005104:	f105 0501 	add.w	r5, r5, #1
 8005108:	d0f9      	beq.n	80050fe <follow_path+0x22>
 800510a:	2b5c      	cmp	r3, #92	; 0x5c
 800510c:	d0f7      	beq.n	80050fe <follow_path+0x22>
	si = i = b = 0; ni = 8;
 800510e:	2700      	movs	r7, #0
	sfn = dp->fn;
 8005110:	f8d4 9218 	ldr.w	r9, [r4, #536]	; 0x218
	mem_set(sfn, ' ', 11);
 8005114:	220b      	movs	r2, #11
 8005116:	4648      	mov	r0, r9
 8005118:	2120      	movs	r1, #32
 800511a:	f7ff fae1 	bl	80046e0 <mem_set>
	si = i = b = 0; ni = 8;
 800511e:	2008      	movs	r0, #8
 8005120:	463a      	mov	r2, r7
 8005122:	f108 3cff 	add.w	ip, r8, #4294967295
 8005126:	f1c8 0e02 	rsb	lr, r8, #2
		c = (BYTE)p[si++];
 800512a:	eb0e 050c 	add.w	r5, lr, ip
 800512e:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 8005132:	2b20      	cmp	r3, #32
 8005134:	d926      	bls.n	8005184 <follow_path+0xa8>
 8005136:	2b2f      	cmp	r3, #47	; 0x2f
 8005138:	d024      	beq.n	8005184 <follow_path+0xa8>
 800513a:	2b5c      	cmp	r3, #92	; 0x5c
 800513c:	d022      	beq.n	8005184 <follow_path+0xa8>
		if (c == '.' || i >= ni) {
 800513e:	2b2e      	cmp	r3, #46	; 0x2e
 8005140:	f000 8084 	beq.w	800524c <follow_path+0x170>
 8005144:	42b8      	cmp	r0, r7
 8005146:	d90d      	bls.n	8005164 <follow_path+0x88>
		if (c >= 0x80) {				/* Extended character? */
 8005148:	0619      	lsls	r1, r3, #24
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800514a:	bf44      	itt	mi
 800514c:	3b80      	submi	r3, #128	; 0x80
 800514e:	5cf3      	ldrbmi	r3, [r6, r3]
 8005150:	4d49      	ldr	r5, [pc, #292]	; (8005278 <follow_path+0x19c>)
			b |= 3;						/* Eliminate NT flag */
 8005152:	bf48      	it	mi
 8005154:	f042 0203 	orrmi.w	r2, r2, #3
	while (*str && *str != chr) str++;
 8005158:	f815 1b01 	ldrb.w	r1, [r5], #1
 800515c:	2900      	cmp	r1, #0
 800515e:	d07c      	beq.n	800525a <follow_path+0x17e>
 8005160:	428b      	cmp	r3, r1
 8005162:	d1f9      	bne.n	8005158 <follow_path+0x7c>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 8005164:	2006      	movs	r0, #6
	return res;
 8005166:	e005      	b.n	8005174 <follow_path+0x98>
		res = dir_sdi(dp, 0);
 8005168:	4631      	mov	r1, r6
 800516a:	4620      	mov	r0, r4
 800516c:	f7ff fe09 	bl	8004d82 <dir_sdi>
		dp->dir = 0;
 8005170:	f8c4 6214 	str.w	r6, [r4, #532]	; 0x214
}
 8005174:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				b |= 2;
 8005178:	f042 0202 	orr.w	r2, r2, #2
			sfn[i++] = c;
 800517c:	f809 3007 	strb.w	r3, [r9, r7]
 8005180:	3701      	adds	r7, #1
 8005182:	e7d2      	b.n	800512a <follow_path+0x4e>
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8005184:	2b21      	cmp	r3, #33	; 0x21
 8005186:	bf34      	ite	cc
 8005188:	2304      	movcc	r3, #4
 800518a:	2300      	movcs	r3, #0
	*path = &p[si];						/* Return pointer to the next segment */
 800518c:	4445      	add	r5, r8
	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 800518e:	2f00      	cmp	r7, #0
 8005190:	d0e8      	beq.n	8005164 <follow_path+0x88>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 8005192:	f899 1000 	ldrb.w	r1, [r9]
 8005196:	29e5      	cmp	r1, #229	; 0xe5
 8005198:	bf04      	itt	eq
 800519a:	2105      	moveq	r1, #5
 800519c:	f889 1000 	strbeq.w	r1, [r9]
	if (ni == 8) b <<= 2;
 80051a0:	2808      	cmp	r0, #8
 80051a2:	d12e      	bne.n	8005202 <follow_path+0x126>
 80051a4:	0092      	lsls	r2, r2, #2
 80051a6:	b2d2      	uxtb	r2, r2
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 80051a8:	f002 020c 	and.w	r2, r2, #12
 80051ac:	2a04      	cmp	r2, #4
 80051ae:	bf08      	it	eq
 80051b0:	f043 0308 	orreq.w	r3, r3, #8
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80051b4:	2100      	movs	r1, #0
 80051b6:	4620      	mov	r0, r4
	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 80051b8:	f889 300b 	strb.w	r3, [r9, #11]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80051bc:	f7ff fde1 	bl	8004d82 <dir_sdi>
	if (res != FR_OK) return res;
 80051c0:	bb38      	cbnz	r0, 8005212 <follow_path+0x136>
		res = move_window(dp->fs, dp->sect);
 80051c2:	f8d4 1210 	ldr.w	r1, [r4, #528]	; 0x210
 80051c6:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 80051ca:	f7ff fbc1 	bl	8004950 <move_window>
		if (res != FR_OK) break;
 80051ce:	bb00      	cbnz	r0, 8005212 <follow_path+0x136>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 80051d0:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80051d4:	781a      	ldrb	r2, [r3, #0]
 80051d6:	b1da      	cbz	r2, 8005210 <follow_path+0x134>
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 80051d8:	7ad8      	ldrb	r0, [r3, #11]
 80051da:	f010 0008 	ands.w	r0, r0, #8
 80051de:	d10b      	bne.n	80051f8 <follow_path+0x11c>
 80051e0:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 80051e4:	f103 0c0b 	add.w	ip, r3, #11
	while (cnt-- && (r = *d++ - *s++) == 0) ;
 80051e8:	459c      	cmp	ip, r3
 80051ea:	d012      	beq.n	8005212 <follow_path+0x136>
 80051ec:	f813 7b01 	ldrb.w	r7, [r3], #1
 80051f0:	f812 1b01 	ldrb.w	r1, [r2], #1
 80051f4:	428f      	cmp	r7, r1
 80051f6:	d0f7      	beq.n	80051e8 <follow_path+0x10c>
		res = dir_next(dp, 0);		/* Next entry */
 80051f8:	2100      	movs	r1, #0
 80051fa:	4620      	mov	r0, r4
 80051fc:	f7ff fee2 	bl	8004fc4 <dir_next>
 8005200:	e7de      	b.n	80051c0 <follow_path+0xe4>
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 8005202:	f002 0103 	and.w	r1, r2, #3
 8005206:	2901      	cmp	r1, #1
 8005208:	bf08      	it	eq
 800520a:	f043 0310 	orreq.w	r3, r3, #16
 800520e:	e7cb      	b.n	80051a8 <follow_path+0xcc>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005210:	2004      	movs	r0, #4
			ns = dp->fn[NSFLAG];
 8005212:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 8005216:	7adb      	ldrb	r3, [r3, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8005218:	b130      	cbz	r0, 8005228 <follow_path+0x14c>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800521a:	2804      	cmp	r0, #4
 800521c:	d1aa      	bne.n	8005174 <follow_path+0x98>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800521e:	f013 0f04 	tst.w	r3, #4
 8005222:	bf08      	it	eq
 8005224:	2005      	moveq	r0, #5
 8005226:	e7a5      	b.n	8005174 <follow_path+0x98>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005228:	075a      	lsls	r2, r3, #29
 800522a:	d4a3      	bmi.n	8005174 <follow_path+0x98>
			dir = dp->dir;						/* Follow the sub-directory */
 800522c:	f8d4 1214 	ldr.w	r1, [r4, #532]	; 0x214
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8005230:	7acb      	ldrb	r3, [r1, #11]
 8005232:	06db      	lsls	r3, r3, #27
 8005234:	d508      	bpl.n	8005248 <follow_path+0x16c>
			dp->sclust = ld_clust(dp->fs, dir);
 8005236:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 800523a:	f893 0200 	ldrb.w	r0, [r3, #512]	; 0x200
 800523e:	f7ff fd29 	bl	8004c94 <ld_clust.isra.0>
 8005242:	f8c4 0208 	str.w	r0, [r4, #520]	; 0x208
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005246:	e75a      	b.n	80050fe <follow_path+0x22>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8005248:	2005      	movs	r0, #5
 800524a:	e793      	b.n	8005174 <follow_path+0x98>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 800524c:	2808      	cmp	r0, #8
 800524e:	d189      	bne.n	8005164 <follow_path+0x88>
			b <<= 2; continue;
 8005250:	0092      	lsls	r2, r2, #2
			i = 8; ni = 11;
 8005252:	4607      	mov	r7, r0
			b <<= 2; continue;
 8005254:	b2d2      	uxtb	r2, r2
			i = 8; ni = 11;
 8005256:	200b      	movs	r0, #11
			b <<= 2; continue;
 8005258:	e767      	b.n	800512a <follow_path+0x4e>
			if (IsUpper(c)) {			/* ASCII large capital? */
 800525a:	f1a3 0141 	sub.w	r1, r3, #65	; 0x41
 800525e:	2919      	cmp	r1, #25
 8005260:	d98a      	bls.n	8005178 <follow_path+0x9c>
				if (IsLower(c)) {		/* ASCII small capital? */
 8005262:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 8005266:	2919      	cmp	r1, #25
					b |= 1; c -= 0x20;
 8005268:	bf9e      	ittt	ls
 800526a:	3b20      	subls	r3, #32
 800526c:	f042 0201 	orrls.w	r2, r2, #1
 8005270:	b2db      	uxtbls	r3, r3
 8005272:	e783      	b.n	800517c <follow_path+0xa0>
 8005274:	08008c19 	.word	0x08008c19
 8005278:	08008c0a 	.word	0x08008c0a

0800527c <dir_register>:
{
 800527c:	b538      	push	{r3, r4, r5, lr}
	res = dir_sdi(dp, 0);
 800527e:	2100      	movs	r1, #0
{
 8005280:	4605      	mov	r5, r0
	res = dir_sdi(dp, 0);
 8005282:	f7ff fd7e 	bl	8004d82 <dir_sdi>
	if (res == FR_OK) {
 8005286:	4604      	mov	r4, r0
 8005288:	bb68      	cbnz	r0, 80052e6 <dir_register+0x6a>
			res = move_window(dp->fs, dp->sect);
 800528a:	f8d5 1210 	ldr.w	r1, [r5, #528]	; 0x210
 800528e:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
 8005292:	f7ff fb5d 	bl	8004950 <move_window>
			if (res != FR_OK) break;
 8005296:	4604      	mov	r4, r0
 8005298:	bb28      	cbnz	r0, 80052e6 <dir_register+0x6a>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 800529a:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
 800529e:	781b      	ldrb	r3, [r3, #0]
 80052a0:	2be5      	cmp	r3, #229	; 0xe5
 80052a2:	d119      	bne.n	80052d8 <dir_register+0x5c>
		res = move_window(dp->fs, dp->sect);
 80052a4:	f8d5 1210 	ldr.w	r1, [r5, #528]	; 0x210
 80052a8:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
 80052ac:	f7ff fb50 	bl	8004950 <move_window>
		if (res == FR_OK) {
 80052b0:	4604      	mov	r4, r0
 80052b2:	b978      	cbnz	r0, 80052d4 <dir_register+0x58>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 80052b4:	4601      	mov	r1, r0
 80052b6:	2220      	movs	r2, #32
 80052b8:	f8d5 0214 	ldr.w	r0, [r5, #532]	; 0x214
 80052bc:	f7ff fa10 	bl	80046e0 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 80052c0:	e9d5 0185 	ldrd	r0, r1, [r5, #532]	; 0x214
 80052c4:	220b      	movs	r2, #11
 80052c6:	f7ff fa01 	bl	80046cc <mem_cpy>
			dp->fs->wflag = 1;
 80052ca:	2201      	movs	r2, #1
 80052cc:	f8d5 3200 	ldr.w	r3, [r5, #512]	; 0x200
 80052d0:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
}
 80052d4:	4620      	mov	r0, r4
 80052d6:	bd38      	pop	{r3, r4, r5, pc}
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d0e3      	beq.n	80052a4 <dir_register+0x28>
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 80052dc:	2101      	movs	r1, #1
 80052de:	4628      	mov	r0, r5
 80052e0:	f7ff fe70 	bl	8004fc4 <dir_next>
 80052e4:	e7cf      	b.n	8005286 <dir_register+0xa>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80052e6:	2c04      	cmp	r4, #4
 80052e8:	bf08      	it	eq
 80052ea:	2407      	moveq	r4, #7
 80052ec:	e7f2      	b.n	80052d4 <dir_register+0x58>

080052ee <remove_chain>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80052ee:	2901      	cmp	r1, #1
{
 80052f0:	b570      	push	{r4, r5, r6, lr}
 80052f2:	4605      	mov	r5, r0
 80052f4:	460c      	mov	r4, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80052f6:	d929      	bls.n	800534c <remove_chain+0x5e>
 80052f8:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80052fc:	428b      	cmp	r3, r1
 80052fe:	d925      	bls.n	800534c <remove_chain+0x5e>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8005300:	4621      	mov	r1, r4
 8005302:	4628      	mov	r0, r5
 8005304:	f7ff fcdc 	bl	8004cc0 <get_fat>
			if (nxt == 0) break;				/* Empty cluster? */
 8005308:	4626      	mov	r6, r4
 800530a:	4604      	mov	r4, r0
 800530c:	b908      	cbnz	r0, 8005312 <remove_chain+0x24>
		res = FR_INT_ERR;
 800530e:	2000      	movs	r0, #0
}
 8005310:	bd70      	pop	{r4, r5, r6, pc}
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8005312:	2801      	cmp	r0, #1
 8005314:	d01a      	beq.n	800534c <remove_chain+0x5e>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8005316:	1c41      	adds	r1, r0, #1
 8005318:	d01a      	beq.n	8005350 <remove_chain+0x62>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 800531a:	2200      	movs	r2, #0
 800531c:	4631      	mov	r1, r6
 800531e:	4628      	mov	r0, r5
 8005320:	f7ff fd7d 	bl	8004e1e <put_fat>
			if (res != FR_OK) break;
 8005324:	2800      	cmp	r0, #0
 8005326:	d1f3      	bne.n	8005310 <remove_chain+0x22>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8005328:	f8d5 3210 	ldr.w	r3, [r5, #528]	; 0x210
 800532c:	1c5a      	adds	r2, r3, #1
 800532e:	d008      	beq.n	8005342 <remove_chain+0x54>
				fs->free_clust++;
 8005330:	3301      	adds	r3, #1
 8005332:	f8c5 3210 	str.w	r3, [r5, #528]	; 0x210
				fs->fsi_flag |= 1;
 8005336:	f895 3205 	ldrb.w	r3, [r5, #517]	; 0x205
 800533a:	f043 0301 	orr.w	r3, r3, #1
 800533e:	f885 3205 	strb.w	r3, [r5, #517]	; 0x205
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8005342:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
 8005346:	429c      	cmp	r4, r3
 8005348:	d3da      	bcc.n	8005300 <remove_chain+0x12>
 800534a:	e7e0      	b.n	800530e <remove_chain+0x20>
		res = FR_INT_ERR;
 800534c:	2002      	movs	r0, #2
 800534e:	e7df      	b.n	8005310 <remove_chain+0x22>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8005350:	2001      	movs	r0, #1
 8005352:	e7dd      	b.n	8005310 <remove_chain+0x22>

08005354 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8005354:	b530      	push	{r4, r5, lr}
 8005356:	b085      	sub	sp, #20
 8005358:	e9cd 1000 	strd	r1, r0, [sp]
	int vol;
	FRESULT res;
	const TCHAR *rp = path;


	vol = get_ldnumber(&rp);
 800535c:	a803      	add	r0, sp, #12
	const TCHAR *rp = path;
 800535e:	9103      	str	r1, [sp, #12]
{
 8005360:	4614      	mov	r4, r2
	vol = get_ldnumber(&rp);
 8005362:	f7ff fa95 	bl	8004890 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8005366:	1e01      	subs	r1, r0, #0
 8005368:	db19      	blt.n	800539e <f_mount+0x4a>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800536a:	4d0f      	ldr	r5, [pc, #60]	; (80053a8 <f_mount+0x54>)
 800536c:	f855 0021 	ldr.w	r0, [r5, r1, lsl #2]

	if (cfs) {
 8005370:	b120      	cbz	r0, 800537c <f_mount+0x28>
#if _FS_LOCK
		clear_lock(cfs);
 8005372:	f7ff fa6b 	bl	800484c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8005376:	2300      	movs	r3, #0
 8005378:	f880 3200 	strb.w	r3, [r0, #512]	; 0x200
	}

	if (fs) {
 800537c:	9801      	ldr	r0, [sp, #4]
 800537e:	b110      	cbz	r0, 8005386 <f_mount+0x32>
		fs->fs_type = 0;				/* Clear new fs object */
 8005380:	2300      	movs	r3, #0
 8005382:	f880 3200 	strb.w	r3, [r0, #512]	; 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8005386:	f845 0021 	str.w	r0, [r5, r1, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800538a:	b130      	cbz	r0, 800539a <f_mount+0x46>
 800538c:	2c01      	cmp	r4, #1
 800538e:	d108      	bne.n	80053a2 <f_mount+0x4e>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8005390:	2200      	movs	r2, #0
 8005392:	4669      	mov	r1, sp
 8005394:	a801      	add	r0, sp, #4
 8005396:	f7ff fb1f 	bl	80049d8 <find_volume>
	LEAVE_FF(fs, res);
}
 800539a:	b005      	add	sp, #20
 800539c:	bd30      	pop	{r4, r5, pc}
	if (vol < 0) return FR_INVALID_DRIVE;
 800539e:	200b      	movs	r0, #11
 80053a0:	e7fb      	b.n	800539a <f_mount+0x46>
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80053a2:	2000      	movs	r0, #0
 80053a4:	e7f9      	b.n	800539a <f_mount+0x46>
 80053a6:	bf00      	nop
 80053a8:	200081e0 	.word	0x200081e0

080053ac <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80053ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053b0:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 80053b4:	4617      	mov	r7, r2
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 80053b6:	4605      	mov	r5, r0
{
 80053b8:	9101      	str	r1, [sp, #4]
	if (!fp) return FR_INVALID_OBJECT;
 80053ba:	2800      	cmp	r0, #0
 80053bc:	f000 8090 	beq.w	80054e0 <f_open+0x134>
	fp->fs = 0;			/* Clear file object */
 80053c0:	2300      	movs	r3, #0

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 80053c2:	f002 021e 	and.w	r2, r2, #30
	fp->fs = 0;			/* Clear file object */
 80053c6:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 80053ca:	a901      	add	r1, sp, #4
 80053cc:	a886      	add	r0, sp, #536	; 0x218
 80053ce:	f7ff fb03 	bl	80049d8 <find_volume>
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 80053d2:	bb10      	cbnz	r0, 800541a <f_open+0x6e>
		INIT_BUF(dj);
 80053d4:	ab03      	add	r3, sp, #12
		res = follow_path(&dj, path);	/* Follow the file path */
 80053d6:	9901      	ldr	r1, [sp, #4]
 80053d8:	a806      	add	r0, sp, #24
		INIT_BUF(dj);
 80053da:	938c      	str	r3, [sp, #560]	; 0x230
		res = follow_path(&dj, path);	/* Follow the file path */
 80053dc:	f7ff fe7e 	bl	80050dc <follow_path>
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 80053e0:	f007 041f 	and.w	r4, r7, #31
		dir = dj.dir;
 80053e4:	9e8b      	ldr	r6, [sp, #556]	; 0x22c
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80053e6:	b940      	cbnz	r0, 80053fa <f_open+0x4e>
			if (!dir)	/* Default directory itself */
 80053e8:	b1de      	cbz	r6, 8005422 <f_open+0x76>
				res = FR_INVALID_NAME;
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80053ea:	f014 0f1e 	tst.w	r4, #30
 80053ee:	bf14      	ite	ne
 80053f0:	2101      	movne	r1, #1
 80053f2:	2100      	moveq	r1, #0
 80053f4:	a806      	add	r0, sp, #24
 80053f6:	f7ff f97b 	bl	80046f0 <chk_lock>
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80053fa:	f017 0f1c 	tst.w	r7, #28
 80053fe:	d064      	beq.n	80054ca <f_open+0x11e>
			if (res != FR_OK) {					/* No file, create new */
 8005400:	b188      	cbz	r0, 8005426 <f_open+0x7a>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8005402:	2804      	cmp	r0, #4
 8005404:	d109      	bne.n	800541a <f_open+0x6e>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005406:	4b48      	ldr	r3, [pc, #288]	; (8005528 <f_open+0x17c>)
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	b112      	cbz	r2, 8005412 <f_open+0x66>
 800540c:	68db      	ldr	r3, [r3, #12]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d168      	bne.n	80054e4 <f_open+0x138>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8005412:	a806      	add	r0, sp, #24
 8005414:	f7ff ff32 	bl	800527c <dir_register>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
						res = FR_EXIST;
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8005418:	b170      	cbz	r0, 8005438 <f_open+0x8c>
			fp->id = fp->fs->id;
		}
	}

	LEAVE_FF(dj.fs, res);
}
 800541a:	f50d 7d0e 	add.w	sp, sp, #568	; 0x238
 800541e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				res = FR_INVALID_NAME;
 8005422:	2006      	movs	r0, #6
 8005424:	e7e9      	b.n	80053fa <f_open+0x4e>
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8005426:	7af3      	ldrb	r3, [r6, #11]
 8005428:	f013 0f11 	tst.w	r3, #17
 800542c:	d156      	bne.n	80054dc <f_open+0x130>
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 800542e:	0778      	lsls	r0, r7, #29
 8005430:	d45a      	bmi.n	80054e8 <f_open+0x13c>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8005432:	073b      	lsls	r3, r7, #28
 8005434:	d533      	bpl.n	800549e <f_open+0xf2>
 8005436:	e002      	b.n	800543e <f_open+0x92>
				dir = dj.dir;					/* New entry */
 8005438:	9e8b      	ldr	r6, [sp, #556]	; 0x22c
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800543a:	f044 0408 	orr.w	r4, r4, #8
				dw = GET_FATTIME();				/* Created time */
 800543e:	f7ff f899 	bl	8004574 <get_fattime>
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8005442:	2700      	movs	r7, #0
				ST_DWORD(dir + DIR_CrtTime, dw);
 8005444:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8005448:	73b0      	strb	r0, [r6, #14]
 800544a:	73f3      	strb	r3, [r6, #15]
 800544c:	0c03      	lsrs	r3, r0, #16
 800544e:	0e00      	lsrs	r0, r0, #24
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8005450:	72f7      	strb	r7, [r6, #11]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 8005452:	7737      	strb	r7, [r6, #28]
 8005454:	7777      	strb	r7, [r6, #29]
 8005456:	77b7      	strb	r7, [r6, #30]
 8005458:	77f7      	strb	r7, [r6, #31]
				ST_DWORD(dir + DIR_CrtTime, dw);
 800545a:	7433      	strb	r3, [r6, #16]
 800545c:	7470      	strb	r0, [r6, #17]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 800545e:	9b86      	ldr	r3, [sp, #536]	; 0x218
 8005460:	4631      	mov	r1, r6
 8005462:	f893 0200 	ldrb.w	r0, [r3, #512]	; 0x200
 8005466:	f7ff fc15 	bl	8004c94 <ld_clust.isra.0>
				dj.fs->wflag = 1;
 800546a:	2301      	movs	r3, #1
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 800546c:	4601      	mov	r1, r0
	ST_WORD(dir + DIR_FstClusLO, cl);
 800546e:	76b7      	strb	r7, [r6, #26]
 8005470:	76f7      	strb	r7, [r6, #27]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8005472:	7537      	strb	r7, [r6, #20]
 8005474:	7577      	strb	r7, [r6, #21]
				dj.fs->wflag = 1;
 8005476:	9886      	ldr	r0, [sp, #536]	; 0x218
				if (cl) {						/* Remove the cluster chain if exist */
 8005478:	460f      	mov	r7, r1
				dj.fs->wflag = 1;
 800547a:	f880 3204 	strb.w	r3, [r0, #516]	; 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 800547e:	b171      	cbz	r1, 800549e <f_open+0xf2>
					dw = dj.fs->winsect;
 8005480:	f8d0 822c 	ldr.w	r8, [r0, #556]	; 0x22c
					res = remove_chain(dj.fs, cl);
 8005484:	f7ff ff33 	bl	80052ee <remove_chain>
					if (res == FR_OK) {
 8005488:	2800      	cmp	r0, #0
 800548a:	d1c6      	bne.n	800541a <f_open+0x6e>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 800548c:	9886      	ldr	r0, [sp, #536]	; 0x218
 800548e:	3f01      	subs	r7, #1
						res = move_window(dj.fs, dw);
 8005490:	4641      	mov	r1, r8
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8005492:	f8c0 720c 	str.w	r7, [r0, #524]	; 0x20c
						res = move_window(dj.fs, dw);
 8005496:	f7ff fa5b 	bl	8004950 <move_window>
		if (res == FR_OK) {
 800549a:	2800      	cmp	r0, #0
 800549c:	d1bd      	bne.n	800541a <f_open+0x6e>
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 800549e:	9b86      	ldr	r3, [sp, #536]	; 0x218
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80054a0:	0722      	lsls	r2, r4, #28
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 80054a2:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
				mode |= FA__WRITTEN;
 80054a6:	bf48      	it	mi
 80054a8:	f044 0420 	orrmi.w	r4, r4, #32
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80054ac:	f014 0ffe 	tst.w	r4, #254	; 0xfe
 80054b0:	bf14      	ite	ne
 80054b2:	2101      	movne	r1, #1
 80054b4:	2100      	moveq	r1, #0
			fp->dir_ptr = dir;
 80054b6:	e9c5 3687 	strd	r3, r6, [r5, #540]	; 0x21c
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80054ba:	a806      	add	r0, sp, #24
 80054bc:	f7ff f95a 	bl	8004774 <inc_lock>
 80054c0:	f8c5 0228 	str.w	r0, [r5, #552]	; 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 80054c4:	b9a0      	cbnz	r0, 80054f0 <f_open+0x144>
 80054c6:	2002      	movs	r0, #2
 80054c8:	e7a7      	b.n	800541a <f_open+0x6e>
			if (res == FR_OK) {					/* Follow succeeded */
 80054ca:	2800      	cmp	r0, #0
 80054cc:	d1a5      	bne.n	800541a <f_open+0x6e>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 80054ce:	7af3      	ldrb	r3, [r6, #11]
 80054d0:	06da      	lsls	r2, r3, #27
 80054d2:	d40b      	bmi.n	80054ec <f_open+0x140>
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 80054d4:	07bf      	lsls	r7, r7, #30
 80054d6:	d5e2      	bpl.n	800549e <f_open+0xf2>
 80054d8:	07d8      	lsls	r0, r3, #31
 80054da:	d5e0      	bpl.n	800549e <f_open+0xf2>
					res = FR_DENIED;
 80054dc:	2007      	movs	r0, #7
 80054de:	e79c      	b.n	800541a <f_open+0x6e>
	if (!fp) return FR_INVALID_OBJECT;
 80054e0:	2009      	movs	r0, #9
 80054e2:	e79a      	b.n	800541a <f_open+0x6e>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80054e4:	2012      	movs	r0, #18
 80054e6:	e798      	b.n	800541a <f_open+0x6e>
						res = FR_EXIST;
 80054e8:	2008      	movs	r0, #8
 80054ea:	e796      	b.n	800541a <f_open+0x6e>
					res = FR_NO_FILE;
 80054ec:	2004      	movs	r0, #4
 80054ee:	e794      	b.n	800541a <f_open+0x6e>
			fp->flag = mode;					/* File access mode */
 80054f0:	f885 4206 	strb.w	r4, [r5, #518]	; 0x206
			fp->err = 0;						/* Clear error flag */
 80054f4:	2400      	movs	r4, #0
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 80054f6:	9f86      	ldr	r7, [sp, #536]	; 0x218
			fp->err = 0;						/* Clear error flag */
 80054f8:	f885 4207 	strb.w	r4, [r5, #519]	; 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 80054fc:	f897 0200 	ldrb.w	r0, [r7, #512]	; 0x200
 8005500:	4631      	mov	r1, r6
 8005502:	f7ff fbc7 	bl	8004c94 <ld_clust.isra.0>
 8005506:	f8c5 0210 	str.w	r0, [r5, #528]	; 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 800550a:	69f3      	ldr	r3, [r6, #28]
			fp->id = fp->fs->id;
 800550c:	4620      	mov	r0, r4
			fp->fptr = 0;						/* File pointer */
 800550e:	e9c5 4382 	strd	r4, r3, [r5, #520]	; 0x208
			fp->id = fp->fs->id;
 8005512:	f8b7 3206 	ldrh.w	r3, [r7, #518]	; 0x206
			fp->dsect = 0;
 8005516:	f8c5 4218 	str.w	r4, [r5, #536]	; 0x218
			fp->cltbl = 0;						/* Normal seek mode */
 800551a:	f8c5 4224 	str.w	r4, [r5, #548]	; 0x224
			fp->fs = dj.fs;	 					/* Validate file object */
 800551e:	f8c5 7200 	str.w	r7, [r5, #512]	; 0x200
			fp->id = fp->fs->id;
 8005522:	f8a5 3204 	strh.w	r3, [r5, #516]	; 0x204
 8005526:	e778      	b.n	800541a <f_open+0x6e>
 8005528:	200081e4 	.word	0x200081e4

0800552c <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 800552c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005530:	469a      	mov	sl, r3
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 8005532:	2300      	movs	r3, #0
 8005534:	f8ca 3000 	str.w	r3, [sl]
{
 8005538:	4604      	mov	r4, r0
 800553a:	4689      	mov	r9, r1
 800553c:	4617      	mov	r7, r2

	res = validate(fp);							/* Check validity */
 800553e:	f7ff f9bf 	bl	80048c0 <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8005542:	4605      	mov	r5, r0
 8005544:	bb50      	cbnz	r0, 800559c <f_read+0x70>
	if (fp->err)								/* Check error */
 8005546:	f894 5207 	ldrb.w	r5, [r4, #519]	; 0x207
 800554a:	bb3d      	cbnz	r5, 800559c <f_read+0x70>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 800554c:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8005550:	f013 0301 	ands.w	r3, r3, #1
 8005554:	9300      	str	r3, [sp, #0]
 8005556:	f000 80ae 	beq.w	80056b6 <f_read+0x18a>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
 800555a:	e9d4 2682 	ldrd	r2, r6, [r4, #520]	; 0x208
 800555e:	1ab6      	subs	r6, r6, r2
 8005560:	42be      	cmp	r6, r7
 8005562:	bf28      	it	cs
 8005564:	463e      	movcs	r6, r7
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
 8005566:	b1ce      	cbz	r6, 800559c <f_read+0x70>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 8005568:	f8d4 1208 	ldr.w	r1, [r4, #520]	; 0x208
 800556c:	f3c1 0308 	ubfx	r3, r1, #0, #9
 8005570:	2b00      	cmp	r3, #0
 8005572:	f040 8091 	bne.w	8005698 <f_read+0x16c>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8005576:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 800557a:	f890 8202 	ldrb.w	r8, [r0, #514]	; 0x202
 800557e:	f108 38ff 	add.w	r8, r8, #4294967295
 8005582:	ea08 2851 	and.w	r8, r8, r1, lsr #9
			if (!csect) {						/* On the cluster boundary? */
 8005586:	f018 08ff 	ands.w	r8, r8, #255	; 0xff
 800558a:	d120      	bne.n	80055ce <f_read+0xa2>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800558c:	b951      	cbnz	r1, 80055a4 <f_read+0x78>
					clst = fp->sclust;			/* Follow from the origin */
 800558e:	f8d4 0210 	ldr.w	r0, [r4, #528]	; 0x210
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 8005592:	2801      	cmp	r0, #1
 8005594:	d812      	bhi.n	80055bc <f_read+0x90>
 8005596:	2502      	movs	r5, #2
 8005598:	f884 5207 	strb.w	r5, [r4, #519]	; 0x207
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
}
 800559c:	4628      	mov	r0, r5
 800559e:	b003      	add	sp, #12
 80055a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (fp->cltbl)
 80055a4:	f8d4 3224 	ldr.w	r3, [r4, #548]	; 0x224
 80055a8:	b11b      	cbz	r3, 80055b2 <f_read+0x86>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80055aa:	4620      	mov	r0, r4
 80055ac:	f7ff f95c 	bl	8004868 <clmt_clust>
 80055b0:	e7ef      	b.n	8005592 <f_read+0x66>
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 80055b2:	f8d4 1214 	ldr.w	r1, [r4, #532]	; 0x214
 80055b6:	f7ff fb83 	bl	8004cc0 <get_fat>
 80055ba:	e7ea      	b.n	8005592 <f_read+0x66>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80055bc:	1c42      	adds	r2, r0, #1
 80055be:	d104      	bne.n	80055ca <f_read+0x9e>
 80055c0:	2301      	movs	r3, #1
 80055c2:	9d00      	ldr	r5, [sp, #0]
 80055c4:	f884 3207 	strb.w	r3, [r4, #519]	; 0x207
 80055c8:	e7e8      	b.n	800559c <f_read+0x70>
				fp->clust = clst;				/* Update current cluster */
 80055ca:	f8c4 0214 	str.w	r0, [r4, #532]	; 0x214
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 80055ce:	f8d4 b200 	ldr.w	fp, [r4, #512]	; 0x200
 80055d2:	f8d4 1214 	ldr.w	r1, [r4, #532]	; 0x214
 80055d6:	4658      	mov	r0, fp
 80055d8:	f7ff fb64 	bl	8004ca4 <clust2sect>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 80055dc:	2800      	cmp	r0, #0
 80055de:	d0da      	beq.n	8005596 <f_read+0x6a>
			if (cc) {							/* Read maximum contiguous sectors directly */
 80055e0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
			sect += csect;
 80055e4:	eb00 0708 	add.w	r7, r0, r8
			if (cc) {							/* Read maximum contiguous sectors directly */
 80055e8:	d333      	bcc.n	8005652 <f_read+0x126>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 80055ea:	f89b 2202 	ldrb.w	r2, [fp, #514]	; 0x202
 80055ee:	eb08 2156 	add.w	r1, r8, r6, lsr #9
 80055f2:	4291      	cmp	r1, r2
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 80055f4:	ea4f 2356 	mov.w	r3, r6, lsr #9
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 80055f8:	4649      	mov	r1, r9
					cc = fp->fs->csize - csect;
 80055fa:	bf88      	it	hi
 80055fc:	eba2 0308 	subhi.w	r3, r2, r8
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 8005600:	f89b 0201 	ldrb.w	r0, [fp, #513]	; 0x201
 8005604:	463a      	mov	r2, r7
 8005606:	9301      	str	r3, [sp, #4]
 8005608:	f7ff f838 	bl	800467c <disk_read>
 800560c:	2800      	cmp	r0, #0
 800560e:	d1d7      	bne.n	80055c0 <f_read+0x94>
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 8005610:	f894 2206 	ldrb.w	r2, [r4, #518]	; 0x206
 8005614:	9b01      	ldr	r3, [sp, #4]
 8005616:	f012 0f40 	tst.w	r2, #64	; 0x40
 800561a:	d00c      	beq.n	8005636 <f_read+0x10a>
 800561c:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 8005620:	1bc0      	subs	r0, r0, r7
 8005622:	4283      	cmp	r3, r0
 8005624:	d907      	bls.n	8005636 <f_read+0x10a>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 8005626:	f44f 7200 	mov.w	r2, #512	; 0x200
 800562a:	4621      	mov	r1, r4
 800562c:	eb09 2040 	add.w	r0, r9, r0, lsl #9
 8005630:	f7ff f84c 	bl	80046cc <mem_cpy>
 8005634:	9b01      	ldr	r3, [sp, #4]
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 8005636:	025f      	lsls	r7, r3, #9
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8005638:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
 800563c:	44b9      	add	r9, r7
 800563e:	443b      	add	r3, r7
 8005640:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
 8005644:	f8da 3000 	ldr.w	r3, [sl]
 8005648:	1bf6      	subs	r6, r6, r7
 800564a:	443b      	add	r3, r7
 800564c:	f8ca 3000 	str.w	r3, [sl]
 8005650:	e789      	b.n	8005566 <f_read+0x3a>
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 8005652:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
 8005656:	4297      	cmp	r7, r2
 8005658:	d01c      	beq.n	8005694 <f_read+0x168>
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 800565a:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 800565e:	065b      	lsls	r3, r3, #25
 8005660:	d50d      	bpl.n	800567e <f_read+0x152>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8005662:	2301      	movs	r3, #1
 8005664:	4621      	mov	r1, r4
 8005666:	f89b 0201 	ldrb.w	r0, [fp, #513]	; 0x201
 800566a:	f7ff f815 	bl	8004698 <disk_write>
 800566e:	2800      	cmp	r0, #0
 8005670:	d1a6      	bne.n	80055c0 <f_read+0x94>
					fp->flag &= ~FA__DIRTY;
 8005672:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8005676:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800567a:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 800567e:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8005682:	2301      	movs	r3, #1
 8005684:	463a      	mov	r2, r7
 8005686:	4621      	mov	r1, r4
 8005688:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 800568c:	f7fe fff6 	bl	800467c <disk_read>
 8005690:	2800      	cmp	r0, #0
 8005692:	d195      	bne.n	80055c0 <f_read+0x94>
			fp->dsect = sect;
 8005694:	f8c4 7218 	str.w	r7, [r4, #536]	; 0x218
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 8005698:	f8d4 1208 	ldr.w	r1, [r4, #520]	; 0x208
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 800569c:	4648      	mov	r0, r9
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 800569e:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80056a2:	f5c1 7700 	rsb	r7, r1, #512	; 0x200
		if (rcnt > btr) rcnt = btr;
 80056a6:	42b7      	cmp	r7, r6
 80056a8:	bf28      	it	cs
 80056aa:	4637      	movcs	r7, r6
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 80056ac:	4421      	add	r1, r4
 80056ae:	463a      	mov	r2, r7
 80056b0:	f7ff f80c 	bl	80046cc <mem_cpy>
 80056b4:	e7c0      	b.n	8005638 <f_read+0x10c>
		LEAVE_FF(fp->fs, FR_DENIED);
 80056b6:	2507      	movs	r5, #7
 80056b8:	e770      	b.n	800559c <f_read+0x70>

080056ba <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80056ba:	b570      	push	{r4, r5, r6, lr}
 80056bc:	4604      	mov	r4, r0
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 80056be:	f7ff f8ff 	bl	80048c0 <validate>
	if (res == FR_OK) {
 80056c2:	2800      	cmp	r0, #0
 80056c4:	d159      	bne.n	800577a <f_sync+0xc0>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 80056c6:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 80056ca:	f013 0020 	ands.w	r0, r3, #32
 80056ce:	d054      	beq.n	800577a <f_sync+0xc0>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 80056d0:	065b      	lsls	r3, r3, #25
 80056d2:	d511      	bpl.n	80056f8 <f_sync+0x3e>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80056d4:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 80056d8:	2301      	movs	r3, #1
 80056da:	4621      	mov	r1, r4
 80056dc:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
 80056e0:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 80056e4:	f7fe ffd8 	bl	8004698 <disk_write>
 80056e8:	2800      	cmp	r0, #0
 80056ea:	d145      	bne.n	8005778 <f_sync+0xbe>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
 80056ec:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 80056f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056f4:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 80056f8:	f8d4 121c 	ldr.w	r1, [r4, #540]	; 0x21c
 80056fc:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8005700:	f7ff f926 	bl	8004950 <move_window>
 8005704:	4606      	mov	r6, r0
			if (res == FR_OK) {
 8005706:	bbc0      	cbnz	r0, 800577a <f_sync+0xc0>
				dir = fp->dir_ptr;
 8005708:	f8d4 5220 	ldr.w	r5, [r4, #544]	; 0x220
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 800570c:	7aeb      	ldrb	r3, [r5, #11]
 800570e:	f043 0320 	orr.w	r3, r3, #32
 8005712:	72eb      	strb	r3, [r5, #11]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8005714:	f8d4 320c 	ldr.w	r3, [r4, #524]	; 0x20c
 8005718:	772b      	strb	r3, [r5, #28]
 800571a:	f8b4 320c 	ldrh.w	r3, [r4, #524]	; 0x20c
 800571e:	0a1b      	lsrs	r3, r3, #8
 8005720:	776b      	strb	r3, [r5, #29]
 8005722:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 8005726:	77ab      	strb	r3, [r5, #30]
 8005728:	f894 320f 	ldrb.w	r3, [r4, #527]	; 0x20f
 800572c:	77eb      	strb	r3, [r5, #31]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 800572e:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
	ST_WORD(dir + DIR_FstClusLO, cl);
 8005732:	76ab      	strb	r3, [r5, #26]
 8005734:	f3c3 2207 	ubfx	r2, r3, #8, #8
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8005738:	0c1b      	lsrs	r3, r3, #16
 800573a:	752b      	strb	r3, [r5, #20]
 800573c:	0a1b      	lsrs	r3, r3, #8
 800573e:	756b      	strb	r3, [r5, #21]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8005740:	76ea      	strb	r2, [r5, #27]
				tm = GET_FATTIME();							/* Update updated time */
 8005742:	f7fe ff17 	bl	8004574 <get_fattime>
				ST_DWORD(dir + DIR_WrtTime, tm);
 8005746:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800574a:	75eb      	strb	r3, [r5, #23]
 800574c:	0c03      	lsrs	r3, r0, #16
 800574e:	762b      	strb	r3, [r5, #24]
 8005750:	0e03      	lsrs	r3, r0, #24
 8005752:	75a8      	strb	r0, [r5, #22]
 8005754:	766b      	strb	r3, [r5, #25]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8005756:	74ae      	strb	r6, [r5, #18]
 8005758:	74ee      	strb	r6, [r5, #19]
				fp->flag &= ~FA__WRITTEN;
 800575a:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
				fp->fs->wflag = 1;
 800575e:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
				fp->flag &= ~FA__WRITTEN;
 8005762:	f023 0320 	bic.w	r3, r3, #32
 8005766:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
				fp->fs->wflag = 1;
 800576a:	2301      	movs	r3, #1
 800576c:	f880 3204 	strb.w	r3, [r0, #516]	; 0x204
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
 8005770:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				res = sync_fs(fp->fs);
 8005774:	f7ff ba4c 	b.w	8004c10 <sync_fs>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8005778:	2001      	movs	r0, #1
}
 800577a:	bd70      	pop	{r4, r5, r6, pc}

0800577c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 800577c:	b510      	push	{r4, lr}
 800577e:	4604      	mov	r4, r0
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8005780:	f7ff ff9b 	bl	80056ba <f_sync>
	if (res == FR_OK)
 8005784:	b950      	cbnz	r0, 800579c <f_close+0x20>
#endif
	{
		res = validate(fp);				/* Lock volume */
 8005786:	4620      	mov	r0, r4
 8005788:	f7ff f89a 	bl	80048c0 <validate>
		if (res == FR_OK) {
 800578c:	b930      	cbnz	r0, 800579c <f_close+0x20>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 800578e:	f8d4 0228 	ldr.w	r0, [r4, #552]	; 0x228
 8005792:	f7ff f83b 	bl	800480c <dec_lock>
			if (res == FR_OK)
 8005796:	b908      	cbnz	r0, 800579c <f_close+0x20>
#endif
				fp->fs = 0;				/* Invalidate file object */
 8005798:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 800579c:	bd10      	pop	{r4, pc}
	...

080057a0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80057a0:	b530      	push	{r4, r5, lr}
  uint8_t ret = 1;
  uint8_t DiskNum = 0;
  
  if(disk.nbr <= _VOLUMES)
 80057a2:	4b0f      	ldr	r3, [pc, #60]	; (80057e0 <FATFS_LinkDriverEx+0x40>)
{
 80057a4:	4605      	mov	r5, r0
  if(disk.nbr <= _VOLUMES)
 80057a6:	7a58      	ldrb	r0, [r3, #9]
 80057a8:	2801      	cmp	r0, #1
 80057aa:	d816      	bhi.n	80057da <FATFS_LinkDriverEx+0x3a>
  {
    disk.is_initialized[disk.nbr] = 0;
 80057ac:	2000      	movs	r0, #0
 80057ae:	7a5c      	ldrb	r4, [r3, #9]
 80057b0:	b2e4      	uxtb	r4, r4
 80057b2:	5518      	strb	r0, [r3, r4]
    disk.drv[disk.nbr] = drv;  
 80057b4:	7a5c      	ldrb	r4, [r3, #9]
 80057b6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80057ba:	6065      	str	r5, [r4, #4]
    disk.lun[disk.nbr] = lun;  
 80057bc:	7a5c      	ldrb	r4, [r3, #9]
 80057be:	441c      	add	r4, r3
 80057c0:	7222      	strb	r2, [r4, #8]
    DiskNum = disk.nbr++;
 80057c2:	7a5a      	ldrb	r2, [r3, #9]
 80057c4:	1c54      	adds	r4, r2, #1
 80057c6:	b2e4      	uxtb	r4, r4
 80057c8:	725c      	strb	r4, [r3, #9]
    path[0] = DiskNum + '0';
    path[1] = ':';
 80057ca:	233a      	movs	r3, #58	; 0x3a
 80057cc:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 80057ce:	232f      	movs	r3, #47	; 0x2f
    path[0] = DiskNum + '0';
 80057d0:	3230      	adds	r2, #48	; 0x30
 80057d2:	700a      	strb	r2, [r1, #0]
    path[2] = '/';
 80057d4:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 80057d6:	70c8      	strb	r0, [r1, #3]
    ret = 0;
  }
  
  return ret;
}
 80057d8:	bd30      	pop	{r4, r5, pc}
  uint8_t ret = 1;
 80057da:	2001      	movs	r0, #1
 80057dc:	e7fc      	b.n	80057d8 <FATFS_LinkDriverEx+0x38>
 80057de:	bf00      	nop
 80057e0:	20008200 	.word	0x20008200

080057e4 <FATFS_LinkDriver>:
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
 80057e4:	2200      	movs	r2, #0
 80057e6:	f7ff bfdb 	b.w	80057a0 <FATFS_LinkDriverEx>
	...

080057ec <SD_initialize>:
  * @param  lun : not used 
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
  Stat = STA_NOINIT;
 80057ec:	2301      	movs	r3, #1
{
 80057ee:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 80057f0:	4c05      	ldr	r4, [pc, #20]	; (8005808 <SD_initialize+0x1c>)
 80057f2:	7023      	strb	r3, [r4, #0]
  
  /* Configure the uSD device */
  if(BSP_SD_Init() == MSD_OK)
 80057f4:	f7fe ff0e 	bl	8004614 <BSP_SD_Init>
 80057f8:	b918      	cbnz	r0, 8005802 <SD_initialize+0x16>
  {
    Stat &= ~STA_NOINIT;
 80057fa:	7823      	ldrb	r3, [r4, #0]
 80057fc:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8005800:	7023      	strb	r3, [r4, #0]
  }

  return Stat;
 8005802:	7820      	ldrb	r0, [r4, #0]
}
 8005804:	bd10      	pop	{r4, pc}
 8005806:	bf00      	nop
 8005808:	2000000c 	.word	0x2000000c

0800580c <SD_status>:
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
  Stat = STA_NOINIT;
 800580c:	2301      	movs	r3, #1
{
 800580e:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 8005810:	4c05      	ldr	r4, [pc, #20]	; (8005828 <SD_status+0x1c>)
 8005812:	7023      	strb	r3, [r4, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8005814:	f7fe fed0 	bl	80045b8 <BSP_SD_GetCardState>
 8005818:	b918      	cbnz	r0, 8005822 <SD_status+0x16>
  {
    Stat &= ~STA_NOINIT;
 800581a:	7823      	ldrb	r3, [r4, #0]
 800581c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8005820:	7023      	strb	r3, [r4, #0]
  }
  
  return Stat;
 8005822:	7820      	ldrb	r0, [r4, #0]
}
 8005824:	bd10      	pop	{r4, pc}
 8005826:	bf00      	nop
 8005828:	2000000c 	.word	0x2000000c

0800582c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800582c:	b530      	push	{r4, r5, lr}
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;
  
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800582e:	4b13      	ldr	r3, [pc, #76]	; (800587c <SD_ioctl+0x50>)
{
 8005830:	4615      	mov	r5, r2
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8005832:	781c      	ldrb	r4, [r3, #0]
{
 8005834:	b089      	sub	sp, #36	; 0x24
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8005836:	f014 0401 	ands.w	r4, r4, #1
 800583a:	d11a      	bne.n	8005872 <SD_ioctl+0x46>
  
  switch (cmd)
 800583c:	2903      	cmp	r1, #3
 800583e:	d803      	bhi.n	8005848 <SD_ioctl+0x1c>
 8005840:	e8df f001 	tbb	[pc, r1]
 8005844:	120c0619 	.word	0x120c0619
 8005848:	2404      	movs	r4, #4
  default:
    res = RES_PARERR;
  }
  
  return res;
}
 800584a:	4620      	mov	r0, r4
 800584c:	b009      	add	sp, #36	; 0x24
 800584e:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 8005850:	4668      	mov	r0, sp
 8005852:	f7fe febb 	bl	80045cc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8005856:	9b06      	ldr	r3, [sp, #24]
    *(DWORD*)buff = CardInfo.LogBlockSize;
 8005858:	602b      	str	r3, [r5, #0]
    break;
 800585a:	e7f6      	b.n	800584a <SD_ioctl+0x1e>
    BSP_SD_GetCardInfo(&CardInfo);
 800585c:	4668      	mov	r0, sp
 800585e:	f7fe feb5 	bl	80045cc <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8005862:	9b07      	ldr	r3, [sp, #28]
 8005864:	802b      	strh	r3, [r5, #0]
    break;
 8005866:	e7f0      	b.n	800584a <SD_ioctl+0x1e>
    BSP_SD_GetCardInfo(&CardInfo);
 8005868:	4668      	mov	r0, sp
 800586a:	f7fe feaf 	bl	80045cc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize;
 800586e:	9b07      	ldr	r3, [sp, #28]
 8005870:	e7f2      	b.n	8005858 <SD_ioctl+0x2c>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8005872:	2403      	movs	r4, #3
 8005874:	e7e9      	b.n	800584a <SD_ioctl+0x1e>
    res = RES_OK;
 8005876:	460c      	mov	r4, r1
 8005878:	e7e7      	b.n	800584a <SD_ioctl+0x1e>
 800587a:	bf00      	nop
 800587c:	2000000c 	.word	0x2000000c

08005880 <SD_write>:
{
 8005880:	4608      	mov	r0, r1
 8005882:	b510      	push	{r4, lr}
 8005884:	4611      	mov	r1, r2
 8005886:	461a      	mov	r2, r3
  if(BSP_SD_WriteBlocks((uint32_t*)buff, 
 8005888:	4b07      	ldr	r3, [pc, #28]	; (80058a8 <SD_write+0x28>)
 800588a:	f7fe fe85 	bl	8004598 <BSP_SD_WriteBlocks>
 800588e:	b140      	cbz	r0, 80058a2 <SD_write+0x22>
  DRESULT res = RES_ERROR;
 8005890:	2001      	movs	r0, #1
}
 8005892:	bd10      	pop	{r4, pc}
      if (timeout-- == 0)
 8005894:	3c01      	subs	r4, #1
 8005896:	d0fb      	beq.n	8005890 <SD_write+0x10>
    while(BSP_SD_GetCardState()!= MSD_OK)
 8005898:	f7fe fe8e 	bl	80045b8 <BSP_SD_GetCardState>
 800589c:	2800      	cmp	r0, #0
 800589e:	d1f9      	bne.n	8005894 <SD_write+0x14>
 80058a0:	e7f7      	b.n	8005892 <SD_write+0x12>
 80058a2:	4c02      	ldr	r4, [pc, #8]	; (80058ac <SD_write+0x2c>)
 80058a4:	e7f8      	b.n	8005898 <SD_write+0x18>
 80058a6:	bf00      	nop
 80058a8:	05f5e100 	.word	0x05f5e100
 80058ac:	000186a1 	.word	0x000186a1

080058b0 <SD_read>:
{
 80058b0:	4608      	mov	r0, r1
 80058b2:	b510      	push	{r4, lr}
 80058b4:	4611      	mov	r1, r2
 80058b6:	461a      	mov	r2, r3
  if(BSP_SD_ReadBlocks((uint32_t*)buff, 
 80058b8:	4b07      	ldr	r3, [pc, #28]	; (80058d8 <SD_read+0x28>)
 80058ba:	f7fe fe5d 	bl	8004578 <BSP_SD_ReadBlocks>
 80058be:	b140      	cbz	r0, 80058d2 <SD_read+0x22>
  DRESULT res = RES_ERROR;
 80058c0:	2001      	movs	r0, #1
}
 80058c2:	bd10      	pop	{r4, pc}
      if (timeout-- == 0)
 80058c4:	3c01      	subs	r4, #1
 80058c6:	d0fb      	beq.n	80058c0 <SD_read+0x10>
    while(BSP_SD_GetCardState()!= MSD_OK)
 80058c8:	f7fe fe76 	bl	80045b8 <BSP_SD_GetCardState>
 80058cc:	2800      	cmp	r0, #0
 80058ce:	d1f9      	bne.n	80058c4 <SD_read+0x14>
 80058d0:	e7f7      	b.n	80058c2 <SD_read+0x12>
 80058d2:	4c02      	ldr	r4, [pc, #8]	; (80058dc <SD_read+0x2c>)
 80058d4:	e7f8      	b.n	80058c8 <SD_read+0x18>
 80058d6:	bf00      	nop
 80058d8:	05f5e100 	.word	0x05f5e100
 80058dc:	000186a1 	.word	0x000186a1

080058e0 <__errno>:
 80058e0:	4b01      	ldr	r3, [pc, #4]	; (80058e8 <__errno+0x8>)
 80058e2:	6818      	ldr	r0, [r3, #0]
 80058e4:	4770      	bx	lr
 80058e6:	bf00      	nop
 80058e8:	20000010 	.word	0x20000010

080058ec <__libc_init_array>:
 80058ec:	b570      	push	{r4, r5, r6, lr}
 80058ee:	2600      	movs	r6, #0
 80058f0:	4d0c      	ldr	r5, [pc, #48]	; (8005924 <__libc_init_array+0x38>)
 80058f2:	4c0d      	ldr	r4, [pc, #52]	; (8005928 <__libc_init_array+0x3c>)
 80058f4:	1b64      	subs	r4, r4, r5
 80058f6:	10a4      	asrs	r4, r4, #2
 80058f8:	42a6      	cmp	r6, r4
 80058fa:	d109      	bne.n	8005910 <__libc_init_array+0x24>
 80058fc:	f001 fb00 	bl	8006f00 <_init>
 8005900:	2600      	movs	r6, #0
 8005902:	4d0a      	ldr	r5, [pc, #40]	; (800592c <__libc_init_array+0x40>)
 8005904:	4c0a      	ldr	r4, [pc, #40]	; (8005930 <__libc_init_array+0x44>)
 8005906:	1b64      	subs	r4, r4, r5
 8005908:	10a4      	asrs	r4, r4, #2
 800590a:	42a6      	cmp	r6, r4
 800590c:	d105      	bne.n	800591a <__libc_init_array+0x2e>
 800590e:	bd70      	pop	{r4, r5, r6, pc}
 8005910:	f855 3b04 	ldr.w	r3, [r5], #4
 8005914:	4798      	blx	r3
 8005916:	3601      	adds	r6, #1
 8005918:	e7ee      	b.n	80058f8 <__libc_init_array+0xc>
 800591a:	f855 3b04 	ldr.w	r3, [r5], #4
 800591e:	4798      	blx	r3
 8005920:	3601      	adds	r6, #1
 8005922:	e7f2      	b.n	800590a <__libc_init_array+0x1e>
 8005924:	08008ef8 	.word	0x08008ef8
 8005928:	08008ef8 	.word	0x08008ef8
 800592c:	08008ef8 	.word	0x08008ef8
 8005930:	08008efc 	.word	0x08008efc

08005934 <malloc>:
 8005934:	4b02      	ldr	r3, [pc, #8]	; (8005940 <malloc+0xc>)
 8005936:	4601      	mov	r1, r0
 8005938:	6818      	ldr	r0, [r3, #0]
 800593a:	f000 b88b 	b.w	8005a54 <_malloc_r>
 800593e:	bf00      	nop
 8005940:	20000010 	.word	0x20000010

08005944 <free>:
 8005944:	4b02      	ldr	r3, [pc, #8]	; (8005950 <free+0xc>)
 8005946:	4601      	mov	r1, r0
 8005948:	6818      	ldr	r0, [r3, #0]
 800594a:	f000 b81b 	b.w	8005984 <_free_r>
 800594e:	bf00      	nop
 8005950:	20000010 	.word	0x20000010

08005954 <memccpy>:
 8005954:	b510      	push	{r4, lr}
 8005956:	b2d2      	uxtb	r2, r2
 8005958:	3901      	subs	r1, #1
 800595a:	4403      	add	r3, r0
 800595c:	4298      	cmp	r0, r3
 800595e:	d101      	bne.n	8005964 <memccpy+0x10>
 8005960:	2000      	movs	r0, #0
 8005962:	e005      	b.n	8005970 <memccpy+0x1c>
 8005964:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005968:	4294      	cmp	r4, r2
 800596a:	f800 4b01 	strb.w	r4, [r0], #1
 800596e:	d1f5      	bne.n	800595c <memccpy+0x8>
 8005970:	bd10      	pop	{r4, pc}

08005972 <memset>:
 8005972:	4603      	mov	r3, r0
 8005974:	4402      	add	r2, r0
 8005976:	4293      	cmp	r3, r2
 8005978:	d100      	bne.n	800597c <memset+0xa>
 800597a:	4770      	bx	lr
 800597c:	f803 1b01 	strb.w	r1, [r3], #1
 8005980:	e7f9      	b.n	8005976 <memset+0x4>
	...

08005984 <_free_r>:
 8005984:	b538      	push	{r3, r4, r5, lr}
 8005986:	4605      	mov	r5, r0
 8005988:	2900      	cmp	r1, #0
 800598a:	d040      	beq.n	8005a0e <_free_r+0x8a>
 800598c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005990:	1f0c      	subs	r4, r1, #4
 8005992:	2b00      	cmp	r3, #0
 8005994:	bfb8      	it	lt
 8005996:	18e4      	addlt	r4, r4, r3
 8005998:	f000 fa1a 	bl	8005dd0 <__malloc_lock>
 800599c:	4a1c      	ldr	r2, [pc, #112]	; (8005a10 <_free_r+0x8c>)
 800599e:	6813      	ldr	r3, [r2, #0]
 80059a0:	b933      	cbnz	r3, 80059b0 <_free_r+0x2c>
 80059a2:	6063      	str	r3, [r4, #4]
 80059a4:	6014      	str	r4, [r2, #0]
 80059a6:	4628      	mov	r0, r5
 80059a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80059ac:	f000 ba16 	b.w	8005ddc <__malloc_unlock>
 80059b0:	42a3      	cmp	r3, r4
 80059b2:	d908      	bls.n	80059c6 <_free_r+0x42>
 80059b4:	6820      	ldr	r0, [r4, #0]
 80059b6:	1821      	adds	r1, r4, r0
 80059b8:	428b      	cmp	r3, r1
 80059ba:	bf01      	itttt	eq
 80059bc:	6819      	ldreq	r1, [r3, #0]
 80059be:	685b      	ldreq	r3, [r3, #4]
 80059c0:	1809      	addeq	r1, r1, r0
 80059c2:	6021      	streq	r1, [r4, #0]
 80059c4:	e7ed      	b.n	80059a2 <_free_r+0x1e>
 80059c6:	461a      	mov	r2, r3
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	b10b      	cbz	r3, 80059d0 <_free_r+0x4c>
 80059cc:	42a3      	cmp	r3, r4
 80059ce:	d9fa      	bls.n	80059c6 <_free_r+0x42>
 80059d0:	6811      	ldr	r1, [r2, #0]
 80059d2:	1850      	adds	r0, r2, r1
 80059d4:	42a0      	cmp	r0, r4
 80059d6:	d10b      	bne.n	80059f0 <_free_r+0x6c>
 80059d8:	6820      	ldr	r0, [r4, #0]
 80059da:	4401      	add	r1, r0
 80059dc:	1850      	adds	r0, r2, r1
 80059de:	4283      	cmp	r3, r0
 80059e0:	6011      	str	r1, [r2, #0]
 80059e2:	d1e0      	bne.n	80059a6 <_free_r+0x22>
 80059e4:	6818      	ldr	r0, [r3, #0]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	4401      	add	r1, r0
 80059ea:	6011      	str	r1, [r2, #0]
 80059ec:	6053      	str	r3, [r2, #4]
 80059ee:	e7da      	b.n	80059a6 <_free_r+0x22>
 80059f0:	d902      	bls.n	80059f8 <_free_r+0x74>
 80059f2:	230c      	movs	r3, #12
 80059f4:	602b      	str	r3, [r5, #0]
 80059f6:	e7d6      	b.n	80059a6 <_free_r+0x22>
 80059f8:	6820      	ldr	r0, [r4, #0]
 80059fa:	1821      	adds	r1, r4, r0
 80059fc:	428b      	cmp	r3, r1
 80059fe:	bf01      	itttt	eq
 8005a00:	6819      	ldreq	r1, [r3, #0]
 8005a02:	685b      	ldreq	r3, [r3, #4]
 8005a04:	1809      	addeq	r1, r1, r0
 8005a06:	6021      	streq	r1, [r4, #0]
 8005a08:	6063      	str	r3, [r4, #4]
 8005a0a:	6054      	str	r4, [r2, #4]
 8005a0c:	e7cb      	b.n	80059a6 <_free_r+0x22>
 8005a0e:	bd38      	pop	{r3, r4, r5, pc}
 8005a10:	2000820c 	.word	0x2000820c

08005a14 <sbrk_aligned>:
 8005a14:	b570      	push	{r4, r5, r6, lr}
 8005a16:	4e0e      	ldr	r6, [pc, #56]	; (8005a50 <sbrk_aligned+0x3c>)
 8005a18:	460c      	mov	r4, r1
 8005a1a:	6831      	ldr	r1, [r6, #0]
 8005a1c:	4605      	mov	r5, r0
 8005a1e:	b911      	cbnz	r1, 8005a26 <sbrk_aligned+0x12>
 8005a20:	f000 f88c 	bl	8005b3c <_sbrk_r>
 8005a24:	6030      	str	r0, [r6, #0]
 8005a26:	4621      	mov	r1, r4
 8005a28:	4628      	mov	r0, r5
 8005a2a:	f000 f887 	bl	8005b3c <_sbrk_r>
 8005a2e:	1c43      	adds	r3, r0, #1
 8005a30:	d00a      	beq.n	8005a48 <sbrk_aligned+0x34>
 8005a32:	1cc4      	adds	r4, r0, #3
 8005a34:	f024 0403 	bic.w	r4, r4, #3
 8005a38:	42a0      	cmp	r0, r4
 8005a3a:	d007      	beq.n	8005a4c <sbrk_aligned+0x38>
 8005a3c:	1a21      	subs	r1, r4, r0
 8005a3e:	4628      	mov	r0, r5
 8005a40:	f000 f87c 	bl	8005b3c <_sbrk_r>
 8005a44:	3001      	adds	r0, #1
 8005a46:	d101      	bne.n	8005a4c <sbrk_aligned+0x38>
 8005a48:	f04f 34ff 	mov.w	r4, #4294967295
 8005a4c:	4620      	mov	r0, r4
 8005a4e:	bd70      	pop	{r4, r5, r6, pc}
 8005a50:	20008210 	.word	0x20008210

08005a54 <_malloc_r>:
 8005a54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a58:	1ccd      	adds	r5, r1, #3
 8005a5a:	f025 0503 	bic.w	r5, r5, #3
 8005a5e:	3508      	adds	r5, #8
 8005a60:	2d0c      	cmp	r5, #12
 8005a62:	bf38      	it	cc
 8005a64:	250c      	movcc	r5, #12
 8005a66:	2d00      	cmp	r5, #0
 8005a68:	4607      	mov	r7, r0
 8005a6a:	db01      	blt.n	8005a70 <_malloc_r+0x1c>
 8005a6c:	42a9      	cmp	r1, r5
 8005a6e:	d905      	bls.n	8005a7c <_malloc_r+0x28>
 8005a70:	230c      	movs	r3, #12
 8005a72:	2600      	movs	r6, #0
 8005a74:	603b      	str	r3, [r7, #0]
 8005a76:	4630      	mov	r0, r6
 8005a78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a7c:	4e2e      	ldr	r6, [pc, #184]	; (8005b38 <_malloc_r+0xe4>)
 8005a7e:	f000 f9a7 	bl	8005dd0 <__malloc_lock>
 8005a82:	6833      	ldr	r3, [r6, #0]
 8005a84:	461c      	mov	r4, r3
 8005a86:	bb34      	cbnz	r4, 8005ad6 <_malloc_r+0x82>
 8005a88:	4629      	mov	r1, r5
 8005a8a:	4638      	mov	r0, r7
 8005a8c:	f7ff ffc2 	bl	8005a14 <sbrk_aligned>
 8005a90:	1c43      	adds	r3, r0, #1
 8005a92:	4604      	mov	r4, r0
 8005a94:	d14d      	bne.n	8005b32 <_malloc_r+0xde>
 8005a96:	6834      	ldr	r4, [r6, #0]
 8005a98:	4626      	mov	r6, r4
 8005a9a:	2e00      	cmp	r6, #0
 8005a9c:	d140      	bne.n	8005b20 <_malloc_r+0xcc>
 8005a9e:	6823      	ldr	r3, [r4, #0]
 8005aa0:	4631      	mov	r1, r6
 8005aa2:	4638      	mov	r0, r7
 8005aa4:	eb04 0803 	add.w	r8, r4, r3
 8005aa8:	f000 f848 	bl	8005b3c <_sbrk_r>
 8005aac:	4580      	cmp	r8, r0
 8005aae:	d13a      	bne.n	8005b26 <_malloc_r+0xd2>
 8005ab0:	6821      	ldr	r1, [r4, #0]
 8005ab2:	3503      	adds	r5, #3
 8005ab4:	1a6d      	subs	r5, r5, r1
 8005ab6:	f025 0503 	bic.w	r5, r5, #3
 8005aba:	3508      	adds	r5, #8
 8005abc:	2d0c      	cmp	r5, #12
 8005abe:	bf38      	it	cc
 8005ac0:	250c      	movcc	r5, #12
 8005ac2:	4638      	mov	r0, r7
 8005ac4:	4629      	mov	r1, r5
 8005ac6:	f7ff ffa5 	bl	8005a14 <sbrk_aligned>
 8005aca:	3001      	adds	r0, #1
 8005acc:	d02b      	beq.n	8005b26 <_malloc_r+0xd2>
 8005ace:	6823      	ldr	r3, [r4, #0]
 8005ad0:	442b      	add	r3, r5
 8005ad2:	6023      	str	r3, [r4, #0]
 8005ad4:	e00e      	b.n	8005af4 <_malloc_r+0xa0>
 8005ad6:	6822      	ldr	r2, [r4, #0]
 8005ad8:	1b52      	subs	r2, r2, r5
 8005ada:	d41e      	bmi.n	8005b1a <_malloc_r+0xc6>
 8005adc:	2a0b      	cmp	r2, #11
 8005ade:	d916      	bls.n	8005b0e <_malloc_r+0xba>
 8005ae0:	1961      	adds	r1, r4, r5
 8005ae2:	42a3      	cmp	r3, r4
 8005ae4:	6025      	str	r5, [r4, #0]
 8005ae6:	bf18      	it	ne
 8005ae8:	6059      	strne	r1, [r3, #4]
 8005aea:	6863      	ldr	r3, [r4, #4]
 8005aec:	bf08      	it	eq
 8005aee:	6031      	streq	r1, [r6, #0]
 8005af0:	5162      	str	r2, [r4, r5]
 8005af2:	604b      	str	r3, [r1, #4]
 8005af4:	4638      	mov	r0, r7
 8005af6:	f104 060b 	add.w	r6, r4, #11
 8005afa:	f000 f96f 	bl	8005ddc <__malloc_unlock>
 8005afe:	f026 0607 	bic.w	r6, r6, #7
 8005b02:	1d23      	adds	r3, r4, #4
 8005b04:	1af2      	subs	r2, r6, r3
 8005b06:	d0b6      	beq.n	8005a76 <_malloc_r+0x22>
 8005b08:	1b9b      	subs	r3, r3, r6
 8005b0a:	50a3      	str	r3, [r4, r2]
 8005b0c:	e7b3      	b.n	8005a76 <_malloc_r+0x22>
 8005b0e:	6862      	ldr	r2, [r4, #4]
 8005b10:	42a3      	cmp	r3, r4
 8005b12:	bf0c      	ite	eq
 8005b14:	6032      	streq	r2, [r6, #0]
 8005b16:	605a      	strne	r2, [r3, #4]
 8005b18:	e7ec      	b.n	8005af4 <_malloc_r+0xa0>
 8005b1a:	4623      	mov	r3, r4
 8005b1c:	6864      	ldr	r4, [r4, #4]
 8005b1e:	e7b2      	b.n	8005a86 <_malloc_r+0x32>
 8005b20:	4634      	mov	r4, r6
 8005b22:	6876      	ldr	r6, [r6, #4]
 8005b24:	e7b9      	b.n	8005a9a <_malloc_r+0x46>
 8005b26:	230c      	movs	r3, #12
 8005b28:	4638      	mov	r0, r7
 8005b2a:	603b      	str	r3, [r7, #0]
 8005b2c:	f000 f956 	bl	8005ddc <__malloc_unlock>
 8005b30:	e7a1      	b.n	8005a76 <_malloc_r+0x22>
 8005b32:	6025      	str	r5, [r4, #0]
 8005b34:	e7de      	b.n	8005af4 <_malloc_r+0xa0>
 8005b36:	bf00      	nop
 8005b38:	2000820c 	.word	0x2000820c

08005b3c <_sbrk_r>:
 8005b3c:	b538      	push	{r3, r4, r5, lr}
 8005b3e:	2300      	movs	r3, #0
 8005b40:	4d05      	ldr	r5, [pc, #20]	; (8005b58 <_sbrk_r+0x1c>)
 8005b42:	4604      	mov	r4, r0
 8005b44:	4608      	mov	r0, r1
 8005b46:	602b      	str	r3, [r5, #0]
 8005b48:	f7fc fe06 	bl	8002758 <_sbrk>
 8005b4c:	1c43      	adds	r3, r0, #1
 8005b4e:	d102      	bne.n	8005b56 <_sbrk_r+0x1a>
 8005b50:	682b      	ldr	r3, [r5, #0]
 8005b52:	b103      	cbz	r3, 8005b56 <_sbrk_r+0x1a>
 8005b54:	6023      	str	r3, [r4, #0]
 8005b56:	bd38      	pop	{r3, r4, r5, pc}
 8005b58:	20008214 	.word	0x20008214

08005b5c <siprintf>:
 8005b5c:	b40e      	push	{r1, r2, r3}
 8005b5e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005b62:	b500      	push	{lr}
 8005b64:	b09c      	sub	sp, #112	; 0x70
 8005b66:	ab1d      	add	r3, sp, #116	; 0x74
 8005b68:	9002      	str	r0, [sp, #8]
 8005b6a:	9006      	str	r0, [sp, #24]
 8005b6c:	9107      	str	r1, [sp, #28]
 8005b6e:	9104      	str	r1, [sp, #16]
 8005b70:	4808      	ldr	r0, [pc, #32]	; (8005b94 <siprintf+0x38>)
 8005b72:	4909      	ldr	r1, [pc, #36]	; (8005b98 <siprintf+0x3c>)
 8005b74:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b78:	9105      	str	r1, [sp, #20]
 8005b7a:	6800      	ldr	r0, [r0, #0]
 8005b7c:	a902      	add	r1, sp, #8
 8005b7e:	9301      	str	r3, [sp, #4]
 8005b80:	f000 f98e 	bl	8005ea0 <_svfiprintf_r>
 8005b84:	2200      	movs	r2, #0
 8005b86:	9b02      	ldr	r3, [sp, #8]
 8005b88:	701a      	strb	r2, [r3, #0]
 8005b8a:	b01c      	add	sp, #112	; 0x70
 8005b8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b90:	b003      	add	sp, #12
 8005b92:	4770      	bx	lr
 8005b94:	20000010 	.word	0x20000010
 8005b98:	ffff0208 	.word	0xffff0208

08005b9c <strcpy>:
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005ba2:	f803 2b01 	strb.w	r2, [r3], #1
 8005ba6:	2a00      	cmp	r2, #0
 8005ba8:	d1f9      	bne.n	8005b9e <strcpy+0x2>
 8005baa:	4770      	bx	lr

08005bac <strtok>:
 8005bac:	4b16      	ldr	r3, [pc, #88]	; (8005c08 <strtok+0x5c>)
 8005bae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bb2:	681f      	ldr	r7, [r3, #0]
 8005bb4:	4605      	mov	r5, r0
 8005bb6:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8005bb8:	460e      	mov	r6, r1
 8005bba:	b9ec      	cbnz	r4, 8005bf8 <strtok+0x4c>
 8005bbc:	2050      	movs	r0, #80	; 0x50
 8005bbe:	f7ff feb9 	bl	8005934 <malloc>
 8005bc2:	4602      	mov	r2, r0
 8005bc4:	65b8      	str	r0, [r7, #88]	; 0x58
 8005bc6:	b920      	cbnz	r0, 8005bd2 <strtok+0x26>
 8005bc8:	2157      	movs	r1, #87	; 0x57
 8005bca:	4b10      	ldr	r3, [pc, #64]	; (8005c0c <strtok+0x60>)
 8005bcc:	4810      	ldr	r0, [pc, #64]	; (8005c10 <strtok+0x64>)
 8005bce:	f000 f8cf 	bl	8005d70 <__assert_func>
 8005bd2:	e9c0 4400 	strd	r4, r4, [r0]
 8005bd6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8005bda:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8005bde:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8005be2:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8005be6:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8005bea:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8005bee:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8005bf2:	6184      	str	r4, [r0, #24]
 8005bf4:	7704      	strb	r4, [r0, #28]
 8005bf6:	6244      	str	r4, [r0, #36]	; 0x24
 8005bf8:	4631      	mov	r1, r6
 8005bfa:	4628      	mov	r0, r5
 8005bfc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005bfe:	2301      	movs	r3, #1
 8005c00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c04:	f000 b806 	b.w	8005c14 <__strtok_r>
 8005c08:	20000010 	.word	0x20000010
 8005c0c:	08008cb4 	.word	0x08008cb4
 8005c10:	08008ccb 	.word	0x08008ccb

08005c14 <__strtok_r>:
 8005c14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c16:	b908      	cbnz	r0, 8005c1c <__strtok_r+0x8>
 8005c18:	6810      	ldr	r0, [r2, #0]
 8005c1a:	b188      	cbz	r0, 8005c40 <__strtok_r+0x2c>
 8005c1c:	4604      	mov	r4, r0
 8005c1e:	460f      	mov	r7, r1
 8005c20:	4620      	mov	r0, r4
 8005c22:	f814 5b01 	ldrb.w	r5, [r4], #1
 8005c26:	f817 6b01 	ldrb.w	r6, [r7], #1
 8005c2a:	b91e      	cbnz	r6, 8005c34 <__strtok_r+0x20>
 8005c2c:	b965      	cbnz	r5, 8005c48 <__strtok_r+0x34>
 8005c2e:	4628      	mov	r0, r5
 8005c30:	6015      	str	r5, [r2, #0]
 8005c32:	e005      	b.n	8005c40 <__strtok_r+0x2c>
 8005c34:	42b5      	cmp	r5, r6
 8005c36:	d1f6      	bne.n	8005c26 <__strtok_r+0x12>
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d1f0      	bne.n	8005c1e <__strtok_r+0xa>
 8005c3c:	6014      	str	r4, [r2, #0]
 8005c3e:	7003      	strb	r3, [r0, #0]
 8005c40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c42:	461c      	mov	r4, r3
 8005c44:	e00c      	b.n	8005c60 <__strtok_r+0x4c>
 8005c46:	b915      	cbnz	r5, 8005c4e <__strtok_r+0x3a>
 8005c48:	460e      	mov	r6, r1
 8005c4a:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005c4e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8005c52:	42ab      	cmp	r3, r5
 8005c54:	d1f7      	bne.n	8005c46 <__strtok_r+0x32>
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d0f3      	beq.n	8005c42 <__strtok_r+0x2e>
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8005c60:	6014      	str	r4, [r2, #0]
 8005c62:	e7ed      	b.n	8005c40 <__strtok_r+0x2c>

08005c64 <_strtol_l.constprop.0>:
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c6a:	4680      	mov	r8, r0
 8005c6c:	d001      	beq.n	8005c72 <_strtol_l.constprop.0+0xe>
 8005c6e:	2b24      	cmp	r3, #36	; 0x24
 8005c70:	d906      	bls.n	8005c80 <_strtol_l.constprop.0+0x1c>
 8005c72:	f7ff fe35 	bl	80058e0 <__errno>
 8005c76:	2316      	movs	r3, #22
 8005c78:	6003      	str	r3, [r0, #0]
 8005c7a:	2000      	movs	r0, #0
 8005c7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c80:	460d      	mov	r5, r1
 8005c82:	4f35      	ldr	r7, [pc, #212]	; (8005d58 <_strtol_l.constprop.0+0xf4>)
 8005c84:	4628      	mov	r0, r5
 8005c86:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005c8a:	5de6      	ldrb	r6, [r4, r7]
 8005c8c:	f016 0608 	ands.w	r6, r6, #8
 8005c90:	d1f8      	bne.n	8005c84 <_strtol_l.constprop.0+0x20>
 8005c92:	2c2d      	cmp	r4, #45	; 0x2d
 8005c94:	d12f      	bne.n	8005cf6 <_strtol_l.constprop.0+0x92>
 8005c96:	2601      	movs	r6, #1
 8005c98:	782c      	ldrb	r4, [r5, #0]
 8005c9a:	1c85      	adds	r5, r0, #2
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d057      	beq.n	8005d50 <_strtol_l.constprop.0+0xec>
 8005ca0:	2b10      	cmp	r3, #16
 8005ca2:	d109      	bne.n	8005cb8 <_strtol_l.constprop.0+0x54>
 8005ca4:	2c30      	cmp	r4, #48	; 0x30
 8005ca6:	d107      	bne.n	8005cb8 <_strtol_l.constprop.0+0x54>
 8005ca8:	7828      	ldrb	r0, [r5, #0]
 8005caa:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8005cae:	2858      	cmp	r0, #88	; 0x58
 8005cb0:	d149      	bne.n	8005d46 <_strtol_l.constprop.0+0xe2>
 8005cb2:	2310      	movs	r3, #16
 8005cb4:	786c      	ldrb	r4, [r5, #1]
 8005cb6:	3502      	adds	r5, #2
 8005cb8:	2700      	movs	r7, #0
 8005cba:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8005cbe:	f10e 3eff 	add.w	lr, lr, #4294967295
 8005cc2:	fbbe f9f3 	udiv	r9, lr, r3
 8005cc6:	4638      	mov	r0, r7
 8005cc8:	fb03 ea19 	mls	sl, r3, r9, lr
 8005ccc:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8005cd0:	f1bc 0f09 	cmp.w	ip, #9
 8005cd4:	d814      	bhi.n	8005d00 <_strtol_l.constprop.0+0x9c>
 8005cd6:	4664      	mov	r4, ip
 8005cd8:	42a3      	cmp	r3, r4
 8005cda:	dd22      	ble.n	8005d22 <_strtol_l.constprop.0+0xbe>
 8005cdc:	2f00      	cmp	r7, #0
 8005cde:	db1d      	blt.n	8005d1c <_strtol_l.constprop.0+0xb8>
 8005ce0:	4581      	cmp	r9, r0
 8005ce2:	d31b      	bcc.n	8005d1c <_strtol_l.constprop.0+0xb8>
 8005ce4:	d101      	bne.n	8005cea <_strtol_l.constprop.0+0x86>
 8005ce6:	45a2      	cmp	sl, r4
 8005ce8:	db18      	blt.n	8005d1c <_strtol_l.constprop.0+0xb8>
 8005cea:	2701      	movs	r7, #1
 8005cec:	fb00 4003 	mla	r0, r0, r3, r4
 8005cf0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005cf4:	e7ea      	b.n	8005ccc <_strtol_l.constprop.0+0x68>
 8005cf6:	2c2b      	cmp	r4, #43	; 0x2b
 8005cf8:	bf04      	itt	eq
 8005cfa:	782c      	ldrbeq	r4, [r5, #0]
 8005cfc:	1c85      	addeq	r5, r0, #2
 8005cfe:	e7cd      	b.n	8005c9c <_strtol_l.constprop.0+0x38>
 8005d00:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8005d04:	f1bc 0f19 	cmp.w	ip, #25
 8005d08:	d801      	bhi.n	8005d0e <_strtol_l.constprop.0+0xaa>
 8005d0a:	3c37      	subs	r4, #55	; 0x37
 8005d0c:	e7e4      	b.n	8005cd8 <_strtol_l.constprop.0+0x74>
 8005d0e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8005d12:	f1bc 0f19 	cmp.w	ip, #25
 8005d16:	d804      	bhi.n	8005d22 <_strtol_l.constprop.0+0xbe>
 8005d18:	3c57      	subs	r4, #87	; 0x57
 8005d1a:	e7dd      	b.n	8005cd8 <_strtol_l.constprop.0+0x74>
 8005d1c:	f04f 37ff 	mov.w	r7, #4294967295
 8005d20:	e7e6      	b.n	8005cf0 <_strtol_l.constprop.0+0x8c>
 8005d22:	2f00      	cmp	r7, #0
 8005d24:	da07      	bge.n	8005d36 <_strtol_l.constprop.0+0xd2>
 8005d26:	2322      	movs	r3, #34	; 0x22
 8005d28:	4670      	mov	r0, lr
 8005d2a:	f8c8 3000 	str.w	r3, [r8]
 8005d2e:	2a00      	cmp	r2, #0
 8005d30:	d0a4      	beq.n	8005c7c <_strtol_l.constprop.0+0x18>
 8005d32:	1e69      	subs	r1, r5, #1
 8005d34:	e005      	b.n	8005d42 <_strtol_l.constprop.0+0xde>
 8005d36:	b106      	cbz	r6, 8005d3a <_strtol_l.constprop.0+0xd6>
 8005d38:	4240      	negs	r0, r0
 8005d3a:	2a00      	cmp	r2, #0
 8005d3c:	d09e      	beq.n	8005c7c <_strtol_l.constprop.0+0x18>
 8005d3e:	2f00      	cmp	r7, #0
 8005d40:	d1f7      	bne.n	8005d32 <_strtol_l.constprop.0+0xce>
 8005d42:	6011      	str	r1, [r2, #0]
 8005d44:	e79a      	b.n	8005c7c <_strtol_l.constprop.0+0x18>
 8005d46:	2430      	movs	r4, #48	; 0x30
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d1b5      	bne.n	8005cb8 <_strtol_l.constprop.0+0x54>
 8005d4c:	2308      	movs	r3, #8
 8005d4e:	e7b3      	b.n	8005cb8 <_strtol_l.constprop.0+0x54>
 8005d50:	2c30      	cmp	r4, #48	; 0x30
 8005d52:	d0a9      	beq.n	8005ca8 <_strtol_l.constprop.0+0x44>
 8005d54:	230a      	movs	r3, #10
 8005d56:	e7af      	b.n	8005cb8 <_strtol_l.constprop.0+0x54>
 8005d58:	08008d65 	.word	0x08008d65

08005d5c <strtol>:
 8005d5c:	4613      	mov	r3, r2
 8005d5e:	460a      	mov	r2, r1
 8005d60:	4601      	mov	r1, r0
 8005d62:	4802      	ldr	r0, [pc, #8]	; (8005d6c <strtol+0x10>)
 8005d64:	6800      	ldr	r0, [r0, #0]
 8005d66:	f7ff bf7d 	b.w	8005c64 <_strtol_l.constprop.0>
 8005d6a:	bf00      	nop
 8005d6c:	20000010 	.word	0x20000010

08005d70 <__assert_func>:
 8005d70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005d72:	4614      	mov	r4, r2
 8005d74:	461a      	mov	r2, r3
 8005d76:	4b09      	ldr	r3, [pc, #36]	; (8005d9c <__assert_func+0x2c>)
 8005d78:	4605      	mov	r5, r0
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	68d8      	ldr	r0, [r3, #12]
 8005d7e:	b14c      	cbz	r4, 8005d94 <__assert_func+0x24>
 8005d80:	4b07      	ldr	r3, [pc, #28]	; (8005da0 <__assert_func+0x30>)
 8005d82:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005d86:	9100      	str	r1, [sp, #0]
 8005d88:	462b      	mov	r3, r5
 8005d8a:	4906      	ldr	r1, [pc, #24]	; (8005da4 <__assert_func+0x34>)
 8005d8c:	f000 f80e 	bl	8005dac <fiprintf>
 8005d90:	f000 fd34 	bl	80067fc <abort>
 8005d94:	4b04      	ldr	r3, [pc, #16]	; (8005da8 <__assert_func+0x38>)
 8005d96:	461c      	mov	r4, r3
 8005d98:	e7f3      	b.n	8005d82 <__assert_func+0x12>
 8005d9a:	bf00      	nop
 8005d9c:	20000010 	.word	0x20000010
 8005da0:	08008d28 	.word	0x08008d28
 8005da4:	08008d35 	.word	0x08008d35
 8005da8:	0800795a 	.word	0x0800795a

08005dac <fiprintf>:
 8005dac:	b40e      	push	{r1, r2, r3}
 8005dae:	b503      	push	{r0, r1, lr}
 8005db0:	4601      	mov	r1, r0
 8005db2:	ab03      	add	r3, sp, #12
 8005db4:	4805      	ldr	r0, [pc, #20]	; (8005dcc <fiprintf+0x20>)
 8005db6:	f853 2b04 	ldr.w	r2, [r3], #4
 8005dba:	6800      	ldr	r0, [r0, #0]
 8005dbc:	9301      	str	r3, [sp, #4]
 8005dbe:	f000 f997 	bl	80060f0 <_vfiprintf_r>
 8005dc2:	b002      	add	sp, #8
 8005dc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8005dc8:	b003      	add	sp, #12
 8005dca:	4770      	bx	lr
 8005dcc:	20000010 	.word	0x20000010

08005dd0 <__malloc_lock>:
 8005dd0:	4801      	ldr	r0, [pc, #4]	; (8005dd8 <__malloc_lock+0x8>)
 8005dd2:	f000 becf 	b.w	8006b74 <__retarget_lock_acquire_recursive>
 8005dd6:	bf00      	nop
 8005dd8:	20008218 	.word	0x20008218

08005ddc <__malloc_unlock>:
 8005ddc:	4801      	ldr	r0, [pc, #4]	; (8005de4 <__malloc_unlock+0x8>)
 8005dde:	f000 beca 	b.w	8006b76 <__retarget_lock_release_recursive>
 8005de2:	bf00      	nop
 8005de4:	20008218 	.word	0x20008218

08005de8 <__ssputs_r>:
 8005de8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005dec:	688e      	ldr	r6, [r1, #8]
 8005dee:	4682      	mov	sl, r0
 8005df0:	429e      	cmp	r6, r3
 8005df2:	460c      	mov	r4, r1
 8005df4:	4690      	mov	r8, r2
 8005df6:	461f      	mov	r7, r3
 8005df8:	d838      	bhi.n	8005e6c <__ssputs_r+0x84>
 8005dfa:	898a      	ldrh	r2, [r1, #12]
 8005dfc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005e00:	d032      	beq.n	8005e68 <__ssputs_r+0x80>
 8005e02:	6825      	ldr	r5, [r4, #0]
 8005e04:	6909      	ldr	r1, [r1, #16]
 8005e06:	3301      	adds	r3, #1
 8005e08:	eba5 0901 	sub.w	r9, r5, r1
 8005e0c:	6965      	ldr	r5, [r4, #20]
 8005e0e:	444b      	add	r3, r9
 8005e10:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005e14:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005e18:	106d      	asrs	r5, r5, #1
 8005e1a:	429d      	cmp	r5, r3
 8005e1c:	bf38      	it	cc
 8005e1e:	461d      	movcc	r5, r3
 8005e20:	0553      	lsls	r3, r2, #21
 8005e22:	d531      	bpl.n	8005e88 <__ssputs_r+0xa0>
 8005e24:	4629      	mov	r1, r5
 8005e26:	f7ff fe15 	bl	8005a54 <_malloc_r>
 8005e2a:	4606      	mov	r6, r0
 8005e2c:	b950      	cbnz	r0, 8005e44 <__ssputs_r+0x5c>
 8005e2e:	230c      	movs	r3, #12
 8005e30:	f04f 30ff 	mov.w	r0, #4294967295
 8005e34:	f8ca 3000 	str.w	r3, [sl]
 8005e38:	89a3      	ldrh	r3, [r4, #12]
 8005e3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e3e:	81a3      	strh	r3, [r4, #12]
 8005e40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e44:	464a      	mov	r2, r9
 8005e46:	6921      	ldr	r1, [r4, #16]
 8005e48:	f000 ff0a 	bl	8006c60 <memcpy>
 8005e4c:	89a3      	ldrh	r3, [r4, #12]
 8005e4e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005e52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e56:	81a3      	strh	r3, [r4, #12]
 8005e58:	6126      	str	r6, [r4, #16]
 8005e5a:	444e      	add	r6, r9
 8005e5c:	6026      	str	r6, [r4, #0]
 8005e5e:	463e      	mov	r6, r7
 8005e60:	6165      	str	r5, [r4, #20]
 8005e62:	eba5 0509 	sub.w	r5, r5, r9
 8005e66:	60a5      	str	r5, [r4, #8]
 8005e68:	42be      	cmp	r6, r7
 8005e6a:	d900      	bls.n	8005e6e <__ssputs_r+0x86>
 8005e6c:	463e      	mov	r6, r7
 8005e6e:	4632      	mov	r2, r6
 8005e70:	4641      	mov	r1, r8
 8005e72:	6820      	ldr	r0, [r4, #0]
 8005e74:	f000 ff02 	bl	8006c7c <memmove>
 8005e78:	68a3      	ldr	r3, [r4, #8]
 8005e7a:	2000      	movs	r0, #0
 8005e7c:	1b9b      	subs	r3, r3, r6
 8005e7e:	60a3      	str	r3, [r4, #8]
 8005e80:	6823      	ldr	r3, [r4, #0]
 8005e82:	4433      	add	r3, r6
 8005e84:	6023      	str	r3, [r4, #0]
 8005e86:	e7db      	b.n	8005e40 <__ssputs_r+0x58>
 8005e88:	462a      	mov	r2, r5
 8005e8a:	f000 ff11 	bl	8006cb0 <_realloc_r>
 8005e8e:	4606      	mov	r6, r0
 8005e90:	2800      	cmp	r0, #0
 8005e92:	d1e1      	bne.n	8005e58 <__ssputs_r+0x70>
 8005e94:	4650      	mov	r0, sl
 8005e96:	6921      	ldr	r1, [r4, #16]
 8005e98:	f7ff fd74 	bl	8005984 <_free_r>
 8005e9c:	e7c7      	b.n	8005e2e <__ssputs_r+0x46>
	...

08005ea0 <_svfiprintf_r>:
 8005ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ea4:	4698      	mov	r8, r3
 8005ea6:	898b      	ldrh	r3, [r1, #12]
 8005ea8:	4607      	mov	r7, r0
 8005eaa:	061b      	lsls	r3, r3, #24
 8005eac:	460d      	mov	r5, r1
 8005eae:	4614      	mov	r4, r2
 8005eb0:	b09d      	sub	sp, #116	; 0x74
 8005eb2:	d50e      	bpl.n	8005ed2 <_svfiprintf_r+0x32>
 8005eb4:	690b      	ldr	r3, [r1, #16]
 8005eb6:	b963      	cbnz	r3, 8005ed2 <_svfiprintf_r+0x32>
 8005eb8:	2140      	movs	r1, #64	; 0x40
 8005eba:	f7ff fdcb 	bl	8005a54 <_malloc_r>
 8005ebe:	6028      	str	r0, [r5, #0]
 8005ec0:	6128      	str	r0, [r5, #16]
 8005ec2:	b920      	cbnz	r0, 8005ece <_svfiprintf_r+0x2e>
 8005ec4:	230c      	movs	r3, #12
 8005ec6:	603b      	str	r3, [r7, #0]
 8005ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8005ecc:	e0d1      	b.n	8006072 <_svfiprintf_r+0x1d2>
 8005ece:	2340      	movs	r3, #64	; 0x40
 8005ed0:	616b      	str	r3, [r5, #20]
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	9309      	str	r3, [sp, #36]	; 0x24
 8005ed6:	2320      	movs	r3, #32
 8005ed8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005edc:	2330      	movs	r3, #48	; 0x30
 8005ede:	f04f 0901 	mov.w	r9, #1
 8005ee2:	f8cd 800c 	str.w	r8, [sp, #12]
 8005ee6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800608c <_svfiprintf_r+0x1ec>
 8005eea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005eee:	4623      	mov	r3, r4
 8005ef0:	469a      	mov	sl, r3
 8005ef2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ef6:	b10a      	cbz	r2, 8005efc <_svfiprintf_r+0x5c>
 8005ef8:	2a25      	cmp	r2, #37	; 0x25
 8005efa:	d1f9      	bne.n	8005ef0 <_svfiprintf_r+0x50>
 8005efc:	ebba 0b04 	subs.w	fp, sl, r4
 8005f00:	d00b      	beq.n	8005f1a <_svfiprintf_r+0x7a>
 8005f02:	465b      	mov	r3, fp
 8005f04:	4622      	mov	r2, r4
 8005f06:	4629      	mov	r1, r5
 8005f08:	4638      	mov	r0, r7
 8005f0a:	f7ff ff6d 	bl	8005de8 <__ssputs_r>
 8005f0e:	3001      	adds	r0, #1
 8005f10:	f000 80aa 	beq.w	8006068 <_svfiprintf_r+0x1c8>
 8005f14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f16:	445a      	add	r2, fp
 8005f18:	9209      	str	r2, [sp, #36]	; 0x24
 8005f1a:	f89a 3000 	ldrb.w	r3, [sl]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	f000 80a2 	beq.w	8006068 <_svfiprintf_r+0x1c8>
 8005f24:	2300      	movs	r3, #0
 8005f26:	f04f 32ff 	mov.w	r2, #4294967295
 8005f2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005f2e:	f10a 0a01 	add.w	sl, sl, #1
 8005f32:	9304      	str	r3, [sp, #16]
 8005f34:	9307      	str	r3, [sp, #28]
 8005f36:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005f3a:	931a      	str	r3, [sp, #104]	; 0x68
 8005f3c:	4654      	mov	r4, sl
 8005f3e:	2205      	movs	r2, #5
 8005f40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f44:	4851      	ldr	r0, [pc, #324]	; (800608c <_svfiprintf_r+0x1ec>)
 8005f46:	f000 fe7d 	bl	8006c44 <memchr>
 8005f4a:	9a04      	ldr	r2, [sp, #16]
 8005f4c:	b9d8      	cbnz	r0, 8005f86 <_svfiprintf_r+0xe6>
 8005f4e:	06d0      	lsls	r0, r2, #27
 8005f50:	bf44      	itt	mi
 8005f52:	2320      	movmi	r3, #32
 8005f54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f58:	0711      	lsls	r1, r2, #28
 8005f5a:	bf44      	itt	mi
 8005f5c:	232b      	movmi	r3, #43	; 0x2b
 8005f5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f62:	f89a 3000 	ldrb.w	r3, [sl]
 8005f66:	2b2a      	cmp	r3, #42	; 0x2a
 8005f68:	d015      	beq.n	8005f96 <_svfiprintf_r+0xf6>
 8005f6a:	4654      	mov	r4, sl
 8005f6c:	2000      	movs	r0, #0
 8005f6e:	f04f 0c0a 	mov.w	ip, #10
 8005f72:	9a07      	ldr	r2, [sp, #28]
 8005f74:	4621      	mov	r1, r4
 8005f76:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005f7a:	3b30      	subs	r3, #48	; 0x30
 8005f7c:	2b09      	cmp	r3, #9
 8005f7e:	d94e      	bls.n	800601e <_svfiprintf_r+0x17e>
 8005f80:	b1b0      	cbz	r0, 8005fb0 <_svfiprintf_r+0x110>
 8005f82:	9207      	str	r2, [sp, #28]
 8005f84:	e014      	b.n	8005fb0 <_svfiprintf_r+0x110>
 8005f86:	eba0 0308 	sub.w	r3, r0, r8
 8005f8a:	fa09 f303 	lsl.w	r3, r9, r3
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	46a2      	mov	sl, r4
 8005f92:	9304      	str	r3, [sp, #16]
 8005f94:	e7d2      	b.n	8005f3c <_svfiprintf_r+0x9c>
 8005f96:	9b03      	ldr	r3, [sp, #12]
 8005f98:	1d19      	adds	r1, r3, #4
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	9103      	str	r1, [sp, #12]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	bfbb      	ittet	lt
 8005fa2:	425b      	neglt	r3, r3
 8005fa4:	f042 0202 	orrlt.w	r2, r2, #2
 8005fa8:	9307      	strge	r3, [sp, #28]
 8005faa:	9307      	strlt	r3, [sp, #28]
 8005fac:	bfb8      	it	lt
 8005fae:	9204      	strlt	r2, [sp, #16]
 8005fb0:	7823      	ldrb	r3, [r4, #0]
 8005fb2:	2b2e      	cmp	r3, #46	; 0x2e
 8005fb4:	d10c      	bne.n	8005fd0 <_svfiprintf_r+0x130>
 8005fb6:	7863      	ldrb	r3, [r4, #1]
 8005fb8:	2b2a      	cmp	r3, #42	; 0x2a
 8005fba:	d135      	bne.n	8006028 <_svfiprintf_r+0x188>
 8005fbc:	9b03      	ldr	r3, [sp, #12]
 8005fbe:	3402      	adds	r4, #2
 8005fc0:	1d1a      	adds	r2, r3, #4
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	9203      	str	r2, [sp, #12]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	bfb8      	it	lt
 8005fca:	f04f 33ff 	movlt.w	r3, #4294967295
 8005fce:	9305      	str	r3, [sp, #20]
 8005fd0:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8006090 <_svfiprintf_r+0x1f0>
 8005fd4:	2203      	movs	r2, #3
 8005fd6:	4650      	mov	r0, sl
 8005fd8:	7821      	ldrb	r1, [r4, #0]
 8005fda:	f000 fe33 	bl	8006c44 <memchr>
 8005fde:	b140      	cbz	r0, 8005ff2 <_svfiprintf_r+0x152>
 8005fe0:	2340      	movs	r3, #64	; 0x40
 8005fe2:	eba0 000a 	sub.w	r0, r0, sl
 8005fe6:	fa03 f000 	lsl.w	r0, r3, r0
 8005fea:	9b04      	ldr	r3, [sp, #16]
 8005fec:	3401      	adds	r4, #1
 8005fee:	4303      	orrs	r3, r0
 8005ff0:	9304      	str	r3, [sp, #16]
 8005ff2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ff6:	2206      	movs	r2, #6
 8005ff8:	4826      	ldr	r0, [pc, #152]	; (8006094 <_svfiprintf_r+0x1f4>)
 8005ffa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005ffe:	f000 fe21 	bl	8006c44 <memchr>
 8006002:	2800      	cmp	r0, #0
 8006004:	d038      	beq.n	8006078 <_svfiprintf_r+0x1d8>
 8006006:	4b24      	ldr	r3, [pc, #144]	; (8006098 <_svfiprintf_r+0x1f8>)
 8006008:	bb1b      	cbnz	r3, 8006052 <_svfiprintf_r+0x1b2>
 800600a:	9b03      	ldr	r3, [sp, #12]
 800600c:	3307      	adds	r3, #7
 800600e:	f023 0307 	bic.w	r3, r3, #7
 8006012:	3308      	adds	r3, #8
 8006014:	9303      	str	r3, [sp, #12]
 8006016:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006018:	4433      	add	r3, r6
 800601a:	9309      	str	r3, [sp, #36]	; 0x24
 800601c:	e767      	b.n	8005eee <_svfiprintf_r+0x4e>
 800601e:	460c      	mov	r4, r1
 8006020:	2001      	movs	r0, #1
 8006022:	fb0c 3202 	mla	r2, ip, r2, r3
 8006026:	e7a5      	b.n	8005f74 <_svfiprintf_r+0xd4>
 8006028:	2300      	movs	r3, #0
 800602a:	f04f 0c0a 	mov.w	ip, #10
 800602e:	4619      	mov	r1, r3
 8006030:	3401      	adds	r4, #1
 8006032:	9305      	str	r3, [sp, #20]
 8006034:	4620      	mov	r0, r4
 8006036:	f810 2b01 	ldrb.w	r2, [r0], #1
 800603a:	3a30      	subs	r2, #48	; 0x30
 800603c:	2a09      	cmp	r2, #9
 800603e:	d903      	bls.n	8006048 <_svfiprintf_r+0x1a8>
 8006040:	2b00      	cmp	r3, #0
 8006042:	d0c5      	beq.n	8005fd0 <_svfiprintf_r+0x130>
 8006044:	9105      	str	r1, [sp, #20]
 8006046:	e7c3      	b.n	8005fd0 <_svfiprintf_r+0x130>
 8006048:	4604      	mov	r4, r0
 800604a:	2301      	movs	r3, #1
 800604c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006050:	e7f0      	b.n	8006034 <_svfiprintf_r+0x194>
 8006052:	ab03      	add	r3, sp, #12
 8006054:	9300      	str	r3, [sp, #0]
 8006056:	462a      	mov	r2, r5
 8006058:	4638      	mov	r0, r7
 800605a:	4b10      	ldr	r3, [pc, #64]	; (800609c <_svfiprintf_r+0x1fc>)
 800605c:	a904      	add	r1, sp, #16
 800605e:	f3af 8000 	nop.w
 8006062:	1c42      	adds	r2, r0, #1
 8006064:	4606      	mov	r6, r0
 8006066:	d1d6      	bne.n	8006016 <_svfiprintf_r+0x176>
 8006068:	89ab      	ldrh	r3, [r5, #12]
 800606a:	065b      	lsls	r3, r3, #25
 800606c:	f53f af2c 	bmi.w	8005ec8 <_svfiprintf_r+0x28>
 8006070:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006072:	b01d      	add	sp, #116	; 0x74
 8006074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006078:	ab03      	add	r3, sp, #12
 800607a:	9300      	str	r3, [sp, #0]
 800607c:	462a      	mov	r2, r5
 800607e:	4638      	mov	r0, r7
 8006080:	4b06      	ldr	r3, [pc, #24]	; (800609c <_svfiprintf_r+0x1fc>)
 8006082:	a904      	add	r1, sp, #16
 8006084:	f000 f9d4 	bl	8006430 <_printf_i>
 8006088:	e7eb      	b.n	8006062 <_svfiprintf_r+0x1c2>
 800608a:	bf00      	nop
 800608c:	08008e65 	.word	0x08008e65
 8006090:	08008e6b 	.word	0x08008e6b
 8006094:	08008e6f 	.word	0x08008e6f
 8006098:	00000000 	.word	0x00000000
 800609c:	08005de9 	.word	0x08005de9

080060a0 <__sfputc_r>:
 80060a0:	6893      	ldr	r3, [r2, #8]
 80060a2:	b410      	push	{r4}
 80060a4:	3b01      	subs	r3, #1
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	6093      	str	r3, [r2, #8]
 80060aa:	da07      	bge.n	80060bc <__sfputc_r+0x1c>
 80060ac:	6994      	ldr	r4, [r2, #24]
 80060ae:	42a3      	cmp	r3, r4
 80060b0:	db01      	blt.n	80060b6 <__sfputc_r+0x16>
 80060b2:	290a      	cmp	r1, #10
 80060b4:	d102      	bne.n	80060bc <__sfputc_r+0x1c>
 80060b6:	bc10      	pop	{r4}
 80060b8:	f000 bae0 	b.w	800667c <__swbuf_r>
 80060bc:	6813      	ldr	r3, [r2, #0]
 80060be:	1c58      	adds	r0, r3, #1
 80060c0:	6010      	str	r0, [r2, #0]
 80060c2:	7019      	strb	r1, [r3, #0]
 80060c4:	4608      	mov	r0, r1
 80060c6:	bc10      	pop	{r4}
 80060c8:	4770      	bx	lr

080060ca <__sfputs_r>:
 80060ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060cc:	4606      	mov	r6, r0
 80060ce:	460f      	mov	r7, r1
 80060d0:	4614      	mov	r4, r2
 80060d2:	18d5      	adds	r5, r2, r3
 80060d4:	42ac      	cmp	r4, r5
 80060d6:	d101      	bne.n	80060dc <__sfputs_r+0x12>
 80060d8:	2000      	movs	r0, #0
 80060da:	e007      	b.n	80060ec <__sfputs_r+0x22>
 80060dc:	463a      	mov	r2, r7
 80060de:	4630      	mov	r0, r6
 80060e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060e4:	f7ff ffdc 	bl	80060a0 <__sfputc_r>
 80060e8:	1c43      	adds	r3, r0, #1
 80060ea:	d1f3      	bne.n	80060d4 <__sfputs_r+0xa>
 80060ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080060f0 <_vfiprintf_r>:
 80060f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060f4:	460d      	mov	r5, r1
 80060f6:	4614      	mov	r4, r2
 80060f8:	4698      	mov	r8, r3
 80060fa:	4606      	mov	r6, r0
 80060fc:	b09d      	sub	sp, #116	; 0x74
 80060fe:	b118      	cbz	r0, 8006108 <_vfiprintf_r+0x18>
 8006100:	6983      	ldr	r3, [r0, #24]
 8006102:	b90b      	cbnz	r3, 8006108 <_vfiprintf_r+0x18>
 8006104:	f000 fc98 	bl	8006a38 <__sinit>
 8006108:	4b89      	ldr	r3, [pc, #548]	; (8006330 <_vfiprintf_r+0x240>)
 800610a:	429d      	cmp	r5, r3
 800610c:	d11b      	bne.n	8006146 <_vfiprintf_r+0x56>
 800610e:	6875      	ldr	r5, [r6, #4]
 8006110:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006112:	07d9      	lsls	r1, r3, #31
 8006114:	d405      	bmi.n	8006122 <_vfiprintf_r+0x32>
 8006116:	89ab      	ldrh	r3, [r5, #12]
 8006118:	059a      	lsls	r2, r3, #22
 800611a:	d402      	bmi.n	8006122 <_vfiprintf_r+0x32>
 800611c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800611e:	f000 fd29 	bl	8006b74 <__retarget_lock_acquire_recursive>
 8006122:	89ab      	ldrh	r3, [r5, #12]
 8006124:	071b      	lsls	r3, r3, #28
 8006126:	d501      	bpl.n	800612c <_vfiprintf_r+0x3c>
 8006128:	692b      	ldr	r3, [r5, #16]
 800612a:	b9eb      	cbnz	r3, 8006168 <_vfiprintf_r+0x78>
 800612c:	4629      	mov	r1, r5
 800612e:	4630      	mov	r0, r6
 8006130:	f000 faf6 	bl	8006720 <__swsetup_r>
 8006134:	b1c0      	cbz	r0, 8006168 <_vfiprintf_r+0x78>
 8006136:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006138:	07dc      	lsls	r4, r3, #31
 800613a:	d50e      	bpl.n	800615a <_vfiprintf_r+0x6a>
 800613c:	f04f 30ff 	mov.w	r0, #4294967295
 8006140:	b01d      	add	sp, #116	; 0x74
 8006142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006146:	4b7b      	ldr	r3, [pc, #492]	; (8006334 <_vfiprintf_r+0x244>)
 8006148:	429d      	cmp	r5, r3
 800614a:	d101      	bne.n	8006150 <_vfiprintf_r+0x60>
 800614c:	68b5      	ldr	r5, [r6, #8]
 800614e:	e7df      	b.n	8006110 <_vfiprintf_r+0x20>
 8006150:	4b79      	ldr	r3, [pc, #484]	; (8006338 <_vfiprintf_r+0x248>)
 8006152:	429d      	cmp	r5, r3
 8006154:	bf08      	it	eq
 8006156:	68f5      	ldreq	r5, [r6, #12]
 8006158:	e7da      	b.n	8006110 <_vfiprintf_r+0x20>
 800615a:	89ab      	ldrh	r3, [r5, #12]
 800615c:	0598      	lsls	r0, r3, #22
 800615e:	d4ed      	bmi.n	800613c <_vfiprintf_r+0x4c>
 8006160:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006162:	f000 fd08 	bl	8006b76 <__retarget_lock_release_recursive>
 8006166:	e7e9      	b.n	800613c <_vfiprintf_r+0x4c>
 8006168:	2300      	movs	r3, #0
 800616a:	9309      	str	r3, [sp, #36]	; 0x24
 800616c:	2320      	movs	r3, #32
 800616e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006172:	2330      	movs	r3, #48	; 0x30
 8006174:	f04f 0901 	mov.w	r9, #1
 8006178:	f8cd 800c 	str.w	r8, [sp, #12]
 800617c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800633c <_vfiprintf_r+0x24c>
 8006180:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006184:	4623      	mov	r3, r4
 8006186:	469a      	mov	sl, r3
 8006188:	f813 2b01 	ldrb.w	r2, [r3], #1
 800618c:	b10a      	cbz	r2, 8006192 <_vfiprintf_r+0xa2>
 800618e:	2a25      	cmp	r2, #37	; 0x25
 8006190:	d1f9      	bne.n	8006186 <_vfiprintf_r+0x96>
 8006192:	ebba 0b04 	subs.w	fp, sl, r4
 8006196:	d00b      	beq.n	80061b0 <_vfiprintf_r+0xc0>
 8006198:	465b      	mov	r3, fp
 800619a:	4622      	mov	r2, r4
 800619c:	4629      	mov	r1, r5
 800619e:	4630      	mov	r0, r6
 80061a0:	f7ff ff93 	bl	80060ca <__sfputs_r>
 80061a4:	3001      	adds	r0, #1
 80061a6:	f000 80aa 	beq.w	80062fe <_vfiprintf_r+0x20e>
 80061aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80061ac:	445a      	add	r2, fp
 80061ae:	9209      	str	r2, [sp, #36]	; 0x24
 80061b0:	f89a 3000 	ldrb.w	r3, [sl]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	f000 80a2 	beq.w	80062fe <_vfiprintf_r+0x20e>
 80061ba:	2300      	movs	r3, #0
 80061bc:	f04f 32ff 	mov.w	r2, #4294967295
 80061c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80061c4:	f10a 0a01 	add.w	sl, sl, #1
 80061c8:	9304      	str	r3, [sp, #16]
 80061ca:	9307      	str	r3, [sp, #28]
 80061cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80061d0:	931a      	str	r3, [sp, #104]	; 0x68
 80061d2:	4654      	mov	r4, sl
 80061d4:	2205      	movs	r2, #5
 80061d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061da:	4858      	ldr	r0, [pc, #352]	; (800633c <_vfiprintf_r+0x24c>)
 80061dc:	f000 fd32 	bl	8006c44 <memchr>
 80061e0:	9a04      	ldr	r2, [sp, #16]
 80061e2:	b9d8      	cbnz	r0, 800621c <_vfiprintf_r+0x12c>
 80061e4:	06d1      	lsls	r1, r2, #27
 80061e6:	bf44      	itt	mi
 80061e8:	2320      	movmi	r3, #32
 80061ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80061ee:	0713      	lsls	r3, r2, #28
 80061f0:	bf44      	itt	mi
 80061f2:	232b      	movmi	r3, #43	; 0x2b
 80061f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80061f8:	f89a 3000 	ldrb.w	r3, [sl]
 80061fc:	2b2a      	cmp	r3, #42	; 0x2a
 80061fe:	d015      	beq.n	800622c <_vfiprintf_r+0x13c>
 8006200:	4654      	mov	r4, sl
 8006202:	2000      	movs	r0, #0
 8006204:	f04f 0c0a 	mov.w	ip, #10
 8006208:	9a07      	ldr	r2, [sp, #28]
 800620a:	4621      	mov	r1, r4
 800620c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006210:	3b30      	subs	r3, #48	; 0x30
 8006212:	2b09      	cmp	r3, #9
 8006214:	d94e      	bls.n	80062b4 <_vfiprintf_r+0x1c4>
 8006216:	b1b0      	cbz	r0, 8006246 <_vfiprintf_r+0x156>
 8006218:	9207      	str	r2, [sp, #28]
 800621a:	e014      	b.n	8006246 <_vfiprintf_r+0x156>
 800621c:	eba0 0308 	sub.w	r3, r0, r8
 8006220:	fa09 f303 	lsl.w	r3, r9, r3
 8006224:	4313      	orrs	r3, r2
 8006226:	46a2      	mov	sl, r4
 8006228:	9304      	str	r3, [sp, #16]
 800622a:	e7d2      	b.n	80061d2 <_vfiprintf_r+0xe2>
 800622c:	9b03      	ldr	r3, [sp, #12]
 800622e:	1d19      	adds	r1, r3, #4
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	9103      	str	r1, [sp, #12]
 8006234:	2b00      	cmp	r3, #0
 8006236:	bfbb      	ittet	lt
 8006238:	425b      	neglt	r3, r3
 800623a:	f042 0202 	orrlt.w	r2, r2, #2
 800623e:	9307      	strge	r3, [sp, #28]
 8006240:	9307      	strlt	r3, [sp, #28]
 8006242:	bfb8      	it	lt
 8006244:	9204      	strlt	r2, [sp, #16]
 8006246:	7823      	ldrb	r3, [r4, #0]
 8006248:	2b2e      	cmp	r3, #46	; 0x2e
 800624a:	d10c      	bne.n	8006266 <_vfiprintf_r+0x176>
 800624c:	7863      	ldrb	r3, [r4, #1]
 800624e:	2b2a      	cmp	r3, #42	; 0x2a
 8006250:	d135      	bne.n	80062be <_vfiprintf_r+0x1ce>
 8006252:	9b03      	ldr	r3, [sp, #12]
 8006254:	3402      	adds	r4, #2
 8006256:	1d1a      	adds	r2, r3, #4
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	9203      	str	r2, [sp, #12]
 800625c:	2b00      	cmp	r3, #0
 800625e:	bfb8      	it	lt
 8006260:	f04f 33ff 	movlt.w	r3, #4294967295
 8006264:	9305      	str	r3, [sp, #20]
 8006266:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8006340 <_vfiprintf_r+0x250>
 800626a:	2203      	movs	r2, #3
 800626c:	4650      	mov	r0, sl
 800626e:	7821      	ldrb	r1, [r4, #0]
 8006270:	f000 fce8 	bl	8006c44 <memchr>
 8006274:	b140      	cbz	r0, 8006288 <_vfiprintf_r+0x198>
 8006276:	2340      	movs	r3, #64	; 0x40
 8006278:	eba0 000a 	sub.w	r0, r0, sl
 800627c:	fa03 f000 	lsl.w	r0, r3, r0
 8006280:	9b04      	ldr	r3, [sp, #16]
 8006282:	3401      	adds	r4, #1
 8006284:	4303      	orrs	r3, r0
 8006286:	9304      	str	r3, [sp, #16]
 8006288:	f814 1b01 	ldrb.w	r1, [r4], #1
 800628c:	2206      	movs	r2, #6
 800628e:	482d      	ldr	r0, [pc, #180]	; (8006344 <_vfiprintf_r+0x254>)
 8006290:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006294:	f000 fcd6 	bl	8006c44 <memchr>
 8006298:	2800      	cmp	r0, #0
 800629a:	d03f      	beq.n	800631c <_vfiprintf_r+0x22c>
 800629c:	4b2a      	ldr	r3, [pc, #168]	; (8006348 <_vfiprintf_r+0x258>)
 800629e:	bb1b      	cbnz	r3, 80062e8 <_vfiprintf_r+0x1f8>
 80062a0:	9b03      	ldr	r3, [sp, #12]
 80062a2:	3307      	adds	r3, #7
 80062a4:	f023 0307 	bic.w	r3, r3, #7
 80062a8:	3308      	adds	r3, #8
 80062aa:	9303      	str	r3, [sp, #12]
 80062ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062ae:	443b      	add	r3, r7
 80062b0:	9309      	str	r3, [sp, #36]	; 0x24
 80062b2:	e767      	b.n	8006184 <_vfiprintf_r+0x94>
 80062b4:	460c      	mov	r4, r1
 80062b6:	2001      	movs	r0, #1
 80062b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80062bc:	e7a5      	b.n	800620a <_vfiprintf_r+0x11a>
 80062be:	2300      	movs	r3, #0
 80062c0:	f04f 0c0a 	mov.w	ip, #10
 80062c4:	4619      	mov	r1, r3
 80062c6:	3401      	adds	r4, #1
 80062c8:	9305      	str	r3, [sp, #20]
 80062ca:	4620      	mov	r0, r4
 80062cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80062d0:	3a30      	subs	r2, #48	; 0x30
 80062d2:	2a09      	cmp	r2, #9
 80062d4:	d903      	bls.n	80062de <_vfiprintf_r+0x1ee>
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d0c5      	beq.n	8006266 <_vfiprintf_r+0x176>
 80062da:	9105      	str	r1, [sp, #20]
 80062dc:	e7c3      	b.n	8006266 <_vfiprintf_r+0x176>
 80062de:	4604      	mov	r4, r0
 80062e0:	2301      	movs	r3, #1
 80062e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80062e6:	e7f0      	b.n	80062ca <_vfiprintf_r+0x1da>
 80062e8:	ab03      	add	r3, sp, #12
 80062ea:	9300      	str	r3, [sp, #0]
 80062ec:	462a      	mov	r2, r5
 80062ee:	4630      	mov	r0, r6
 80062f0:	4b16      	ldr	r3, [pc, #88]	; (800634c <_vfiprintf_r+0x25c>)
 80062f2:	a904      	add	r1, sp, #16
 80062f4:	f3af 8000 	nop.w
 80062f8:	4607      	mov	r7, r0
 80062fa:	1c78      	adds	r0, r7, #1
 80062fc:	d1d6      	bne.n	80062ac <_vfiprintf_r+0x1bc>
 80062fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006300:	07d9      	lsls	r1, r3, #31
 8006302:	d405      	bmi.n	8006310 <_vfiprintf_r+0x220>
 8006304:	89ab      	ldrh	r3, [r5, #12]
 8006306:	059a      	lsls	r2, r3, #22
 8006308:	d402      	bmi.n	8006310 <_vfiprintf_r+0x220>
 800630a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800630c:	f000 fc33 	bl	8006b76 <__retarget_lock_release_recursive>
 8006310:	89ab      	ldrh	r3, [r5, #12]
 8006312:	065b      	lsls	r3, r3, #25
 8006314:	f53f af12 	bmi.w	800613c <_vfiprintf_r+0x4c>
 8006318:	9809      	ldr	r0, [sp, #36]	; 0x24
 800631a:	e711      	b.n	8006140 <_vfiprintf_r+0x50>
 800631c:	ab03      	add	r3, sp, #12
 800631e:	9300      	str	r3, [sp, #0]
 8006320:	462a      	mov	r2, r5
 8006322:	4630      	mov	r0, r6
 8006324:	4b09      	ldr	r3, [pc, #36]	; (800634c <_vfiprintf_r+0x25c>)
 8006326:	a904      	add	r1, sp, #16
 8006328:	f000 f882 	bl	8006430 <_printf_i>
 800632c:	e7e4      	b.n	80062f8 <_vfiprintf_r+0x208>
 800632e:	bf00      	nop
 8006330:	08008eb8 	.word	0x08008eb8
 8006334:	08008ed8 	.word	0x08008ed8
 8006338:	08008e98 	.word	0x08008e98
 800633c:	08008e65 	.word	0x08008e65
 8006340:	08008e6b 	.word	0x08008e6b
 8006344:	08008e6f 	.word	0x08008e6f
 8006348:	00000000 	.word	0x00000000
 800634c:	080060cb 	.word	0x080060cb

08006350 <_printf_common>:
 8006350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006354:	4616      	mov	r6, r2
 8006356:	4699      	mov	r9, r3
 8006358:	688a      	ldr	r2, [r1, #8]
 800635a:	690b      	ldr	r3, [r1, #16]
 800635c:	4607      	mov	r7, r0
 800635e:	4293      	cmp	r3, r2
 8006360:	bfb8      	it	lt
 8006362:	4613      	movlt	r3, r2
 8006364:	6033      	str	r3, [r6, #0]
 8006366:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800636a:	460c      	mov	r4, r1
 800636c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006370:	b10a      	cbz	r2, 8006376 <_printf_common+0x26>
 8006372:	3301      	adds	r3, #1
 8006374:	6033      	str	r3, [r6, #0]
 8006376:	6823      	ldr	r3, [r4, #0]
 8006378:	0699      	lsls	r1, r3, #26
 800637a:	bf42      	ittt	mi
 800637c:	6833      	ldrmi	r3, [r6, #0]
 800637e:	3302      	addmi	r3, #2
 8006380:	6033      	strmi	r3, [r6, #0]
 8006382:	6825      	ldr	r5, [r4, #0]
 8006384:	f015 0506 	ands.w	r5, r5, #6
 8006388:	d106      	bne.n	8006398 <_printf_common+0x48>
 800638a:	f104 0a19 	add.w	sl, r4, #25
 800638e:	68e3      	ldr	r3, [r4, #12]
 8006390:	6832      	ldr	r2, [r6, #0]
 8006392:	1a9b      	subs	r3, r3, r2
 8006394:	42ab      	cmp	r3, r5
 8006396:	dc28      	bgt.n	80063ea <_printf_common+0x9a>
 8006398:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800639c:	1e13      	subs	r3, r2, #0
 800639e:	6822      	ldr	r2, [r4, #0]
 80063a0:	bf18      	it	ne
 80063a2:	2301      	movne	r3, #1
 80063a4:	0692      	lsls	r2, r2, #26
 80063a6:	d42d      	bmi.n	8006404 <_printf_common+0xb4>
 80063a8:	4649      	mov	r1, r9
 80063aa:	4638      	mov	r0, r7
 80063ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80063b0:	47c0      	blx	r8
 80063b2:	3001      	adds	r0, #1
 80063b4:	d020      	beq.n	80063f8 <_printf_common+0xa8>
 80063b6:	6823      	ldr	r3, [r4, #0]
 80063b8:	68e5      	ldr	r5, [r4, #12]
 80063ba:	f003 0306 	and.w	r3, r3, #6
 80063be:	2b04      	cmp	r3, #4
 80063c0:	bf18      	it	ne
 80063c2:	2500      	movne	r5, #0
 80063c4:	6832      	ldr	r2, [r6, #0]
 80063c6:	f04f 0600 	mov.w	r6, #0
 80063ca:	68a3      	ldr	r3, [r4, #8]
 80063cc:	bf08      	it	eq
 80063ce:	1aad      	subeq	r5, r5, r2
 80063d0:	6922      	ldr	r2, [r4, #16]
 80063d2:	bf08      	it	eq
 80063d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80063d8:	4293      	cmp	r3, r2
 80063da:	bfc4      	itt	gt
 80063dc:	1a9b      	subgt	r3, r3, r2
 80063de:	18ed      	addgt	r5, r5, r3
 80063e0:	341a      	adds	r4, #26
 80063e2:	42b5      	cmp	r5, r6
 80063e4:	d11a      	bne.n	800641c <_printf_common+0xcc>
 80063e6:	2000      	movs	r0, #0
 80063e8:	e008      	b.n	80063fc <_printf_common+0xac>
 80063ea:	2301      	movs	r3, #1
 80063ec:	4652      	mov	r2, sl
 80063ee:	4649      	mov	r1, r9
 80063f0:	4638      	mov	r0, r7
 80063f2:	47c0      	blx	r8
 80063f4:	3001      	adds	r0, #1
 80063f6:	d103      	bne.n	8006400 <_printf_common+0xb0>
 80063f8:	f04f 30ff 	mov.w	r0, #4294967295
 80063fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006400:	3501      	adds	r5, #1
 8006402:	e7c4      	b.n	800638e <_printf_common+0x3e>
 8006404:	2030      	movs	r0, #48	; 0x30
 8006406:	18e1      	adds	r1, r4, r3
 8006408:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800640c:	1c5a      	adds	r2, r3, #1
 800640e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006412:	4422      	add	r2, r4
 8006414:	3302      	adds	r3, #2
 8006416:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800641a:	e7c5      	b.n	80063a8 <_printf_common+0x58>
 800641c:	2301      	movs	r3, #1
 800641e:	4622      	mov	r2, r4
 8006420:	4649      	mov	r1, r9
 8006422:	4638      	mov	r0, r7
 8006424:	47c0      	blx	r8
 8006426:	3001      	adds	r0, #1
 8006428:	d0e6      	beq.n	80063f8 <_printf_common+0xa8>
 800642a:	3601      	adds	r6, #1
 800642c:	e7d9      	b.n	80063e2 <_printf_common+0x92>
	...

08006430 <_printf_i>:
 8006430:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006434:	7e0f      	ldrb	r7, [r1, #24]
 8006436:	4691      	mov	r9, r2
 8006438:	2f78      	cmp	r7, #120	; 0x78
 800643a:	4680      	mov	r8, r0
 800643c:	460c      	mov	r4, r1
 800643e:	469a      	mov	sl, r3
 8006440:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006442:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006446:	d807      	bhi.n	8006458 <_printf_i+0x28>
 8006448:	2f62      	cmp	r7, #98	; 0x62
 800644a:	d80a      	bhi.n	8006462 <_printf_i+0x32>
 800644c:	2f00      	cmp	r7, #0
 800644e:	f000 80d9 	beq.w	8006604 <_printf_i+0x1d4>
 8006452:	2f58      	cmp	r7, #88	; 0x58
 8006454:	f000 80a4 	beq.w	80065a0 <_printf_i+0x170>
 8006458:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800645c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006460:	e03a      	b.n	80064d8 <_printf_i+0xa8>
 8006462:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006466:	2b15      	cmp	r3, #21
 8006468:	d8f6      	bhi.n	8006458 <_printf_i+0x28>
 800646a:	a101      	add	r1, pc, #4	; (adr r1, 8006470 <_printf_i+0x40>)
 800646c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006470:	080064c9 	.word	0x080064c9
 8006474:	080064dd 	.word	0x080064dd
 8006478:	08006459 	.word	0x08006459
 800647c:	08006459 	.word	0x08006459
 8006480:	08006459 	.word	0x08006459
 8006484:	08006459 	.word	0x08006459
 8006488:	080064dd 	.word	0x080064dd
 800648c:	08006459 	.word	0x08006459
 8006490:	08006459 	.word	0x08006459
 8006494:	08006459 	.word	0x08006459
 8006498:	08006459 	.word	0x08006459
 800649c:	080065eb 	.word	0x080065eb
 80064a0:	0800650d 	.word	0x0800650d
 80064a4:	080065cd 	.word	0x080065cd
 80064a8:	08006459 	.word	0x08006459
 80064ac:	08006459 	.word	0x08006459
 80064b0:	0800660d 	.word	0x0800660d
 80064b4:	08006459 	.word	0x08006459
 80064b8:	0800650d 	.word	0x0800650d
 80064bc:	08006459 	.word	0x08006459
 80064c0:	08006459 	.word	0x08006459
 80064c4:	080065d5 	.word	0x080065d5
 80064c8:	682b      	ldr	r3, [r5, #0]
 80064ca:	1d1a      	adds	r2, r3, #4
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	602a      	str	r2, [r5, #0]
 80064d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80064d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80064d8:	2301      	movs	r3, #1
 80064da:	e0a4      	b.n	8006626 <_printf_i+0x1f6>
 80064dc:	6820      	ldr	r0, [r4, #0]
 80064de:	6829      	ldr	r1, [r5, #0]
 80064e0:	0606      	lsls	r6, r0, #24
 80064e2:	f101 0304 	add.w	r3, r1, #4
 80064e6:	d50a      	bpl.n	80064fe <_printf_i+0xce>
 80064e8:	680e      	ldr	r6, [r1, #0]
 80064ea:	602b      	str	r3, [r5, #0]
 80064ec:	2e00      	cmp	r6, #0
 80064ee:	da03      	bge.n	80064f8 <_printf_i+0xc8>
 80064f0:	232d      	movs	r3, #45	; 0x2d
 80064f2:	4276      	negs	r6, r6
 80064f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064f8:	230a      	movs	r3, #10
 80064fa:	485e      	ldr	r0, [pc, #376]	; (8006674 <_printf_i+0x244>)
 80064fc:	e019      	b.n	8006532 <_printf_i+0x102>
 80064fe:	680e      	ldr	r6, [r1, #0]
 8006500:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006504:	602b      	str	r3, [r5, #0]
 8006506:	bf18      	it	ne
 8006508:	b236      	sxthne	r6, r6
 800650a:	e7ef      	b.n	80064ec <_printf_i+0xbc>
 800650c:	682b      	ldr	r3, [r5, #0]
 800650e:	6820      	ldr	r0, [r4, #0]
 8006510:	1d19      	adds	r1, r3, #4
 8006512:	6029      	str	r1, [r5, #0]
 8006514:	0601      	lsls	r1, r0, #24
 8006516:	d501      	bpl.n	800651c <_printf_i+0xec>
 8006518:	681e      	ldr	r6, [r3, #0]
 800651a:	e002      	b.n	8006522 <_printf_i+0xf2>
 800651c:	0646      	lsls	r6, r0, #25
 800651e:	d5fb      	bpl.n	8006518 <_printf_i+0xe8>
 8006520:	881e      	ldrh	r6, [r3, #0]
 8006522:	2f6f      	cmp	r7, #111	; 0x6f
 8006524:	bf0c      	ite	eq
 8006526:	2308      	moveq	r3, #8
 8006528:	230a      	movne	r3, #10
 800652a:	4852      	ldr	r0, [pc, #328]	; (8006674 <_printf_i+0x244>)
 800652c:	2100      	movs	r1, #0
 800652e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006532:	6865      	ldr	r5, [r4, #4]
 8006534:	2d00      	cmp	r5, #0
 8006536:	bfa8      	it	ge
 8006538:	6821      	ldrge	r1, [r4, #0]
 800653a:	60a5      	str	r5, [r4, #8]
 800653c:	bfa4      	itt	ge
 800653e:	f021 0104 	bicge.w	r1, r1, #4
 8006542:	6021      	strge	r1, [r4, #0]
 8006544:	b90e      	cbnz	r6, 800654a <_printf_i+0x11a>
 8006546:	2d00      	cmp	r5, #0
 8006548:	d04d      	beq.n	80065e6 <_printf_i+0x1b6>
 800654a:	4615      	mov	r5, r2
 800654c:	fbb6 f1f3 	udiv	r1, r6, r3
 8006550:	fb03 6711 	mls	r7, r3, r1, r6
 8006554:	5dc7      	ldrb	r7, [r0, r7]
 8006556:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800655a:	4637      	mov	r7, r6
 800655c:	42bb      	cmp	r3, r7
 800655e:	460e      	mov	r6, r1
 8006560:	d9f4      	bls.n	800654c <_printf_i+0x11c>
 8006562:	2b08      	cmp	r3, #8
 8006564:	d10b      	bne.n	800657e <_printf_i+0x14e>
 8006566:	6823      	ldr	r3, [r4, #0]
 8006568:	07de      	lsls	r6, r3, #31
 800656a:	d508      	bpl.n	800657e <_printf_i+0x14e>
 800656c:	6923      	ldr	r3, [r4, #16]
 800656e:	6861      	ldr	r1, [r4, #4]
 8006570:	4299      	cmp	r1, r3
 8006572:	bfde      	ittt	le
 8006574:	2330      	movle	r3, #48	; 0x30
 8006576:	f805 3c01 	strble.w	r3, [r5, #-1]
 800657a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800657e:	1b52      	subs	r2, r2, r5
 8006580:	6122      	str	r2, [r4, #16]
 8006582:	464b      	mov	r3, r9
 8006584:	4621      	mov	r1, r4
 8006586:	4640      	mov	r0, r8
 8006588:	f8cd a000 	str.w	sl, [sp]
 800658c:	aa03      	add	r2, sp, #12
 800658e:	f7ff fedf 	bl	8006350 <_printf_common>
 8006592:	3001      	adds	r0, #1
 8006594:	d14c      	bne.n	8006630 <_printf_i+0x200>
 8006596:	f04f 30ff 	mov.w	r0, #4294967295
 800659a:	b004      	add	sp, #16
 800659c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065a0:	4834      	ldr	r0, [pc, #208]	; (8006674 <_printf_i+0x244>)
 80065a2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80065a6:	6829      	ldr	r1, [r5, #0]
 80065a8:	6823      	ldr	r3, [r4, #0]
 80065aa:	f851 6b04 	ldr.w	r6, [r1], #4
 80065ae:	6029      	str	r1, [r5, #0]
 80065b0:	061d      	lsls	r5, r3, #24
 80065b2:	d514      	bpl.n	80065de <_printf_i+0x1ae>
 80065b4:	07df      	lsls	r7, r3, #31
 80065b6:	bf44      	itt	mi
 80065b8:	f043 0320 	orrmi.w	r3, r3, #32
 80065bc:	6023      	strmi	r3, [r4, #0]
 80065be:	b91e      	cbnz	r6, 80065c8 <_printf_i+0x198>
 80065c0:	6823      	ldr	r3, [r4, #0]
 80065c2:	f023 0320 	bic.w	r3, r3, #32
 80065c6:	6023      	str	r3, [r4, #0]
 80065c8:	2310      	movs	r3, #16
 80065ca:	e7af      	b.n	800652c <_printf_i+0xfc>
 80065cc:	6823      	ldr	r3, [r4, #0]
 80065ce:	f043 0320 	orr.w	r3, r3, #32
 80065d2:	6023      	str	r3, [r4, #0]
 80065d4:	2378      	movs	r3, #120	; 0x78
 80065d6:	4828      	ldr	r0, [pc, #160]	; (8006678 <_printf_i+0x248>)
 80065d8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80065dc:	e7e3      	b.n	80065a6 <_printf_i+0x176>
 80065de:	0659      	lsls	r1, r3, #25
 80065e0:	bf48      	it	mi
 80065e2:	b2b6      	uxthmi	r6, r6
 80065e4:	e7e6      	b.n	80065b4 <_printf_i+0x184>
 80065e6:	4615      	mov	r5, r2
 80065e8:	e7bb      	b.n	8006562 <_printf_i+0x132>
 80065ea:	682b      	ldr	r3, [r5, #0]
 80065ec:	6826      	ldr	r6, [r4, #0]
 80065ee:	1d18      	adds	r0, r3, #4
 80065f0:	6961      	ldr	r1, [r4, #20]
 80065f2:	6028      	str	r0, [r5, #0]
 80065f4:	0635      	lsls	r5, r6, #24
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	d501      	bpl.n	80065fe <_printf_i+0x1ce>
 80065fa:	6019      	str	r1, [r3, #0]
 80065fc:	e002      	b.n	8006604 <_printf_i+0x1d4>
 80065fe:	0670      	lsls	r0, r6, #25
 8006600:	d5fb      	bpl.n	80065fa <_printf_i+0x1ca>
 8006602:	8019      	strh	r1, [r3, #0]
 8006604:	2300      	movs	r3, #0
 8006606:	4615      	mov	r5, r2
 8006608:	6123      	str	r3, [r4, #16]
 800660a:	e7ba      	b.n	8006582 <_printf_i+0x152>
 800660c:	682b      	ldr	r3, [r5, #0]
 800660e:	2100      	movs	r1, #0
 8006610:	1d1a      	adds	r2, r3, #4
 8006612:	602a      	str	r2, [r5, #0]
 8006614:	681d      	ldr	r5, [r3, #0]
 8006616:	6862      	ldr	r2, [r4, #4]
 8006618:	4628      	mov	r0, r5
 800661a:	f000 fb13 	bl	8006c44 <memchr>
 800661e:	b108      	cbz	r0, 8006624 <_printf_i+0x1f4>
 8006620:	1b40      	subs	r0, r0, r5
 8006622:	6060      	str	r0, [r4, #4]
 8006624:	6863      	ldr	r3, [r4, #4]
 8006626:	6123      	str	r3, [r4, #16]
 8006628:	2300      	movs	r3, #0
 800662a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800662e:	e7a8      	b.n	8006582 <_printf_i+0x152>
 8006630:	462a      	mov	r2, r5
 8006632:	4649      	mov	r1, r9
 8006634:	4640      	mov	r0, r8
 8006636:	6923      	ldr	r3, [r4, #16]
 8006638:	47d0      	blx	sl
 800663a:	3001      	adds	r0, #1
 800663c:	d0ab      	beq.n	8006596 <_printf_i+0x166>
 800663e:	6823      	ldr	r3, [r4, #0]
 8006640:	079b      	lsls	r3, r3, #30
 8006642:	d413      	bmi.n	800666c <_printf_i+0x23c>
 8006644:	68e0      	ldr	r0, [r4, #12]
 8006646:	9b03      	ldr	r3, [sp, #12]
 8006648:	4298      	cmp	r0, r3
 800664a:	bfb8      	it	lt
 800664c:	4618      	movlt	r0, r3
 800664e:	e7a4      	b.n	800659a <_printf_i+0x16a>
 8006650:	2301      	movs	r3, #1
 8006652:	4632      	mov	r2, r6
 8006654:	4649      	mov	r1, r9
 8006656:	4640      	mov	r0, r8
 8006658:	47d0      	blx	sl
 800665a:	3001      	adds	r0, #1
 800665c:	d09b      	beq.n	8006596 <_printf_i+0x166>
 800665e:	3501      	adds	r5, #1
 8006660:	68e3      	ldr	r3, [r4, #12]
 8006662:	9903      	ldr	r1, [sp, #12]
 8006664:	1a5b      	subs	r3, r3, r1
 8006666:	42ab      	cmp	r3, r5
 8006668:	dcf2      	bgt.n	8006650 <_printf_i+0x220>
 800666a:	e7eb      	b.n	8006644 <_printf_i+0x214>
 800666c:	2500      	movs	r5, #0
 800666e:	f104 0619 	add.w	r6, r4, #25
 8006672:	e7f5      	b.n	8006660 <_printf_i+0x230>
 8006674:	08008e76 	.word	0x08008e76
 8006678:	08008e87 	.word	0x08008e87

0800667c <__swbuf_r>:
 800667c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800667e:	460e      	mov	r6, r1
 8006680:	4614      	mov	r4, r2
 8006682:	4605      	mov	r5, r0
 8006684:	b118      	cbz	r0, 800668e <__swbuf_r+0x12>
 8006686:	6983      	ldr	r3, [r0, #24]
 8006688:	b90b      	cbnz	r3, 800668e <__swbuf_r+0x12>
 800668a:	f000 f9d5 	bl	8006a38 <__sinit>
 800668e:	4b21      	ldr	r3, [pc, #132]	; (8006714 <__swbuf_r+0x98>)
 8006690:	429c      	cmp	r4, r3
 8006692:	d12b      	bne.n	80066ec <__swbuf_r+0x70>
 8006694:	686c      	ldr	r4, [r5, #4]
 8006696:	69a3      	ldr	r3, [r4, #24]
 8006698:	60a3      	str	r3, [r4, #8]
 800669a:	89a3      	ldrh	r3, [r4, #12]
 800669c:	071a      	lsls	r2, r3, #28
 800669e:	d52f      	bpl.n	8006700 <__swbuf_r+0x84>
 80066a0:	6923      	ldr	r3, [r4, #16]
 80066a2:	b36b      	cbz	r3, 8006700 <__swbuf_r+0x84>
 80066a4:	6923      	ldr	r3, [r4, #16]
 80066a6:	6820      	ldr	r0, [r4, #0]
 80066a8:	b2f6      	uxtb	r6, r6
 80066aa:	1ac0      	subs	r0, r0, r3
 80066ac:	6963      	ldr	r3, [r4, #20]
 80066ae:	4637      	mov	r7, r6
 80066b0:	4283      	cmp	r3, r0
 80066b2:	dc04      	bgt.n	80066be <__swbuf_r+0x42>
 80066b4:	4621      	mov	r1, r4
 80066b6:	4628      	mov	r0, r5
 80066b8:	f000 f92a 	bl	8006910 <_fflush_r>
 80066bc:	bb30      	cbnz	r0, 800670c <__swbuf_r+0x90>
 80066be:	68a3      	ldr	r3, [r4, #8]
 80066c0:	3001      	adds	r0, #1
 80066c2:	3b01      	subs	r3, #1
 80066c4:	60a3      	str	r3, [r4, #8]
 80066c6:	6823      	ldr	r3, [r4, #0]
 80066c8:	1c5a      	adds	r2, r3, #1
 80066ca:	6022      	str	r2, [r4, #0]
 80066cc:	701e      	strb	r6, [r3, #0]
 80066ce:	6963      	ldr	r3, [r4, #20]
 80066d0:	4283      	cmp	r3, r0
 80066d2:	d004      	beq.n	80066de <__swbuf_r+0x62>
 80066d4:	89a3      	ldrh	r3, [r4, #12]
 80066d6:	07db      	lsls	r3, r3, #31
 80066d8:	d506      	bpl.n	80066e8 <__swbuf_r+0x6c>
 80066da:	2e0a      	cmp	r6, #10
 80066dc:	d104      	bne.n	80066e8 <__swbuf_r+0x6c>
 80066de:	4621      	mov	r1, r4
 80066e0:	4628      	mov	r0, r5
 80066e2:	f000 f915 	bl	8006910 <_fflush_r>
 80066e6:	b988      	cbnz	r0, 800670c <__swbuf_r+0x90>
 80066e8:	4638      	mov	r0, r7
 80066ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80066ec:	4b0a      	ldr	r3, [pc, #40]	; (8006718 <__swbuf_r+0x9c>)
 80066ee:	429c      	cmp	r4, r3
 80066f0:	d101      	bne.n	80066f6 <__swbuf_r+0x7a>
 80066f2:	68ac      	ldr	r4, [r5, #8]
 80066f4:	e7cf      	b.n	8006696 <__swbuf_r+0x1a>
 80066f6:	4b09      	ldr	r3, [pc, #36]	; (800671c <__swbuf_r+0xa0>)
 80066f8:	429c      	cmp	r4, r3
 80066fa:	bf08      	it	eq
 80066fc:	68ec      	ldreq	r4, [r5, #12]
 80066fe:	e7ca      	b.n	8006696 <__swbuf_r+0x1a>
 8006700:	4621      	mov	r1, r4
 8006702:	4628      	mov	r0, r5
 8006704:	f000 f80c 	bl	8006720 <__swsetup_r>
 8006708:	2800      	cmp	r0, #0
 800670a:	d0cb      	beq.n	80066a4 <__swbuf_r+0x28>
 800670c:	f04f 37ff 	mov.w	r7, #4294967295
 8006710:	e7ea      	b.n	80066e8 <__swbuf_r+0x6c>
 8006712:	bf00      	nop
 8006714:	08008eb8 	.word	0x08008eb8
 8006718:	08008ed8 	.word	0x08008ed8
 800671c:	08008e98 	.word	0x08008e98

08006720 <__swsetup_r>:
 8006720:	4b32      	ldr	r3, [pc, #200]	; (80067ec <__swsetup_r+0xcc>)
 8006722:	b570      	push	{r4, r5, r6, lr}
 8006724:	681d      	ldr	r5, [r3, #0]
 8006726:	4606      	mov	r6, r0
 8006728:	460c      	mov	r4, r1
 800672a:	b125      	cbz	r5, 8006736 <__swsetup_r+0x16>
 800672c:	69ab      	ldr	r3, [r5, #24]
 800672e:	b913      	cbnz	r3, 8006736 <__swsetup_r+0x16>
 8006730:	4628      	mov	r0, r5
 8006732:	f000 f981 	bl	8006a38 <__sinit>
 8006736:	4b2e      	ldr	r3, [pc, #184]	; (80067f0 <__swsetup_r+0xd0>)
 8006738:	429c      	cmp	r4, r3
 800673a:	d10f      	bne.n	800675c <__swsetup_r+0x3c>
 800673c:	686c      	ldr	r4, [r5, #4]
 800673e:	89a3      	ldrh	r3, [r4, #12]
 8006740:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006744:	0719      	lsls	r1, r3, #28
 8006746:	d42c      	bmi.n	80067a2 <__swsetup_r+0x82>
 8006748:	06dd      	lsls	r5, r3, #27
 800674a:	d411      	bmi.n	8006770 <__swsetup_r+0x50>
 800674c:	2309      	movs	r3, #9
 800674e:	6033      	str	r3, [r6, #0]
 8006750:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006754:	f04f 30ff 	mov.w	r0, #4294967295
 8006758:	81a3      	strh	r3, [r4, #12]
 800675a:	e03e      	b.n	80067da <__swsetup_r+0xba>
 800675c:	4b25      	ldr	r3, [pc, #148]	; (80067f4 <__swsetup_r+0xd4>)
 800675e:	429c      	cmp	r4, r3
 8006760:	d101      	bne.n	8006766 <__swsetup_r+0x46>
 8006762:	68ac      	ldr	r4, [r5, #8]
 8006764:	e7eb      	b.n	800673e <__swsetup_r+0x1e>
 8006766:	4b24      	ldr	r3, [pc, #144]	; (80067f8 <__swsetup_r+0xd8>)
 8006768:	429c      	cmp	r4, r3
 800676a:	bf08      	it	eq
 800676c:	68ec      	ldreq	r4, [r5, #12]
 800676e:	e7e6      	b.n	800673e <__swsetup_r+0x1e>
 8006770:	0758      	lsls	r0, r3, #29
 8006772:	d512      	bpl.n	800679a <__swsetup_r+0x7a>
 8006774:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006776:	b141      	cbz	r1, 800678a <__swsetup_r+0x6a>
 8006778:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800677c:	4299      	cmp	r1, r3
 800677e:	d002      	beq.n	8006786 <__swsetup_r+0x66>
 8006780:	4630      	mov	r0, r6
 8006782:	f7ff f8ff 	bl	8005984 <_free_r>
 8006786:	2300      	movs	r3, #0
 8006788:	6363      	str	r3, [r4, #52]	; 0x34
 800678a:	89a3      	ldrh	r3, [r4, #12]
 800678c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006790:	81a3      	strh	r3, [r4, #12]
 8006792:	2300      	movs	r3, #0
 8006794:	6063      	str	r3, [r4, #4]
 8006796:	6923      	ldr	r3, [r4, #16]
 8006798:	6023      	str	r3, [r4, #0]
 800679a:	89a3      	ldrh	r3, [r4, #12]
 800679c:	f043 0308 	orr.w	r3, r3, #8
 80067a0:	81a3      	strh	r3, [r4, #12]
 80067a2:	6923      	ldr	r3, [r4, #16]
 80067a4:	b94b      	cbnz	r3, 80067ba <__swsetup_r+0x9a>
 80067a6:	89a3      	ldrh	r3, [r4, #12]
 80067a8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80067ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067b0:	d003      	beq.n	80067ba <__swsetup_r+0x9a>
 80067b2:	4621      	mov	r1, r4
 80067b4:	4630      	mov	r0, r6
 80067b6:	f000 fa05 	bl	8006bc4 <__smakebuf_r>
 80067ba:	89a0      	ldrh	r0, [r4, #12]
 80067bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80067c0:	f010 0301 	ands.w	r3, r0, #1
 80067c4:	d00a      	beq.n	80067dc <__swsetup_r+0xbc>
 80067c6:	2300      	movs	r3, #0
 80067c8:	60a3      	str	r3, [r4, #8]
 80067ca:	6963      	ldr	r3, [r4, #20]
 80067cc:	425b      	negs	r3, r3
 80067ce:	61a3      	str	r3, [r4, #24]
 80067d0:	6923      	ldr	r3, [r4, #16]
 80067d2:	b943      	cbnz	r3, 80067e6 <__swsetup_r+0xc6>
 80067d4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80067d8:	d1ba      	bne.n	8006750 <__swsetup_r+0x30>
 80067da:	bd70      	pop	{r4, r5, r6, pc}
 80067dc:	0781      	lsls	r1, r0, #30
 80067de:	bf58      	it	pl
 80067e0:	6963      	ldrpl	r3, [r4, #20]
 80067e2:	60a3      	str	r3, [r4, #8]
 80067e4:	e7f4      	b.n	80067d0 <__swsetup_r+0xb0>
 80067e6:	2000      	movs	r0, #0
 80067e8:	e7f7      	b.n	80067da <__swsetup_r+0xba>
 80067ea:	bf00      	nop
 80067ec:	20000010 	.word	0x20000010
 80067f0:	08008eb8 	.word	0x08008eb8
 80067f4:	08008ed8 	.word	0x08008ed8
 80067f8:	08008e98 	.word	0x08008e98

080067fc <abort>:
 80067fc:	2006      	movs	r0, #6
 80067fe:	b508      	push	{r3, lr}
 8006800:	f000 faae 	bl	8006d60 <raise>
 8006804:	2001      	movs	r0, #1
 8006806:	f7fb ff79 	bl	80026fc <_exit>
	...

0800680c <__sflush_r>:
 800680c:	898a      	ldrh	r2, [r1, #12]
 800680e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006810:	4605      	mov	r5, r0
 8006812:	0710      	lsls	r0, r2, #28
 8006814:	460c      	mov	r4, r1
 8006816:	d457      	bmi.n	80068c8 <__sflush_r+0xbc>
 8006818:	684b      	ldr	r3, [r1, #4]
 800681a:	2b00      	cmp	r3, #0
 800681c:	dc04      	bgt.n	8006828 <__sflush_r+0x1c>
 800681e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006820:	2b00      	cmp	r3, #0
 8006822:	dc01      	bgt.n	8006828 <__sflush_r+0x1c>
 8006824:	2000      	movs	r0, #0
 8006826:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006828:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800682a:	2e00      	cmp	r6, #0
 800682c:	d0fa      	beq.n	8006824 <__sflush_r+0x18>
 800682e:	2300      	movs	r3, #0
 8006830:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006834:	682f      	ldr	r7, [r5, #0]
 8006836:	602b      	str	r3, [r5, #0]
 8006838:	d032      	beq.n	80068a0 <__sflush_r+0x94>
 800683a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800683c:	89a3      	ldrh	r3, [r4, #12]
 800683e:	075a      	lsls	r2, r3, #29
 8006840:	d505      	bpl.n	800684e <__sflush_r+0x42>
 8006842:	6863      	ldr	r3, [r4, #4]
 8006844:	1ac0      	subs	r0, r0, r3
 8006846:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006848:	b10b      	cbz	r3, 800684e <__sflush_r+0x42>
 800684a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800684c:	1ac0      	subs	r0, r0, r3
 800684e:	2300      	movs	r3, #0
 8006850:	4602      	mov	r2, r0
 8006852:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006854:	4628      	mov	r0, r5
 8006856:	6a21      	ldr	r1, [r4, #32]
 8006858:	47b0      	blx	r6
 800685a:	1c43      	adds	r3, r0, #1
 800685c:	89a3      	ldrh	r3, [r4, #12]
 800685e:	d106      	bne.n	800686e <__sflush_r+0x62>
 8006860:	6829      	ldr	r1, [r5, #0]
 8006862:	291d      	cmp	r1, #29
 8006864:	d82c      	bhi.n	80068c0 <__sflush_r+0xb4>
 8006866:	4a29      	ldr	r2, [pc, #164]	; (800690c <__sflush_r+0x100>)
 8006868:	40ca      	lsrs	r2, r1
 800686a:	07d6      	lsls	r6, r2, #31
 800686c:	d528      	bpl.n	80068c0 <__sflush_r+0xb4>
 800686e:	2200      	movs	r2, #0
 8006870:	6062      	str	r2, [r4, #4]
 8006872:	6922      	ldr	r2, [r4, #16]
 8006874:	04d9      	lsls	r1, r3, #19
 8006876:	6022      	str	r2, [r4, #0]
 8006878:	d504      	bpl.n	8006884 <__sflush_r+0x78>
 800687a:	1c42      	adds	r2, r0, #1
 800687c:	d101      	bne.n	8006882 <__sflush_r+0x76>
 800687e:	682b      	ldr	r3, [r5, #0]
 8006880:	b903      	cbnz	r3, 8006884 <__sflush_r+0x78>
 8006882:	6560      	str	r0, [r4, #84]	; 0x54
 8006884:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006886:	602f      	str	r7, [r5, #0]
 8006888:	2900      	cmp	r1, #0
 800688a:	d0cb      	beq.n	8006824 <__sflush_r+0x18>
 800688c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006890:	4299      	cmp	r1, r3
 8006892:	d002      	beq.n	800689a <__sflush_r+0x8e>
 8006894:	4628      	mov	r0, r5
 8006896:	f7ff f875 	bl	8005984 <_free_r>
 800689a:	2000      	movs	r0, #0
 800689c:	6360      	str	r0, [r4, #52]	; 0x34
 800689e:	e7c2      	b.n	8006826 <__sflush_r+0x1a>
 80068a0:	6a21      	ldr	r1, [r4, #32]
 80068a2:	2301      	movs	r3, #1
 80068a4:	4628      	mov	r0, r5
 80068a6:	47b0      	blx	r6
 80068a8:	1c41      	adds	r1, r0, #1
 80068aa:	d1c7      	bne.n	800683c <__sflush_r+0x30>
 80068ac:	682b      	ldr	r3, [r5, #0]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d0c4      	beq.n	800683c <__sflush_r+0x30>
 80068b2:	2b1d      	cmp	r3, #29
 80068b4:	d001      	beq.n	80068ba <__sflush_r+0xae>
 80068b6:	2b16      	cmp	r3, #22
 80068b8:	d101      	bne.n	80068be <__sflush_r+0xb2>
 80068ba:	602f      	str	r7, [r5, #0]
 80068bc:	e7b2      	b.n	8006824 <__sflush_r+0x18>
 80068be:	89a3      	ldrh	r3, [r4, #12]
 80068c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068c4:	81a3      	strh	r3, [r4, #12]
 80068c6:	e7ae      	b.n	8006826 <__sflush_r+0x1a>
 80068c8:	690f      	ldr	r7, [r1, #16]
 80068ca:	2f00      	cmp	r7, #0
 80068cc:	d0aa      	beq.n	8006824 <__sflush_r+0x18>
 80068ce:	0793      	lsls	r3, r2, #30
 80068d0:	bf18      	it	ne
 80068d2:	2300      	movne	r3, #0
 80068d4:	680e      	ldr	r6, [r1, #0]
 80068d6:	bf08      	it	eq
 80068d8:	694b      	ldreq	r3, [r1, #20]
 80068da:	1bf6      	subs	r6, r6, r7
 80068dc:	600f      	str	r7, [r1, #0]
 80068de:	608b      	str	r3, [r1, #8]
 80068e0:	2e00      	cmp	r6, #0
 80068e2:	dd9f      	ble.n	8006824 <__sflush_r+0x18>
 80068e4:	4633      	mov	r3, r6
 80068e6:	463a      	mov	r2, r7
 80068e8:	4628      	mov	r0, r5
 80068ea:	6a21      	ldr	r1, [r4, #32]
 80068ec:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80068f0:	47e0      	blx	ip
 80068f2:	2800      	cmp	r0, #0
 80068f4:	dc06      	bgt.n	8006904 <__sflush_r+0xf8>
 80068f6:	89a3      	ldrh	r3, [r4, #12]
 80068f8:	f04f 30ff 	mov.w	r0, #4294967295
 80068fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006900:	81a3      	strh	r3, [r4, #12]
 8006902:	e790      	b.n	8006826 <__sflush_r+0x1a>
 8006904:	4407      	add	r7, r0
 8006906:	1a36      	subs	r6, r6, r0
 8006908:	e7ea      	b.n	80068e0 <__sflush_r+0xd4>
 800690a:	bf00      	nop
 800690c:	20400001 	.word	0x20400001

08006910 <_fflush_r>:
 8006910:	b538      	push	{r3, r4, r5, lr}
 8006912:	690b      	ldr	r3, [r1, #16]
 8006914:	4605      	mov	r5, r0
 8006916:	460c      	mov	r4, r1
 8006918:	b913      	cbnz	r3, 8006920 <_fflush_r+0x10>
 800691a:	2500      	movs	r5, #0
 800691c:	4628      	mov	r0, r5
 800691e:	bd38      	pop	{r3, r4, r5, pc}
 8006920:	b118      	cbz	r0, 800692a <_fflush_r+0x1a>
 8006922:	6983      	ldr	r3, [r0, #24]
 8006924:	b90b      	cbnz	r3, 800692a <_fflush_r+0x1a>
 8006926:	f000 f887 	bl	8006a38 <__sinit>
 800692a:	4b14      	ldr	r3, [pc, #80]	; (800697c <_fflush_r+0x6c>)
 800692c:	429c      	cmp	r4, r3
 800692e:	d11b      	bne.n	8006968 <_fflush_r+0x58>
 8006930:	686c      	ldr	r4, [r5, #4]
 8006932:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d0ef      	beq.n	800691a <_fflush_r+0xa>
 800693a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800693c:	07d0      	lsls	r0, r2, #31
 800693e:	d404      	bmi.n	800694a <_fflush_r+0x3a>
 8006940:	0599      	lsls	r1, r3, #22
 8006942:	d402      	bmi.n	800694a <_fflush_r+0x3a>
 8006944:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006946:	f000 f915 	bl	8006b74 <__retarget_lock_acquire_recursive>
 800694a:	4628      	mov	r0, r5
 800694c:	4621      	mov	r1, r4
 800694e:	f7ff ff5d 	bl	800680c <__sflush_r>
 8006952:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006954:	4605      	mov	r5, r0
 8006956:	07da      	lsls	r2, r3, #31
 8006958:	d4e0      	bmi.n	800691c <_fflush_r+0xc>
 800695a:	89a3      	ldrh	r3, [r4, #12]
 800695c:	059b      	lsls	r3, r3, #22
 800695e:	d4dd      	bmi.n	800691c <_fflush_r+0xc>
 8006960:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006962:	f000 f908 	bl	8006b76 <__retarget_lock_release_recursive>
 8006966:	e7d9      	b.n	800691c <_fflush_r+0xc>
 8006968:	4b05      	ldr	r3, [pc, #20]	; (8006980 <_fflush_r+0x70>)
 800696a:	429c      	cmp	r4, r3
 800696c:	d101      	bne.n	8006972 <_fflush_r+0x62>
 800696e:	68ac      	ldr	r4, [r5, #8]
 8006970:	e7df      	b.n	8006932 <_fflush_r+0x22>
 8006972:	4b04      	ldr	r3, [pc, #16]	; (8006984 <_fflush_r+0x74>)
 8006974:	429c      	cmp	r4, r3
 8006976:	bf08      	it	eq
 8006978:	68ec      	ldreq	r4, [r5, #12]
 800697a:	e7da      	b.n	8006932 <_fflush_r+0x22>
 800697c:	08008eb8 	.word	0x08008eb8
 8006980:	08008ed8 	.word	0x08008ed8
 8006984:	08008e98 	.word	0x08008e98

08006988 <std>:
 8006988:	2300      	movs	r3, #0
 800698a:	b510      	push	{r4, lr}
 800698c:	4604      	mov	r4, r0
 800698e:	e9c0 3300 	strd	r3, r3, [r0]
 8006992:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006996:	6083      	str	r3, [r0, #8]
 8006998:	8181      	strh	r1, [r0, #12]
 800699a:	6643      	str	r3, [r0, #100]	; 0x64
 800699c:	81c2      	strh	r2, [r0, #14]
 800699e:	6183      	str	r3, [r0, #24]
 80069a0:	4619      	mov	r1, r3
 80069a2:	2208      	movs	r2, #8
 80069a4:	305c      	adds	r0, #92	; 0x5c
 80069a6:	f7fe ffe4 	bl	8005972 <memset>
 80069aa:	4b05      	ldr	r3, [pc, #20]	; (80069c0 <std+0x38>)
 80069ac:	6224      	str	r4, [r4, #32]
 80069ae:	6263      	str	r3, [r4, #36]	; 0x24
 80069b0:	4b04      	ldr	r3, [pc, #16]	; (80069c4 <std+0x3c>)
 80069b2:	62a3      	str	r3, [r4, #40]	; 0x28
 80069b4:	4b04      	ldr	r3, [pc, #16]	; (80069c8 <std+0x40>)
 80069b6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80069b8:	4b04      	ldr	r3, [pc, #16]	; (80069cc <std+0x44>)
 80069ba:	6323      	str	r3, [r4, #48]	; 0x30
 80069bc:	bd10      	pop	{r4, pc}
 80069be:	bf00      	nop
 80069c0:	08006d99 	.word	0x08006d99
 80069c4:	08006dbb 	.word	0x08006dbb
 80069c8:	08006df3 	.word	0x08006df3
 80069cc:	08006e17 	.word	0x08006e17

080069d0 <_cleanup_r>:
 80069d0:	4901      	ldr	r1, [pc, #4]	; (80069d8 <_cleanup_r+0x8>)
 80069d2:	f000 b8af 	b.w	8006b34 <_fwalk_reent>
 80069d6:	bf00      	nop
 80069d8:	08006911 	.word	0x08006911

080069dc <__sfmoreglue>:
 80069dc:	2268      	movs	r2, #104	; 0x68
 80069de:	b570      	push	{r4, r5, r6, lr}
 80069e0:	1e4d      	subs	r5, r1, #1
 80069e2:	4355      	muls	r5, r2
 80069e4:	460e      	mov	r6, r1
 80069e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80069ea:	f7ff f833 	bl	8005a54 <_malloc_r>
 80069ee:	4604      	mov	r4, r0
 80069f0:	b140      	cbz	r0, 8006a04 <__sfmoreglue+0x28>
 80069f2:	2100      	movs	r1, #0
 80069f4:	e9c0 1600 	strd	r1, r6, [r0]
 80069f8:	300c      	adds	r0, #12
 80069fa:	60a0      	str	r0, [r4, #8]
 80069fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006a00:	f7fe ffb7 	bl	8005972 <memset>
 8006a04:	4620      	mov	r0, r4
 8006a06:	bd70      	pop	{r4, r5, r6, pc}

08006a08 <__sfp_lock_acquire>:
 8006a08:	4801      	ldr	r0, [pc, #4]	; (8006a10 <__sfp_lock_acquire+0x8>)
 8006a0a:	f000 b8b3 	b.w	8006b74 <__retarget_lock_acquire_recursive>
 8006a0e:	bf00      	nop
 8006a10:	20008219 	.word	0x20008219

08006a14 <__sfp_lock_release>:
 8006a14:	4801      	ldr	r0, [pc, #4]	; (8006a1c <__sfp_lock_release+0x8>)
 8006a16:	f000 b8ae 	b.w	8006b76 <__retarget_lock_release_recursive>
 8006a1a:	bf00      	nop
 8006a1c:	20008219 	.word	0x20008219

08006a20 <__sinit_lock_acquire>:
 8006a20:	4801      	ldr	r0, [pc, #4]	; (8006a28 <__sinit_lock_acquire+0x8>)
 8006a22:	f000 b8a7 	b.w	8006b74 <__retarget_lock_acquire_recursive>
 8006a26:	bf00      	nop
 8006a28:	2000821a 	.word	0x2000821a

08006a2c <__sinit_lock_release>:
 8006a2c:	4801      	ldr	r0, [pc, #4]	; (8006a34 <__sinit_lock_release+0x8>)
 8006a2e:	f000 b8a2 	b.w	8006b76 <__retarget_lock_release_recursive>
 8006a32:	bf00      	nop
 8006a34:	2000821a 	.word	0x2000821a

08006a38 <__sinit>:
 8006a38:	b510      	push	{r4, lr}
 8006a3a:	4604      	mov	r4, r0
 8006a3c:	f7ff fff0 	bl	8006a20 <__sinit_lock_acquire>
 8006a40:	69a3      	ldr	r3, [r4, #24]
 8006a42:	b11b      	cbz	r3, 8006a4c <__sinit+0x14>
 8006a44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a48:	f7ff bff0 	b.w	8006a2c <__sinit_lock_release>
 8006a4c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006a50:	6523      	str	r3, [r4, #80]	; 0x50
 8006a52:	4b13      	ldr	r3, [pc, #76]	; (8006aa0 <__sinit+0x68>)
 8006a54:	4a13      	ldr	r2, [pc, #76]	; (8006aa4 <__sinit+0x6c>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	62a2      	str	r2, [r4, #40]	; 0x28
 8006a5a:	42a3      	cmp	r3, r4
 8006a5c:	bf08      	it	eq
 8006a5e:	2301      	moveq	r3, #1
 8006a60:	4620      	mov	r0, r4
 8006a62:	bf08      	it	eq
 8006a64:	61a3      	streq	r3, [r4, #24]
 8006a66:	f000 f81f 	bl	8006aa8 <__sfp>
 8006a6a:	6060      	str	r0, [r4, #4]
 8006a6c:	4620      	mov	r0, r4
 8006a6e:	f000 f81b 	bl	8006aa8 <__sfp>
 8006a72:	60a0      	str	r0, [r4, #8]
 8006a74:	4620      	mov	r0, r4
 8006a76:	f000 f817 	bl	8006aa8 <__sfp>
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	2104      	movs	r1, #4
 8006a7e:	60e0      	str	r0, [r4, #12]
 8006a80:	6860      	ldr	r0, [r4, #4]
 8006a82:	f7ff ff81 	bl	8006988 <std>
 8006a86:	2201      	movs	r2, #1
 8006a88:	2109      	movs	r1, #9
 8006a8a:	68a0      	ldr	r0, [r4, #8]
 8006a8c:	f7ff ff7c 	bl	8006988 <std>
 8006a90:	2202      	movs	r2, #2
 8006a92:	2112      	movs	r1, #18
 8006a94:	68e0      	ldr	r0, [r4, #12]
 8006a96:	f7ff ff77 	bl	8006988 <std>
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	61a3      	str	r3, [r4, #24]
 8006a9e:	e7d1      	b.n	8006a44 <__sinit+0xc>
 8006aa0:	08008cb0 	.word	0x08008cb0
 8006aa4:	080069d1 	.word	0x080069d1

08006aa8 <__sfp>:
 8006aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006aaa:	4607      	mov	r7, r0
 8006aac:	f7ff ffac 	bl	8006a08 <__sfp_lock_acquire>
 8006ab0:	4b1e      	ldr	r3, [pc, #120]	; (8006b2c <__sfp+0x84>)
 8006ab2:	681e      	ldr	r6, [r3, #0]
 8006ab4:	69b3      	ldr	r3, [r6, #24]
 8006ab6:	b913      	cbnz	r3, 8006abe <__sfp+0x16>
 8006ab8:	4630      	mov	r0, r6
 8006aba:	f7ff ffbd 	bl	8006a38 <__sinit>
 8006abe:	3648      	adds	r6, #72	; 0x48
 8006ac0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006ac4:	3b01      	subs	r3, #1
 8006ac6:	d503      	bpl.n	8006ad0 <__sfp+0x28>
 8006ac8:	6833      	ldr	r3, [r6, #0]
 8006aca:	b30b      	cbz	r3, 8006b10 <__sfp+0x68>
 8006acc:	6836      	ldr	r6, [r6, #0]
 8006ace:	e7f7      	b.n	8006ac0 <__sfp+0x18>
 8006ad0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006ad4:	b9d5      	cbnz	r5, 8006b0c <__sfp+0x64>
 8006ad6:	4b16      	ldr	r3, [pc, #88]	; (8006b30 <__sfp+0x88>)
 8006ad8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006adc:	60e3      	str	r3, [r4, #12]
 8006ade:	6665      	str	r5, [r4, #100]	; 0x64
 8006ae0:	f000 f847 	bl	8006b72 <__retarget_lock_init_recursive>
 8006ae4:	f7ff ff96 	bl	8006a14 <__sfp_lock_release>
 8006ae8:	2208      	movs	r2, #8
 8006aea:	4629      	mov	r1, r5
 8006aec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006af0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006af4:	6025      	str	r5, [r4, #0]
 8006af6:	61a5      	str	r5, [r4, #24]
 8006af8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006afc:	f7fe ff39 	bl	8005972 <memset>
 8006b00:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006b04:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006b08:	4620      	mov	r0, r4
 8006b0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b0c:	3468      	adds	r4, #104	; 0x68
 8006b0e:	e7d9      	b.n	8006ac4 <__sfp+0x1c>
 8006b10:	2104      	movs	r1, #4
 8006b12:	4638      	mov	r0, r7
 8006b14:	f7ff ff62 	bl	80069dc <__sfmoreglue>
 8006b18:	4604      	mov	r4, r0
 8006b1a:	6030      	str	r0, [r6, #0]
 8006b1c:	2800      	cmp	r0, #0
 8006b1e:	d1d5      	bne.n	8006acc <__sfp+0x24>
 8006b20:	f7ff ff78 	bl	8006a14 <__sfp_lock_release>
 8006b24:	230c      	movs	r3, #12
 8006b26:	603b      	str	r3, [r7, #0]
 8006b28:	e7ee      	b.n	8006b08 <__sfp+0x60>
 8006b2a:	bf00      	nop
 8006b2c:	08008cb0 	.word	0x08008cb0
 8006b30:	ffff0001 	.word	0xffff0001

08006b34 <_fwalk_reent>:
 8006b34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b38:	4606      	mov	r6, r0
 8006b3a:	4688      	mov	r8, r1
 8006b3c:	2700      	movs	r7, #0
 8006b3e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006b42:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006b46:	f1b9 0901 	subs.w	r9, r9, #1
 8006b4a:	d505      	bpl.n	8006b58 <_fwalk_reent+0x24>
 8006b4c:	6824      	ldr	r4, [r4, #0]
 8006b4e:	2c00      	cmp	r4, #0
 8006b50:	d1f7      	bne.n	8006b42 <_fwalk_reent+0xe>
 8006b52:	4638      	mov	r0, r7
 8006b54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b58:	89ab      	ldrh	r3, [r5, #12]
 8006b5a:	2b01      	cmp	r3, #1
 8006b5c:	d907      	bls.n	8006b6e <_fwalk_reent+0x3a>
 8006b5e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006b62:	3301      	adds	r3, #1
 8006b64:	d003      	beq.n	8006b6e <_fwalk_reent+0x3a>
 8006b66:	4629      	mov	r1, r5
 8006b68:	4630      	mov	r0, r6
 8006b6a:	47c0      	blx	r8
 8006b6c:	4307      	orrs	r7, r0
 8006b6e:	3568      	adds	r5, #104	; 0x68
 8006b70:	e7e9      	b.n	8006b46 <_fwalk_reent+0x12>

08006b72 <__retarget_lock_init_recursive>:
 8006b72:	4770      	bx	lr

08006b74 <__retarget_lock_acquire_recursive>:
 8006b74:	4770      	bx	lr

08006b76 <__retarget_lock_release_recursive>:
 8006b76:	4770      	bx	lr

08006b78 <__swhatbuf_r>:
 8006b78:	b570      	push	{r4, r5, r6, lr}
 8006b7a:	460e      	mov	r6, r1
 8006b7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b80:	4614      	mov	r4, r2
 8006b82:	2900      	cmp	r1, #0
 8006b84:	461d      	mov	r5, r3
 8006b86:	b096      	sub	sp, #88	; 0x58
 8006b88:	da08      	bge.n	8006b9c <__swhatbuf_r+0x24>
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006b90:	602a      	str	r2, [r5, #0]
 8006b92:	061a      	lsls	r2, r3, #24
 8006b94:	d410      	bmi.n	8006bb8 <__swhatbuf_r+0x40>
 8006b96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b9a:	e00e      	b.n	8006bba <__swhatbuf_r+0x42>
 8006b9c:	466a      	mov	r2, sp
 8006b9e:	f000 f961 	bl	8006e64 <_fstat_r>
 8006ba2:	2800      	cmp	r0, #0
 8006ba4:	dbf1      	blt.n	8006b8a <__swhatbuf_r+0x12>
 8006ba6:	9a01      	ldr	r2, [sp, #4]
 8006ba8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006bac:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006bb0:	425a      	negs	r2, r3
 8006bb2:	415a      	adcs	r2, r3
 8006bb4:	602a      	str	r2, [r5, #0]
 8006bb6:	e7ee      	b.n	8006b96 <__swhatbuf_r+0x1e>
 8006bb8:	2340      	movs	r3, #64	; 0x40
 8006bba:	2000      	movs	r0, #0
 8006bbc:	6023      	str	r3, [r4, #0]
 8006bbe:	b016      	add	sp, #88	; 0x58
 8006bc0:	bd70      	pop	{r4, r5, r6, pc}
	...

08006bc4 <__smakebuf_r>:
 8006bc4:	898b      	ldrh	r3, [r1, #12]
 8006bc6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006bc8:	079d      	lsls	r5, r3, #30
 8006bca:	4606      	mov	r6, r0
 8006bcc:	460c      	mov	r4, r1
 8006bce:	d507      	bpl.n	8006be0 <__smakebuf_r+0x1c>
 8006bd0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006bd4:	6023      	str	r3, [r4, #0]
 8006bd6:	6123      	str	r3, [r4, #16]
 8006bd8:	2301      	movs	r3, #1
 8006bda:	6163      	str	r3, [r4, #20]
 8006bdc:	b002      	add	sp, #8
 8006bde:	bd70      	pop	{r4, r5, r6, pc}
 8006be0:	466a      	mov	r2, sp
 8006be2:	ab01      	add	r3, sp, #4
 8006be4:	f7ff ffc8 	bl	8006b78 <__swhatbuf_r>
 8006be8:	9900      	ldr	r1, [sp, #0]
 8006bea:	4605      	mov	r5, r0
 8006bec:	4630      	mov	r0, r6
 8006bee:	f7fe ff31 	bl	8005a54 <_malloc_r>
 8006bf2:	b948      	cbnz	r0, 8006c08 <__smakebuf_r+0x44>
 8006bf4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006bf8:	059a      	lsls	r2, r3, #22
 8006bfa:	d4ef      	bmi.n	8006bdc <__smakebuf_r+0x18>
 8006bfc:	f023 0303 	bic.w	r3, r3, #3
 8006c00:	f043 0302 	orr.w	r3, r3, #2
 8006c04:	81a3      	strh	r3, [r4, #12]
 8006c06:	e7e3      	b.n	8006bd0 <__smakebuf_r+0xc>
 8006c08:	4b0d      	ldr	r3, [pc, #52]	; (8006c40 <__smakebuf_r+0x7c>)
 8006c0a:	62b3      	str	r3, [r6, #40]	; 0x28
 8006c0c:	89a3      	ldrh	r3, [r4, #12]
 8006c0e:	6020      	str	r0, [r4, #0]
 8006c10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c14:	81a3      	strh	r3, [r4, #12]
 8006c16:	9b00      	ldr	r3, [sp, #0]
 8006c18:	6120      	str	r0, [r4, #16]
 8006c1a:	6163      	str	r3, [r4, #20]
 8006c1c:	9b01      	ldr	r3, [sp, #4]
 8006c1e:	b15b      	cbz	r3, 8006c38 <__smakebuf_r+0x74>
 8006c20:	4630      	mov	r0, r6
 8006c22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c26:	f000 f92f 	bl	8006e88 <_isatty_r>
 8006c2a:	b128      	cbz	r0, 8006c38 <__smakebuf_r+0x74>
 8006c2c:	89a3      	ldrh	r3, [r4, #12]
 8006c2e:	f023 0303 	bic.w	r3, r3, #3
 8006c32:	f043 0301 	orr.w	r3, r3, #1
 8006c36:	81a3      	strh	r3, [r4, #12]
 8006c38:	89a0      	ldrh	r0, [r4, #12]
 8006c3a:	4305      	orrs	r5, r0
 8006c3c:	81a5      	strh	r5, [r4, #12]
 8006c3e:	e7cd      	b.n	8006bdc <__smakebuf_r+0x18>
 8006c40:	080069d1 	.word	0x080069d1

08006c44 <memchr>:
 8006c44:	4603      	mov	r3, r0
 8006c46:	b510      	push	{r4, lr}
 8006c48:	b2c9      	uxtb	r1, r1
 8006c4a:	4402      	add	r2, r0
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	4618      	mov	r0, r3
 8006c50:	d101      	bne.n	8006c56 <memchr+0x12>
 8006c52:	2000      	movs	r0, #0
 8006c54:	e003      	b.n	8006c5e <memchr+0x1a>
 8006c56:	7804      	ldrb	r4, [r0, #0]
 8006c58:	3301      	adds	r3, #1
 8006c5a:	428c      	cmp	r4, r1
 8006c5c:	d1f6      	bne.n	8006c4c <memchr+0x8>
 8006c5e:	bd10      	pop	{r4, pc}

08006c60 <memcpy>:
 8006c60:	440a      	add	r2, r1
 8006c62:	4291      	cmp	r1, r2
 8006c64:	f100 33ff 	add.w	r3, r0, #4294967295
 8006c68:	d100      	bne.n	8006c6c <memcpy+0xc>
 8006c6a:	4770      	bx	lr
 8006c6c:	b510      	push	{r4, lr}
 8006c6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c72:	4291      	cmp	r1, r2
 8006c74:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c78:	d1f9      	bne.n	8006c6e <memcpy+0xe>
 8006c7a:	bd10      	pop	{r4, pc}

08006c7c <memmove>:
 8006c7c:	4288      	cmp	r0, r1
 8006c7e:	b510      	push	{r4, lr}
 8006c80:	eb01 0402 	add.w	r4, r1, r2
 8006c84:	d902      	bls.n	8006c8c <memmove+0x10>
 8006c86:	4284      	cmp	r4, r0
 8006c88:	4623      	mov	r3, r4
 8006c8a:	d807      	bhi.n	8006c9c <memmove+0x20>
 8006c8c:	1e43      	subs	r3, r0, #1
 8006c8e:	42a1      	cmp	r1, r4
 8006c90:	d008      	beq.n	8006ca4 <memmove+0x28>
 8006c92:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006c96:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006c9a:	e7f8      	b.n	8006c8e <memmove+0x12>
 8006c9c:	4601      	mov	r1, r0
 8006c9e:	4402      	add	r2, r0
 8006ca0:	428a      	cmp	r2, r1
 8006ca2:	d100      	bne.n	8006ca6 <memmove+0x2a>
 8006ca4:	bd10      	pop	{r4, pc}
 8006ca6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006caa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006cae:	e7f7      	b.n	8006ca0 <memmove+0x24>

08006cb0 <_realloc_r>:
 8006cb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cb4:	4680      	mov	r8, r0
 8006cb6:	4614      	mov	r4, r2
 8006cb8:	460e      	mov	r6, r1
 8006cba:	b921      	cbnz	r1, 8006cc6 <_realloc_r+0x16>
 8006cbc:	4611      	mov	r1, r2
 8006cbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006cc2:	f7fe bec7 	b.w	8005a54 <_malloc_r>
 8006cc6:	b92a      	cbnz	r2, 8006cd4 <_realloc_r+0x24>
 8006cc8:	f7fe fe5c 	bl	8005984 <_free_r>
 8006ccc:	4625      	mov	r5, r4
 8006cce:	4628      	mov	r0, r5
 8006cd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006cd4:	f000 f8fa 	bl	8006ecc <_malloc_usable_size_r>
 8006cd8:	4284      	cmp	r4, r0
 8006cda:	4607      	mov	r7, r0
 8006cdc:	d802      	bhi.n	8006ce4 <_realloc_r+0x34>
 8006cde:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006ce2:	d812      	bhi.n	8006d0a <_realloc_r+0x5a>
 8006ce4:	4621      	mov	r1, r4
 8006ce6:	4640      	mov	r0, r8
 8006ce8:	f7fe feb4 	bl	8005a54 <_malloc_r>
 8006cec:	4605      	mov	r5, r0
 8006cee:	2800      	cmp	r0, #0
 8006cf0:	d0ed      	beq.n	8006cce <_realloc_r+0x1e>
 8006cf2:	42bc      	cmp	r4, r7
 8006cf4:	4622      	mov	r2, r4
 8006cf6:	4631      	mov	r1, r6
 8006cf8:	bf28      	it	cs
 8006cfa:	463a      	movcs	r2, r7
 8006cfc:	f7ff ffb0 	bl	8006c60 <memcpy>
 8006d00:	4631      	mov	r1, r6
 8006d02:	4640      	mov	r0, r8
 8006d04:	f7fe fe3e 	bl	8005984 <_free_r>
 8006d08:	e7e1      	b.n	8006cce <_realloc_r+0x1e>
 8006d0a:	4635      	mov	r5, r6
 8006d0c:	e7df      	b.n	8006cce <_realloc_r+0x1e>

08006d0e <_raise_r>:
 8006d0e:	291f      	cmp	r1, #31
 8006d10:	b538      	push	{r3, r4, r5, lr}
 8006d12:	4604      	mov	r4, r0
 8006d14:	460d      	mov	r5, r1
 8006d16:	d904      	bls.n	8006d22 <_raise_r+0x14>
 8006d18:	2316      	movs	r3, #22
 8006d1a:	6003      	str	r3, [r0, #0]
 8006d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d20:	bd38      	pop	{r3, r4, r5, pc}
 8006d22:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006d24:	b112      	cbz	r2, 8006d2c <_raise_r+0x1e>
 8006d26:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006d2a:	b94b      	cbnz	r3, 8006d40 <_raise_r+0x32>
 8006d2c:	4620      	mov	r0, r4
 8006d2e:	f000 f831 	bl	8006d94 <_getpid_r>
 8006d32:	462a      	mov	r2, r5
 8006d34:	4601      	mov	r1, r0
 8006d36:	4620      	mov	r0, r4
 8006d38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d3c:	f000 b818 	b.w	8006d70 <_kill_r>
 8006d40:	2b01      	cmp	r3, #1
 8006d42:	d00a      	beq.n	8006d5a <_raise_r+0x4c>
 8006d44:	1c59      	adds	r1, r3, #1
 8006d46:	d103      	bne.n	8006d50 <_raise_r+0x42>
 8006d48:	2316      	movs	r3, #22
 8006d4a:	6003      	str	r3, [r0, #0]
 8006d4c:	2001      	movs	r0, #1
 8006d4e:	e7e7      	b.n	8006d20 <_raise_r+0x12>
 8006d50:	2400      	movs	r4, #0
 8006d52:	4628      	mov	r0, r5
 8006d54:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006d58:	4798      	blx	r3
 8006d5a:	2000      	movs	r0, #0
 8006d5c:	e7e0      	b.n	8006d20 <_raise_r+0x12>
	...

08006d60 <raise>:
 8006d60:	4b02      	ldr	r3, [pc, #8]	; (8006d6c <raise+0xc>)
 8006d62:	4601      	mov	r1, r0
 8006d64:	6818      	ldr	r0, [r3, #0]
 8006d66:	f7ff bfd2 	b.w	8006d0e <_raise_r>
 8006d6a:	bf00      	nop
 8006d6c:	20000010 	.word	0x20000010

08006d70 <_kill_r>:
 8006d70:	b538      	push	{r3, r4, r5, lr}
 8006d72:	2300      	movs	r3, #0
 8006d74:	4d06      	ldr	r5, [pc, #24]	; (8006d90 <_kill_r+0x20>)
 8006d76:	4604      	mov	r4, r0
 8006d78:	4608      	mov	r0, r1
 8006d7a:	4611      	mov	r1, r2
 8006d7c:	602b      	str	r3, [r5, #0]
 8006d7e:	f7fb fcb5 	bl	80026ec <_kill>
 8006d82:	1c43      	adds	r3, r0, #1
 8006d84:	d102      	bne.n	8006d8c <_kill_r+0x1c>
 8006d86:	682b      	ldr	r3, [r5, #0]
 8006d88:	b103      	cbz	r3, 8006d8c <_kill_r+0x1c>
 8006d8a:	6023      	str	r3, [r4, #0]
 8006d8c:	bd38      	pop	{r3, r4, r5, pc}
 8006d8e:	bf00      	nop
 8006d90:	20008214 	.word	0x20008214

08006d94 <_getpid_r>:
 8006d94:	f7fb bca8 	b.w	80026e8 <_getpid>

08006d98 <__sread>:
 8006d98:	b510      	push	{r4, lr}
 8006d9a:	460c      	mov	r4, r1
 8006d9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006da0:	f000 f89c 	bl	8006edc <_read_r>
 8006da4:	2800      	cmp	r0, #0
 8006da6:	bfab      	itete	ge
 8006da8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006daa:	89a3      	ldrhlt	r3, [r4, #12]
 8006dac:	181b      	addge	r3, r3, r0
 8006dae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006db2:	bfac      	ite	ge
 8006db4:	6563      	strge	r3, [r4, #84]	; 0x54
 8006db6:	81a3      	strhlt	r3, [r4, #12]
 8006db8:	bd10      	pop	{r4, pc}

08006dba <__swrite>:
 8006dba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006dbe:	461f      	mov	r7, r3
 8006dc0:	898b      	ldrh	r3, [r1, #12]
 8006dc2:	4605      	mov	r5, r0
 8006dc4:	05db      	lsls	r3, r3, #23
 8006dc6:	460c      	mov	r4, r1
 8006dc8:	4616      	mov	r6, r2
 8006dca:	d505      	bpl.n	8006dd8 <__swrite+0x1e>
 8006dcc:	2302      	movs	r3, #2
 8006dce:	2200      	movs	r2, #0
 8006dd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006dd4:	f000 f868 	bl	8006ea8 <_lseek_r>
 8006dd8:	89a3      	ldrh	r3, [r4, #12]
 8006dda:	4632      	mov	r2, r6
 8006ddc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006de0:	81a3      	strh	r3, [r4, #12]
 8006de2:	4628      	mov	r0, r5
 8006de4:	463b      	mov	r3, r7
 8006de6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006dea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006dee:	f000 b817 	b.w	8006e20 <_write_r>

08006df2 <__sseek>:
 8006df2:	b510      	push	{r4, lr}
 8006df4:	460c      	mov	r4, r1
 8006df6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006dfa:	f000 f855 	bl	8006ea8 <_lseek_r>
 8006dfe:	1c43      	adds	r3, r0, #1
 8006e00:	89a3      	ldrh	r3, [r4, #12]
 8006e02:	bf15      	itete	ne
 8006e04:	6560      	strne	r0, [r4, #84]	; 0x54
 8006e06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006e0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006e0e:	81a3      	strheq	r3, [r4, #12]
 8006e10:	bf18      	it	ne
 8006e12:	81a3      	strhne	r3, [r4, #12]
 8006e14:	bd10      	pop	{r4, pc}

08006e16 <__sclose>:
 8006e16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e1a:	f000 b813 	b.w	8006e44 <_close_r>
	...

08006e20 <_write_r>:
 8006e20:	b538      	push	{r3, r4, r5, lr}
 8006e22:	4604      	mov	r4, r0
 8006e24:	4608      	mov	r0, r1
 8006e26:	4611      	mov	r1, r2
 8006e28:	2200      	movs	r2, #0
 8006e2a:	4d05      	ldr	r5, [pc, #20]	; (8006e40 <_write_r+0x20>)
 8006e2c:	602a      	str	r2, [r5, #0]
 8006e2e:	461a      	mov	r2, r3
 8006e30:	f7fb fc78 	bl	8002724 <_write>
 8006e34:	1c43      	adds	r3, r0, #1
 8006e36:	d102      	bne.n	8006e3e <_write_r+0x1e>
 8006e38:	682b      	ldr	r3, [r5, #0]
 8006e3a:	b103      	cbz	r3, 8006e3e <_write_r+0x1e>
 8006e3c:	6023      	str	r3, [r4, #0]
 8006e3e:	bd38      	pop	{r3, r4, r5, pc}
 8006e40:	20008214 	.word	0x20008214

08006e44 <_close_r>:
 8006e44:	b538      	push	{r3, r4, r5, lr}
 8006e46:	2300      	movs	r3, #0
 8006e48:	4d05      	ldr	r5, [pc, #20]	; (8006e60 <_close_r+0x1c>)
 8006e4a:	4604      	mov	r4, r0
 8006e4c:	4608      	mov	r0, r1
 8006e4e:	602b      	str	r3, [r5, #0]
 8006e50:	f7fb fc76 	bl	8002740 <_close>
 8006e54:	1c43      	adds	r3, r0, #1
 8006e56:	d102      	bne.n	8006e5e <_close_r+0x1a>
 8006e58:	682b      	ldr	r3, [r5, #0]
 8006e5a:	b103      	cbz	r3, 8006e5e <_close_r+0x1a>
 8006e5c:	6023      	str	r3, [r4, #0]
 8006e5e:	bd38      	pop	{r3, r4, r5, pc}
 8006e60:	20008214 	.word	0x20008214

08006e64 <_fstat_r>:
 8006e64:	b538      	push	{r3, r4, r5, lr}
 8006e66:	2300      	movs	r3, #0
 8006e68:	4d06      	ldr	r5, [pc, #24]	; (8006e84 <_fstat_r+0x20>)
 8006e6a:	4604      	mov	r4, r0
 8006e6c:	4608      	mov	r0, r1
 8006e6e:	4611      	mov	r1, r2
 8006e70:	602b      	str	r3, [r5, #0]
 8006e72:	f7fb fc68 	bl	8002746 <_fstat>
 8006e76:	1c43      	adds	r3, r0, #1
 8006e78:	d102      	bne.n	8006e80 <_fstat_r+0x1c>
 8006e7a:	682b      	ldr	r3, [r5, #0]
 8006e7c:	b103      	cbz	r3, 8006e80 <_fstat_r+0x1c>
 8006e7e:	6023      	str	r3, [r4, #0]
 8006e80:	bd38      	pop	{r3, r4, r5, pc}
 8006e82:	bf00      	nop
 8006e84:	20008214 	.word	0x20008214

08006e88 <_isatty_r>:
 8006e88:	b538      	push	{r3, r4, r5, lr}
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	4d05      	ldr	r5, [pc, #20]	; (8006ea4 <_isatty_r+0x1c>)
 8006e8e:	4604      	mov	r4, r0
 8006e90:	4608      	mov	r0, r1
 8006e92:	602b      	str	r3, [r5, #0]
 8006e94:	f7fb fc5c 	bl	8002750 <_isatty>
 8006e98:	1c43      	adds	r3, r0, #1
 8006e9a:	d102      	bne.n	8006ea2 <_isatty_r+0x1a>
 8006e9c:	682b      	ldr	r3, [r5, #0]
 8006e9e:	b103      	cbz	r3, 8006ea2 <_isatty_r+0x1a>
 8006ea0:	6023      	str	r3, [r4, #0]
 8006ea2:	bd38      	pop	{r3, r4, r5, pc}
 8006ea4:	20008214 	.word	0x20008214

08006ea8 <_lseek_r>:
 8006ea8:	b538      	push	{r3, r4, r5, lr}
 8006eaa:	4604      	mov	r4, r0
 8006eac:	4608      	mov	r0, r1
 8006eae:	4611      	mov	r1, r2
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	4d05      	ldr	r5, [pc, #20]	; (8006ec8 <_lseek_r+0x20>)
 8006eb4:	602a      	str	r2, [r5, #0]
 8006eb6:	461a      	mov	r2, r3
 8006eb8:	f7fb fc4c 	bl	8002754 <_lseek>
 8006ebc:	1c43      	adds	r3, r0, #1
 8006ebe:	d102      	bne.n	8006ec6 <_lseek_r+0x1e>
 8006ec0:	682b      	ldr	r3, [r5, #0]
 8006ec2:	b103      	cbz	r3, 8006ec6 <_lseek_r+0x1e>
 8006ec4:	6023      	str	r3, [r4, #0]
 8006ec6:	bd38      	pop	{r3, r4, r5, pc}
 8006ec8:	20008214 	.word	0x20008214

08006ecc <_malloc_usable_size_r>:
 8006ecc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ed0:	1f18      	subs	r0, r3, #4
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	bfbc      	itt	lt
 8006ed6:	580b      	ldrlt	r3, [r1, r0]
 8006ed8:	18c0      	addlt	r0, r0, r3
 8006eda:	4770      	bx	lr

08006edc <_read_r>:
 8006edc:	b538      	push	{r3, r4, r5, lr}
 8006ede:	4604      	mov	r4, r0
 8006ee0:	4608      	mov	r0, r1
 8006ee2:	4611      	mov	r1, r2
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	4d05      	ldr	r5, [pc, #20]	; (8006efc <_read_r+0x20>)
 8006ee8:	602a      	str	r2, [r5, #0]
 8006eea:	461a      	mov	r2, r3
 8006eec:	f7fb fc0c 	bl	8002708 <_read>
 8006ef0:	1c43      	adds	r3, r0, #1
 8006ef2:	d102      	bne.n	8006efa <_read_r+0x1e>
 8006ef4:	682b      	ldr	r3, [r5, #0]
 8006ef6:	b103      	cbz	r3, 8006efa <_read_r+0x1e>
 8006ef8:	6023      	str	r3, [r4, #0]
 8006efa:	bd38      	pop	{r3, r4, r5, pc}
 8006efc:	20008214 	.word	0x20008214

08006f00 <_init>:
 8006f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f02:	bf00      	nop
 8006f04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f06:	bc08      	pop	{r3}
 8006f08:	469e      	mov	lr, r3
 8006f0a:	4770      	bx	lr

08006f0c <_fini>:
 8006f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f0e:	bf00      	nop
 8006f10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f12:	bc08      	pop	{r3}
 8006f14:	469e      	mov	lr, r3
 8006f16:	4770      	bx	lr
