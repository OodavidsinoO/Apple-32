
STM32F103_MOS_6502_CPU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044d4  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001bcc  080046b8  080046b8  000146b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006284  08006284  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08006284  08006284  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006284  08006284  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006284  08006284  00016284  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006288  08006288  00016288  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800628c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008174  20000010  0800629c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20008184  0800629c  00028184  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000190a1  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003654  00000000  00000000  000390da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000c7a4  00000000  00000000  0003c72e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e30  00000000  00000000  00048ed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001828  00000000  00000000  00049d08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b50a  00000000  00000000  0004b530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016470  00000000  00000000  00066a3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00099ccc  00000000  00000000  0007ceaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00116b76  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002750  00000000  00000000  00116bc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000010 	.word	0x20000010
 8000200:	00000000 	.word	0x00000000
 8000204:	080046a0 	.word	0x080046a0

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000014 	.word	0x20000014
 8000220:	080046a0 	.word	0x080046a0

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <Delay>:
	LCD_CURSOR_X = 0;
	// Draw the new cursor
	LCD_DrawChar(LCD_CURSOR_X * WIDTH_EN_CHAR, LCD_CURSOR_Y * HEIGHT_EN_CHAR, CURSOR_CHAR);
}

void Delay ( __IO uint32_t nCount ){  for ( ; nCount != 0; nCount -- );}
 8000234:	b082      	sub	sp, #8
 8000236:	9001      	str	r0, [sp, #4]
 8000238:	9b01      	ldr	r3, [sp, #4]
 800023a:	b90b      	cbnz	r3, 8000240 <Delay+0xc>
 800023c:	b002      	add	sp, #8
 800023e:	4770      	bx	lr
 8000240:	9b01      	ldr	r3, [sp, #4]
 8000242:	3b01      	subs	r3, #1
 8000244:	9301      	str	r3, [sp, #4]
 8000246:	e7f7      	b.n	8000238 <Delay+0x4>

08000248 <LCD_Rst>:
}



void LCD_Rst ( void )
{			
 8000248:	b538      	push	{r3, r4, r5, lr}
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_RESET);
 800024a:	4d0a      	ldr	r5, [pc, #40]	; (8000274 <LCD_Rst+0x2c>)
	Delay ( 0xAFFf<<2 ); 					   
 800024c:	4c0a      	ldr	r4, [pc, #40]	; (8000278 <LCD_Rst+0x30>)
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_RESET);
 800024e:	4628      	mov	r0, r5
 8000250:	2200      	movs	r2, #0
 8000252:	2102      	movs	r1, #2
 8000254:	f002 fb48 	bl	80028e8 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 					   
 8000258:	4620      	mov	r0, r4
 800025a:	f7ff ffeb 	bl	8000234 <Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_SET);
 800025e:	2201      	movs	r2, #1
 8000260:	4628      	mov	r0, r5
 8000262:	2102      	movs	r1, #2
 8000264:	f002 fb40 	bl	80028e8 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 	
 8000268:	4620      	mov	r0, r4
}
 800026a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	Delay ( 0xAFFf<<2 ); 	
 800026e:	f7ff bfe1 	b.w	8000234 <Delay>
 8000272:	bf00      	nop
 8000274:	40011800 	.word	0x40011800
 8000278:	0002bffc 	.word	0x0002bffc

0800027c <LCD_REG_Config>:



void LCD_Write_Cmd ( uint16_t usCmd )
{
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 800027c:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000280:	23cf      	movs	r3, #207	; 0xcf
	return ( * ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) );	
}


void LCD_REG_Config ( void )
{
 8000282:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000286:	2100      	movs	r1, #0
 8000288:	2081      	movs	r0, #129	; 0x81
 800028a:	2730      	movs	r7, #48	; 0x30
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 800028c:	24ed      	movs	r4, #237	; 0xed
 800028e:	8013      	strh	r3, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000290:	4b5c      	ldr	r3, [pc, #368]	; (8000404 <LCD_REG_Config+0x188>)
 8000292:	f04f 0c03 	mov.w	ip, #3
 8000296:	8019      	strh	r1, [r3, #0]
 8000298:	8018      	strh	r0, [r3, #0]
 800029a:	801f      	strh	r7, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 800029c:	8014      	strh	r4, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 800029e:	2464      	movs	r4, #100	; 0x64
 80002a0:	801c      	strh	r4, [r3, #0]
 80002a2:	2412      	movs	r4, #18
 80002a4:	f8a3 c000 	strh.w	ip, [r3]
 80002a8:	801c      	strh	r4, [r3, #0]
 80002aa:	8018      	strh	r0, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 80002ac:	20e8      	movs	r0, #232	; 0xe8
 80002ae:	8010      	strh	r0, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 80002b0:	2085      	movs	r0, #133	; 0x85
 80002b2:	f04f 0810 	mov.w	r8, #16
 80002b6:	8018      	strh	r0, [r3, #0]
 80002b8:	2078      	movs	r0, #120	; 0x78
 80002ba:	f8a3 8000 	strh.w	r8, [r3]
 80002be:	8018      	strh	r0, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 80002c0:	20cb      	movs	r0, #203	; 0xcb
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 80002c2:	f04f 0e39 	mov.w	lr, #57	; 0x39
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 80002c6:	8010      	strh	r0, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 80002c8:	202c      	movs	r0, #44	; 0x2c
 80002ca:	f8a3 e000 	strh.w	lr, [r3]
 80002ce:	8018      	strh	r0, [r3, #0]
 80002d0:	2034      	movs	r0, #52	; 0x34
 80002d2:	8019      	strh	r1, [r3, #0]
 80002d4:	8018      	strh	r0, [r3, #0]
 80002d6:	2002      	movs	r0, #2
 80002d8:	8018      	strh	r0, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 80002da:	20f7      	movs	r0, #247	; 0xf7
 80002dc:	8010      	strh	r0, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 80002de:	2020      	movs	r0, #32
 80002e0:	8018      	strh	r0, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 80002e2:	20ea      	movs	r0, #234	; 0xea
 80002e4:	8010      	strh	r0, [r2, #0]
 80002e6:	20b1      	movs	r0, #177	; 0xb1
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 80002e8:	8019      	strh	r1, [r3, #0]
 80002ea:	f04f 091b 	mov.w	r9, #27
 80002ee:	8019      	strh	r1, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 80002f0:	8010      	strh	r0, [r2, #0]
 80002f2:	20b6      	movs	r0, #182	; 0xb6
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 80002f4:	8019      	strh	r1, [r3, #0]
 80002f6:	f8a3 9000 	strh.w	r9, [r3]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 80002fa:	8010      	strh	r0, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 80002fc:	200a      	movs	r0, #10
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 80002fe:	24c0      	movs	r4, #192	; 0xc0
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000300:	8018      	strh	r0, [r3, #0]
 8000302:	20a2      	movs	r0, #162	; 0xa2
 8000304:	8018      	strh	r0, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000306:	8014      	strh	r4, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000308:	2435      	movs	r4, #53	; 0x35
 800030a:	801c      	strh	r4, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 800030c:	24c1      	movs	r4, #193	; 0xc1
 800030e:	25c5      	movs	r5, #197	; 0xc5
 8000310:	8014      	strh	r4, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000312:	2411      	movs	r4, #17
 8000314:	801c      	strh	r4, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000316:	8015      	strh	r5, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000318:	2545      	movs	r5, #69	; 0x45
 800031a:	801d      	strh	r5, [r3, #0]
 800031c:	801d      	strh	r5, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 800031e:	25c7      	movs	r5, #199	; 0xc7
 8000320:	8015      	strh	r5, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000322:	8018      	strh	r0, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000324:	20f2      	movs	r0, #242	; 0xf2
 8000326:	2626      	movs	r6, #38	; 0x26
 8000328:	8010      	strh	r0, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 800032a:	2501      	movs	r5, #1
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 800032c:	20e0      	movs	r0, #224	; 0xe0
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 800032e:	8019      	strh	r1, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000330:	8016      	strh	r6, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000332:	801d      	strh	r5, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000334:	8010      	strh	r0, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000336:	200f      	movs	r0, #15
 8000338:	8018      	strh	r0, [r3, #0]
 800033a:	801e      	strh	r6, [r3, #0]
 800033c:	2624      	movs	r6, #36	; 0x24
 800033e:	801e      	strh	r6, [r3, #0]
 8000340:	260b      	movs	r6, #11
 8000342:	801e      	strh	r6, [r3, #0]
 8000344:	260e      	movs	r6, #14
 8000346:	f04f 0a54 	mov.w	sl, #84	; 0x54
 800034a:	801e      	strh	r6, [r3, #0]
 800034c:	2609      	movs	r6, #9
 800034e:	801e      	strh	r6, [r3, #0]
 8000350:	f8a3 a000 	strh.w	sl, [r3]
 8000354:	f04f 0aa8 	mov.w	sl, #168	; 0xa8
 8000358:	f8a3 a000 	strh.w	sl, [r3]
 800035c:	f04f 0a46 	mov.w	sl, #70	; 0x46
 8000360:	f8a3 a000 	strh.w	sl, [r3]
 8000364:	f04f 0a0c 	mov.w	sl, #12
 8000368:	f8a3 a000 	strh.w	sl, [r3]
 800036c:	f04f 0a17 	mov.w	sl, #23
 8000370:	f8a3 a000 	strh.w	sl, [r3]
 8000374:	801e      	strh	r6, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000376:	f04f 0ae1 	mov.w	sl, #225	; 0xe1
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 800037a:	2607      	movs	r6, #7
 800037c:	8018      	strh	r0, [r3, #0]
 800037e:	801e      	strh	r6, [r3, #0]
 8000380:	8019      	strh	r1, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000382:	f8a2 a000 	strh.w	sl, [r2]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000386:	f04f 0a19 	mov.w	sl, #25
 800038a:	8019      	strh	r1, [r3, #0]
 800038c:	f8a3 a000 	strh.w	sl, [r3]
 8000390:	f8a3 9000 	strh.w	r9, [r3]
 8000394:	f04f 0904 	mov.w	r9, #4
 8000398:	f8a3 9000 	strh.w	r9, [r3]
 800039c:	f8a3 8000 	strh.w	r8, [r3]
 80003a0:	801e      	strh	r6, [r3, #0]
 80003a2:	f04f 0847 	mov.w	r8, #71	; 0x47
 80003a6:	262a      	movs	r6, #42	; 0x2a
 80003a8:	801e      	strh	r6, [r3, #0]
 80003aa:	f8a3 8000 	strh.w	r8, [r3]
 80003ae:	f8a3 e000 	strh.w	lr, [r3]
 80003b2:	f8a3 c000 	strh.w	ip, [r3]
 80003b6:	f04f 0c06 	mov.w	ip, #6
 80003ba:	f8a3 c000 	strh.w	ip, [r3]
 80003be:	f8a3 c000 	strh.w	ip, [r3]
 80003c2:	801f      	strh	r7, [r3, #0]
 80003c4:	2738      	movs	r7, #56	; 0x38
 80003c6:	801f      	strh	r7, [r3, #0]
 80003c8:	8018      	strh	r0, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 80003ca:	2036      	movs	r0, #54	; 0x36
 80003cc:	8010      	strh	r0, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 80003ce:	2068      	movs	r0, #104	; 0x68
 80003d0:	8018      	strh	r0, [r3, #0]
 80003d2:	20ef      	movs	r0, #239	; 0xef
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 80003d4:	8016      	strh	r6, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 80003d6:	8019      	strh	r1, [r3, #0]
 80003d8:	8019      	strh	r1, [r3, #0]
 80003da:	8019      	strh	r1, [r3, #0]
 80003dc:	8018      	strh	r0, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 80003de:	202b      	movs	r0, #43	; 0x2b
 80003e0:	8010      	strh	r0, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 80003e2:	8019      	strh	r1, [r3, #0]
 80003e4:	8019      	strh	r1, [r3, #0]
 80003e6:	213f      	movs	r1, #63	; 0x3f
 80003e8:	801d      	strh	r5, [r3, #0]
 80003ea:	8019      	strh	r1, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 80003ec:	213a      	movs	r1, #58	; 0x3a
 80003ee:	8011      	strh	r1, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 80003f0:	2155      	movs	r1, #85	; 0x55
	LCD_Write_Cmd ( 0x3a ); 
	LCD_Write_Data ( 0x55 );
	
	/* Sleep Out (11h)  */
	LCD_Write_Cmd ( 0x11 );	
	Delay ( 0xAFFf<<2 );
 80003f2:	4805      	ldr	r0, [pc, #20]	; (8000408 <LCD_REG_Config+0x18c>)
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 80003f4:	8019      	strh	r1, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 80003f6:	8014      	strh	r4, [r2, #0]
	Delay ( 0xAFFf<<2 );
 80003f8:	f7ff ff1c 	bl	8000234 <Delay>
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 80003fc:	2329      	movs	r3, #41	; 0x29
 80003fe:	8013      	strh	r3, [r2, #0]
	
	/* Display ON (29h) */
	LCD_Write_Cmd ( 0x29 ); 
	
	
}
 8000400:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000404:	60020000 	.word	0x60020000
 8000408:	0002bffc 	.word	0x0002bffc

0800040c <LCD_OpenWindow>:



void LCD_OpenWindow ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight )
{	
 800040c:	b570      	push	{r4, r5, r6, lr}
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 800040e:	f04f 46c0 	mov.w	r6, #1610612736	; 0x60000000
 8000412:	242a      	movs	r4, #42	; 0x2a
 8000414:	8034      	strh	r4, [r6, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000416:	4c0f      	ldr	r4, [pc, #60]	; (8000454 <LCD_OpenWindow+0x48>)
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 				
	LCD_Write_Data ( usCOLUMN >> 8  );	 
 8000418:	0a05      	lsrs	r5, r0, #8
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 800041a:	8025      	strh	r5, [r4, #0]
	LCD_Write_Data ( usCOLUMN & 0xff  );	 
 800041c:	b2c5      	uxtb	r5, r0
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 800041e:	8025      	strh	r5, [r4, #0]
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );
 8000420:	1885      	adds	r5, r0, r2
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 8000422:	3a01      	subs	r2, #1
 8000424:	4410      	add	r0, r2
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000426:	222b      	movs	r2, #43	; 0x2b
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );
 8000428:	3d01      	subs	r5, #1
 800042a:	f3c5 250f 	ubfx	r5, r5, #8, #16
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 800042e:	b2c0      	uxtb	r0, r0
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000430:	8025      	strh	r5, [r4, #0]
 8000432:	8020      	strh	r0, [r4, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000434:	8032      	strh	r2, [r6, #0]

	LCD_Write_Cmd ( CMD_Set_PAGE ); 			     
	LCD_Write_Data ( usPAGE >> 8  );
 8000436:	0a0a      	lsrs	r2, r1, #8
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000438:	8022      	strh	r2, [r4, #0]
	LCD_Write_Data ( usPAGE & 0xff  );
 800043a:	b2ca      	uxtb	r2, r1
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 800043c:	8022      	strh	r2, [r4, #0]
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 800043e:	18ca      	adds	r2, r1, r3
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 8000440:	3b01      	subs	r3, #1
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 8000442:	3a01      	subs	r2, #1
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 8000444:	4419      	add	r1, r3
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 8000446:	f3c2 220f 	ubfx	r2, r2, #8, #16
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 800044a:	b2c9      	uxtb	r1, r1
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 800044c:	8022      	strh	r2, [r4, #0]
 800044e:	8021      	strh	r1, [r4, #0]
	
}
 8000450:	bd70      	pop	{r4, r5, r6, pc}
 8000452:	bf00      	nop
 8000454:	60020000 	.word	0x60020000

08000458 <LCD_FillColor>:
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000458:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 800045c:	222c      	movs	r2, #44	; 0x2c
 800045e:	801a      	strh	r2, [r3, #0]
	uint32_t i = 0;
	
	/* memory write */
	LCD_Write_Cmd ( CMD_SetPixel );	
		
	for ( i = 0; i < usPoint; i ++ )
 8000460:	2300      	movs	r3, #0
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000462:	4a03      	ldr	r2, [pc, #12]	; (8000470 <LCD_FillColor+0x18>)
	for ( i = 0; i < usPoint; i ++ )
 8000464:	4283      	cmp	r3, r0
 8000466:	d100      	bne.n	800046a <LCD_FillColor+0x12>
		LCD_Write_Data ( usColor );
		
}
 8000468:	4770      	bx	lr
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 800046a:	8011      	strh	r1, [r2, #0]
	for ( i = 0; i < usPoint; i ++ )
 800046c:	3301      	adds	r3, #1
 800046e:	e7f9      	b.n	8000464 <LCD_FillColor+0xc>
 8000470:	60020000 	.word	0x60020000

08000474 <LCD_Clear>:




void LCD_Clear ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor )
{
 8000474:	b570      	push	{r4, r5, r6, lr}
 8000476:	4614      	mov	r4, r2
 8000478:	461d      	mov	r5, r3
 800047a:	f8bd 6010 	ldrh.w	r6, [sp, #16]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 800047e:	f7ff ffc5 	bl	800040c <LCD_OpenWindow>
	LCD_FillColor ( usWidth * usHeight, usColor );		
 8000482:	4631      	mov	r1, r6
 8000484:	fb05 f004 	mul.w	r0, r5, r4
	
}
 8000488:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	LCD_FillColor ( usWidth * usHeight, usColor );		
 800048c:	f7ff bfe4 	b.w	8000458 <LCD_FillColor>

08000490 <LCD_INIT>:
{
 8000490:	b507      	push	{r0, r1, r2, lr}
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_RESET);	
 8000492:	2200      	movs	r2, #0
 8000494:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000498:	4808      	ldr	r0, [pc, #32]	; (80004bc <LCD_INIT+0x2c>)
 800049a:	f002 fa25 	bl	80028e8 <HAL_GPIO_WritePin>
	LCD_Rst();
 800049e:	f7ff fed3 	bl	8000248 <LCD_Rst>
	LCD_REG_Config();
 80004a2:	f7ff feeb 	bl	800027c <LCD_REG_Config>
	LCD_Clear (0, 0, 320, 240, BACKGROUND);
 80004a6:	2100      	movs	r1, #0
 80004a8:	23f0      	movs	r3, #240	; 0xf0
 80004aa:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80004ae:	4608      	mov	r0, r1
 80004b0:	9100      	str	r1, [sp, #0]
 80004b2:	f7ff ffdf 	bl	8000474 <LCD_Clear>
}
 80004b6:	b003      	add	sp, #12
 80004b8:	f85d fb04 	ldr.w	pc, [sp], #4
 80004bc:	40011400 	.word	0x40011400

080004c0 <LCD_DrawChar>:
	
}   


void LCD_DrawChar ( uint16_t usC, uint16_t usP, const char cChar )
{
 80004c0:	b570      	push	{r4, r5, r6, lr}
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	
	ucRelativePositon = cChar;
	
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 80004c2:	230a      	movs	r3, #10
{
 80004c4:	4614      	mov	r4, r2
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 80004c6:	2208      	movs	r2, #8
 80004c8:	f7ff ffa0 	bl	800040c <LCD_OpenWindow>
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 80004cc:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 80004d0:	222c      	movs	r2, #44	; 0x2c
 80004d2:	801a      	strh	r2, [r3, #0]
	
	LCD_Write_Cmd ( CMD_SetPixel );	
	
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 80004d4:	230a      	movs	r3, #10
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 80004d6:	f44f 65fd 	mov.w	r5, #2024	; 0x7e8
 80004da:	490c      	ldr	r1, [pc, #48]	; (800050c <LCD_DrawChar+0x4c>)
 80004dc:	fb03 1104 	mla	r1, r3, r4, r1
 80004e0:	4c0b      	ldr	r4, [pc, #44]	; (8000510 <LCD_DrawChar+0x50>)
	{
		ucTemp = ucAscii_1006 [ ucRelativePositon ] [ ucPage ];
 80004e2:	2208      	movs	r2, #8
 80004e4:	f811 0b01 	ldrb.w	r0, [r1], #1
		
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
		{
			if ( ucTemp & 0x01 )
 80004e8:	f010 0601 	ands.w	r6, r0, #1
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 80004ec:	f102 32ff 	add.w	r2, r2, #4294967295
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 80004f0:	bf14      	ite	ne
 80004f2:	8025      	strhne	r5, [r4, #0]
 80004f4:	8026      	strheq	r6, [r4, #0]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 80004f6:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
				LCD_Write_Data ( 0x07e8 ); // Matrix Green
			
			else
				LCD_Write_Data (  0x0000 );								
			
			ucTemp >>= 1;		
 80004fa:	ea4f 0050 	mov.w	r0, r0, lsr #1
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 80004fe:	d1f3      	bne.n	80004e8 <LCD_DrawChar+0x28>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8000500:	3b01      	subs	r3, #1
 8000502:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8000506:	d1ec      	bne.n	80004e2 <LCD_DrawChar+0x22>
			
		}
		
	}
	
}
 8000508:	bd70      	pop	{r4, r5, r6, pc}
 800050a:	bf00      	nop
 800050c:	080046b8 	.word	0x080046b8
 8000510:	60020000 	.word	0x60020000

08000514 <LCD_CursorForward>:
	LCD_CURSOR_X %= 40;
 8000514:	2228      	movs	r2, #40	; 0x28
	++LCD_CURSOR_X;
 8000516:	4b09      	ldr	r3, [pc, #36]	; (800053c <LCD_CursorForward+0x28>)
 8000518:	7818      	ldrb	r0, [r3, #0]
 800051a:	3001      	adds	r0, #1
	LCD_CURSOR_X %= 40;
 800051c:	b2c0      	uxtb	r0, r0
 800051e:	fbb0 f1f2 	udiv	r1, r0, r2
 8000522:	fb02 0011 	mls	r0, r2, r1, r0
 8000526:	b2c0      	uxtb	r0, r0
 8000528:	7018      	strb	r0, [r3, #0]
	LCD_DrawChar(LCD_CURSOR_X * WIDTH_EN_CHAR, LCD_CURSOR_Y * HEIGHT_EN_CHAR, CURSOR_CHAR);
 800052a:	4b05      	ldr	r3, [pc, #20]	; (8000540 <LCD_CursorForward+0x2c>)
 800052c:	22db      	movs	r2, #219	; 0xdb
 800052e:	7819      	ldrb	r1, [r3, #0]
 8000530:	00c0      	lsls	r0, r0, #3
 8000532:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8000536:	0049      	lsls	r1, r1, #1
 8000538:	f7ff bfc2 	b.w	80004c0 <LCD_DrawChar>
 800053c:	2000002c 	.word	0x2000002c
 8000540:	2000002d 	.word	0x2000002d

08000544 <LCD_CursorNewline>:
void LCD_CursorNewline ( void ) {
 8000544:	b513      	push	{r0, r1, r4, lr}
	if (++LCD_CURSOR_Y > 24) {
 8000546:	4c0f      	ldr	r4, [pc, #60]	; (8000584 <LCD_CursorNewline+0x40>)
 8000548:	7823      	ldrb	r3, [r4, #0]
 800054a:	3301      	adds	r3, #1
 800054c:	b2db      	uxtb	r3, r3
 800054e:	2b18      	cmp	r3, #24
 8000550:	d80d      	bhi.n	800056e <LCD_CursorNewline+0x2a>
 8000552:	7023      	strb	r3, [r4, #0]
	LCD_CURSOR_X = 0;
 8000554:	2000      	movs	r0, #0
	LCD_DrawChar(LCD_CURSOR_X * WIDTH_EN_CHAR, LCD_CURSOR_Y * HEIGHT_EN_CHAR, CURSOR_CHAR);
 8000556:	22db      	movs	r2, #219	; 0xdb
 8000558:	7821      	ldrb	r1, [r4, #0]
	LCD_CURSOR_X = 0;
 800055a:	4b0b      	ldr	r3, [pc, #44]	; (8000588 <LCD_CursorNewline+0x44>)
	LCD_DrawChar(LCD_CURSOR_X * WIDTH_EN_CHAR, LCD_CURSOR_Y * HEIGHT_EN_CHAR, CURSOR_CHAR);
 800055c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8000560:	0049      	lsls	r1, r1, #1
	LCD_CURSOR_X = 0;
 8000562:	7018      	strb	r0, [r3, #0]
}
 8000564:	b002      	add	sp, #8
 8000566:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	LCD_DrawChar(LCD_CURSOR_X * WIDTH_EN_CHAR, LCD_CURSOR_Y * HEIGHT_EN_CHAR, CURSOR_CHAR);
 800056a:	f7ff bfa9 	b.w	80004c0 <LCD_DrawChar>
		LCD_CURSOR_Y = 0;
 800056e:	2100      	movs	r1, #0
		LCD_Clear(0, 0, 320, 240, BACKGROUND);
 8000570:	23f0      	movs	r3, #240	; 0xf0
 8000572:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000576:	4608      	mov	r0, r1
 8000578:	9100      	str	r1, [sp, #0]
		LCD_CURSOR_Y = 0;
 800057a:	7021      	strb	r1, [r4, #0]
		LCD_Clear(0, 0, 320, 240, BACKGROUND);
 800057c:	f7ff ff7a 	bl	8000474 <LCD_Clear>
 8000580:	e7e8      	b.n	8000554 <LCD_CursorNewline+0x10>
 8000582:	bf00      	nop
 8000584:	2000002d 	.word	0x2000002d
 8000588:	2000002c 	.word	0x2000002c

0800058c <LCD_DrawString>:
}



void LCD_DrawString ( uint16_t usC, uint16_t usP, const char * pStr )
{
 800058c:	b570      	push	{r4, r5, r6, lr}
 800058e:	4604      	mov	r4, r0
 8000590:	460d      	mov	r5, r1
 8000592:	1e56      	subs	r6, r2, #1
	while ( * pStr != '\0' )
 8000594:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8000598:	b902      	cbnz	r2, 800059c <LCD_DrawString+0x10>
		
		usC += WIDTH_EN_CHAR;
		
	}
	
}
 800059a:	bd70      	pop	{r4, r5, r6, pc}
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 800059c:	f5b4 7f9c 	cmp.w	r4, #312	; 0x138
			usP += HEIGHT_EN_CHAR;
 80005a0:	bf82      	ittt	hi
 80005a2:	350a      	addhi	r5, #10
 80005a4:	b2ad      	uxthhi	r5, r5
			usC = LCD_DispWindow_Start_COLUMN;
 80005a6:	2400      	movhi	r4, #0
		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 80005a8:	2de6      	cmp	r5, #230	; 0xe6
			usP = LCD_DispWindow_Start_PAGE;
 80005aa:	bf84      	itt	hi
 80005ac:	2500      	movhi	r5, #0
			usC = LCD_DispWindow_Start_COLUMN;
 80005ae:	462c      	movhi	r4, r5
		LCD_DrawChar ( usC, usP, * pStr );
 80005b0:	4629      	mov	r1, r5
 80005b2:	4620      	mov	r0, r4
		usC += WIDTH_EN_CHAR;
 80005b4:	3408      	adds	r4, #8
		LCD_DrawChar ( usC, usP, * pStr );
 80005b6:	f7ff ff83 	bl	80004c0 <LCD_DrawChar>
		usC += WIDTH_EN_CHAR;
 80005ba:	b2a4      	uxth	r4, r4
 80005bc:	e7ea      	b.n	8000594 <LCD_DrawString+0x8>
	...

080005c0 <writelineTerminal>:
}

/**
 * Write string with line ending to UART & LCD (STM32)
 */
void writelineTerminal(char *buffer) {
 80005c0:	b538      	push	{r3, r4, r5, lr}
 80005c2:	4604      	mov	r4, r0
  // UART
  HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY); HAL_UART_Transmit(&huart1, (uint8_t *)UART_LINE_ENDING, strlen(UART_LINE_ENDING), HAL_MAX_DELAY);
 80005c4:	f7ff fe2e 	bl	8000224 <strlen>
 80005c8:	4d0e      	ldr	r5, [pc, #56]	; (8000604 <writelineTerminal+0x44>)
 80005ca:	4621      	mov	r1, r4
 80005cc:	b282      	uxth	r2, r0
 80005ce:	f04f 33ff 	mov.w	r3, #4294967295
 80005d2:	4628      	mov	r0, r5
 80005d4:	f003 fad1 	bl	8003b7a <HAL_UART_Transmit>
 80005d8:	f04f 33ff 	mov.w	r3, #4294967295
 80005dc:	2202      	movs	r2, #2
 80005de:	4628      	mov	r0, r5
 80005e0:	4909      	ldr	r1, [pc, #36]	; (8000608 <writelineTerminal+0x48>)
 80005e2:	f003 faca 	bl	8003b7a <HAL_UART_Transmit>

  // LCD
  LCD_DrawString(LCD_CURSOR_X * FONT_WIDTH, LCD_CURSOR_Y * FONT_HEIGHT, buffer);
 80005e6:	4b09      	ldr	r3, [pc, #36]	; (800060c <writelineTerminal+0x4c>)
 80005e8:	4622      	mov	r2, r4
 80005ea:	7819      	ldrb	r1, [r3, #0]
 80005ec:	4b08      	ldr	r3, [pc, #32]	; (8000610 <writelineTerminal+0x50>)
 80005ee:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80005f2:	7818      	ldrb	r0, [r3, #0]
 80005f4:	0049      	lsls	r1, r1, #1
 80005f6:	00c0      	lsls	r0, r0, #3
 80005f8:	f7ff ffc8 	bl	800058c <LCD_DrawString>
  LCD_CursorNewline();
}
 80005fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  LCD_CursorNewline();
 8000600:	f7ff bfa0 	b.w	8000544 <LCD_CursorNewline>
 8000604:	200080fc 	.word	0x200080fc
 8000608:	080050b8 	.word	0x080050b8
 800060c:	2000002d 	.word	0x2000002d
 8000610:	2000002c 	.word	0x2000002c

08000614 <writeTerminal>:

/**
 * Write string to UART & LCD without line ending (STM32)
 */
void writeTerminal(char *buffer) {
 8000614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000618:	4604      	mov	r4, r0
  // UART
  HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 800061a:	f7ff fe03 	bl	8000224 <strlen>

  // LCD
  uint8_t tempX = LCD_CURSOR_X;
  uint8_t tempY = LCD_CURSOR_Y;
  for (uint8_t i = 0; i < strlen(buffer); i++) {
 800061e:	2600      	movs	r6, #0
  HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000620:	f04f 33ff 	mov.w	r3, #4294967295
 8000624:	b282      	uxth	r2, r0
 8000626:	4621      	mov	r1, r4
 8000628:	480e      	ldr	r0, [pc, #56]	; (8000664 <writeTerminal+0x50>)
 800062a:	f003 faa6 	bl	8003b7a <HAL_UART_Transmit>
  uint8_t tempX = LCD_CURSOR_X;
 800062e:	4b0e      	ldr	r3, [pc, #56]	; (8000668 <writeTerminal+0x54>)
 8000630:	f893 8000 	ldrb.w	r8, [r3]
  uint8_t tempY = LCD_CURSOR_Y;
 8000634:	4b0d      	ldr	r3, [pc, #52]	; (800066c <writeTerminal+0x58>)
 8000636:	781d      	ldrb	r5, [r3, #0]
  for (uint8_t i = 0; i < strlen(buffer); i++) {
 8000638:	4620      	mov	r0, r4
 800063a:	f7ff fdf3 	bl	8000224 <strlen>
 800063e:	b2f7      	uxtb	r7, r6
 8000640:	42b8      	cmp	r0, r7
 8000642:	f106 0601 	add.w	r6, r6, #1
 8000646:	d809      	bhi.n	800065c <writeTerminal+0x48>
    LCD_CursorForward();
  }
  LCD_DrawString(tempX * FONT_WIDTH, tempY * FONT_HEIGHT, buffer);
 8000648:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800064c:	4622      	mov	r2, r4
 800064e:	0069      	lsls	r1, r5, #1
 8000650:	ea4f 00c8 	mov.w	r0, r8, lsl #3
}
 8000654:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  LCD_DrawString(tempX * FONT_WIDTH, tempY * FONT_HEIGHT, buffer);
 8000658:	f7ff bf98 	b.w	800058c <LCD_DrawString>
    LCD_CursorForward();
 800065c:	f7ff ff5a 	bl	8000514 <LCD_CursorForward>
  for (uint8_t i = 0; i < strlen(buffer); i++) {
 8000660:	e7ea      	b.n	8000638 <writeTerminal+0x24>
 8000662:	bf00      	nop
 8000664:	200080fc 	.word	0x200080fc
 8000668:	2000002c 	.word	0x2000002c
 800066c:	2000002d 	.word	0x2000002d

08000670 <writeTerminalChar>:

/**
 * Write char to UART & LCD without line ending (STM32)
 */
void writeTerminalChar(char *buffer) {
 8000670:	b573      	push	{r0, r1, r4, r5, r6, lr}
  // UART
  HAL_UART_Transmit(&huart1, (uint8_t *)buffer, 1, HAL_MAX_DELAY);
 8000672:	2201      	movs	r2, #1
 8000674:	4601      	mov	r1, r0
void writeTerminalChar(char *buffer) {
 8000676:	4605      	mov	r5, r0
  HAL_UART_Transmit(&huart1, (uint8_t *)buffer, 1, HAL_MAX_DELAY);
 8000678:	f04f 33ff 	mov.w	r3, #4294967295
 800067c:	480b      	ldr	r0, [pc, #44]	; (80006ac <writeTerminalChar+0x3c>)
 800067e:	f003 fa7c 	bl	8003b7a <HAL_UART_Transmit>

  // LCD
  uint8_t tempX = LCD_CURSOR_X;
 8000682:	4b0b      	ldr	r3, [pc, #44]	; (80006b0 <writeTerminalChar+0x40>)
 8000684:	781e      	ldrb	r6, [r3, #0]
  uint8_t tempY = LCD_CURSOR_Y;
 8000686:	4b0b      	ldr	r3, [pc, #44]	; (80006b4 <writeTerminalChar+0x44>)
 8000688:	781c      	ldrb	r4, [r3, #0]
  char tempChar[2] = {0x00};
 800068a:	2300      	movs	r3, #0
 800068c:	f8ad 3004 	strh.w	r3, [sp, #4]
  tempChar[0] = buffer[0];
 8000690:	782b      	ldrb	r3, [r5, #0]
  tempChar[1] = '\0';
  LCD_CursorForward();
  LCD_DrawString(tempX * FONT_WIDTH, tempY * FONT_HEIGHT, tempChar);
 8000692:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  tempChar[0] = buffer[0];
 8000696:	f88d 3004 	strb.w	r3, [sp, #4]
  LCD_CursorForward();
 800069a:	f7ff ff3b 	bl	8000514 <LCD_CursorForward>
  LCD_DrawString(tempX * FONT_WIDTH, tempY * FONT_HEIGHT, tempChar);
 800069e:	aa01      	add	r2, sp, #4
 80006a0:	0061      	lsls	r1, r4, #1
 80006a2:	00f0      	lsls	r0, r6, #3
 80006a4:	f7ff ff72 	bl	800058c <LCD_DrawString>
}
 80006a8:	b002      	add	sp, #8
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	200080fc 	.word	0x200080fc
 80006b0:	2000002c 	.word	0x2000002c
 80006b4:	2000002d 	.word	0x2000002d

080006b8 <handleOutput>:
}

/**
 * Write character to UART & LCD (MOS 6502)
 */
void handleOutput(uint8_t value) {
 80006b8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  if (value == 13) {
 80006ba:	280d      	cmp	r0, #13
void handleOutput(uint8_t value) {
 80006bc:	f88d 000f 	strb.w	r0, [sp, #15]
  if (value == 13) {
 80006c0:	d128      	bne.n	8000714 <handleOutput+0x5c>
    // UART Newline
    HAL_UART_Transmit(&huart1, (uint8_t *)UART_LINE_ENDING, strlen(UART_LINE_ENDING), HAL_MAX_DELAY);
    // LCD Newline
    LCD_Clear(LCD_CURSOR_X * FONT_WIDTH, LCD_CURSOR_Y * FONT_HEIGHT, FONT_WIDTH, FONT_HEIGHT, BLACK);
 80006c2:	2400      	movs	r4, #0
 80006c4:	4d16      	ldr	r5, [pc, #88]	; (8000720 <handleOutput+0x68>)
    HAL_UART_Transmit(&huart1, (uint8_t *)UART_LINE_ENDING, strlen(UART_LINE_ENDING), HAL_MAX_DELAY);
 80006c6:	f04f 33ff 	mov.w	r3, #4294967295
 80006ca:	2202      	movs	r2, #2
 80006cc:	4915      	ldr	r1, [pc, #84]	; (8000724 <handleOutput+0x6c>)
 80006ce:	4816      	ldr	r0, [pc, #88]	; (8000728 <handleOutput+0x70>)
    LCD_Clear(LCD_CURSOR_X * FONT_WIDTH, LCD_CURSOR_Y * FONT_HEIGHT, FONT_WIDTH, FONT_HEIGHT, BLACK);
 80006d0:	4e16      	ldr	r6, [pc, #88]	; (800072c <handleOutput+0x74>)
    HAL_UART_Transmit(&huart1, (uint8_t *)UART_LINE_ENDING, strlen(UART_LINE_ENDING), HAL_MAX_DELAY);
 80006d2:	f003 fa52 	bl	8003b7a <HAL_UART_Transmit>
    LCD_Clear(LCD_CURSOR_X * FONT_WIDTH, LCD_CURSOR_Y * FONT_HEIGHT, FONT_WIDTH, FONT_HEIGHT, BLACK);
 80006d6:	7829      	ldrb	r1, [r5, #0]
 80006d8:	7830      	ldrb	r0, [r6, #0]
 80006da:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80006de:	230a      	movs	r3, #10
 80006e0:	2208      	movs	r2, #8
 80006e2:	9400      	str	r4, [sp, #0]
 80006e4:	0049      	lsls	r1, r1, #1
 80006e6:	00c0      	lsls	r0, r0, #3
 80006e8:	f7ff fec4 	bl	8000474 <LCD_Clear>
    if (++LCD_CURSOR_Y > 23) {
 80006ec:	782b      	ldrb	r3, [r5, #0]
 80006ee:	3301      	adds	r3, #1
 80006f0:	b2db      	uxtb	r3, r3
 80006f2:	2b17      	cmp	r3, #23
 80006f4:	d804      	bhi.n	8000700 <handleOutput+0x48>
 80006f6:	702b      	strb	r3, [r5, #0]
		  LCD_CURSOR_Y = 0;
		  // Clear the screen
		  LCD_Clear(0, 0, 320, 240, BACKGROUND);
	  }
	  LCD_CURSOR_X = 0;
 80006f8:	2300      	movs	r3, #0
 80006fa:	7033      	strb	r3, [r6, #0]
  }
  else {
    writeTerminalChar((char *)&value);
  }
}
 80006fc:	b004      	add	sp, #16
 80006fe:	bd70      	pop	{r4, r5, r6, pc}
		  LCD_Clear(0, 0, 320, 240, BACKGROUND);
 8000700:	23f0      	movs	r3, #240	; 0xf0
 8000702:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000706:	4621      	mov	r1, r4
 8000708:	4620      	mov	r0, r4
 800070a:	9400      	str	r4, [sp, #0]
		  LCD_CURSOR_Y = 0;
 800070c:	702c      	strb	r4, [r5, #0]
		  LCD_Clear(0, 0, 320, 240, BACKGROUND);
 800070e:	f7ff feb1 	bl	8000474 <LCD_Clear>
 8000712:	e7f1      	b.n	80006f8 <handleOutput+0x40>
    writeTerminalChar((char *)&value);
 8000714:	f10d 000f 	add.w	r0, sp, #15
 8000718:	f7ff ffaa 	bl	8000670 <writeTerminalChar>
}
 800071c:	e7ee      	b.n	80006fc <handleOutput+0x44>
 800071e:	bf00      	nop
 8000720:	2000002d 	.word	0x2000002d
 8000724:	080050b8 	.word	0x080050b8
 8000728:	200080fc 	.word	0x200080fc
 800072c:	2000002c 	.word	0x2000002c

08000730 <write6502>:
  if (address < RAM_SIZE) {
 8000730:	0403      	lsls	r3, r0, #16
 8000732:	d402      	bmi.n	800073a <write6502+0xa>
    RAM[address] = value;
 8000734:	4b06      	ldr	r3, [pc, #24]	; (8000750 <write6502+0x20>)
 8000736:	5419      	strb	r1, [r3, r0]
  if (address == PIA_DISPLAY_REG) {
 8000738:	4770      	bx	lr
 800073a:	f24d 0312 	movw	r3, #53266	; 0xd012
 800073e:	4298      	cmp	r0, r3
 8000740:	d105      	bne.n	800074e <write6502+0x1e>
    pia.display_register = value;
 8000742:	4b04      	ldr	r3, [pc, #16]	; (8000754 <write6502+0x24>)
    handleOutput(value);
 8000744:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    pia.display_register = value;
 8000748:	7099      	strb	r1, [r3, #2]
    handleOutput(value);
 800074a:	f7ff bfb5 	b.w	80006b8 <handleOutput>
}
 800074e:	4770      	bx	lr
 8000750:	2000002e 	.word	0x2000002e
 8000754:	20008145 	.word	0x20008145

08000758 <initApple1>:

/**
 * Initialize Apple I
 */
void initApple1(void) {
 8000758:	b538      	push	{r3, r4, r5, lr}
  // Wait for space key to be pressed in UART
  do {
    HAL_Delay(1000);
    writelineTerminal("Press <space> to boot Apple I");
 800075a:	4c18      	ldr	r4, [pc, #96]	; (80007bc <initApple1+0x64>)
    handleInput((char *)keyboardBuffer);
 800075c:	4d18      	ldr	r5, [pc, #96]	; (80007c0 <initApple1+0x68>)
    HAL_Delay(1000);
 800075e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000762:	f001 feb9 	bl	80024d8 <HAL_Delay>
    writelineTerminal("Press <space> to boot Apple I");
 8000766:	4620      	mov	r0, r4
 8000768:	f7ff ff2a 	bl	80005c0 <writelineTerminal>
    handleInput((char *)keyboardBuffer);
 800076c:	4814      	ldr	r0, [pc, #80]	; (80007c0 <initApple1+0x68>)
 800076e:	f000 f835 	bl	80007dc <handleInput>
  } while (keyboardBuffer[0] != SPACE_KEY);
 8000772:	782b      	ldrb	r3, [r5, #0]
 8000774:	2b20      	cmp	r3, #32
 8000776:	d1f2      	bne.n	800075e <initApple1+0x6>
  keyboardBuffer[0] = 0x00;
 8000778:	2400      	movs	r4, #0

  // Initialize CPU
  writeTerminal("Initializing CPU...");
 800077a:	4812      	ldr	r0, [pc, #72]	; (80007c4 <initApple1+0x6c>)
  keyboardBuffer[0] = 0x00;
 800077c:	702c      	strb	r4, [r5, #0]
  writeTerminal("Initializing CPU...");
 800077e:	f7ff ff49 	bl	8000614 <writeTerminal>
  reset6502(); writelineTerminal(" Complete");
 8000782:	f000 f9ff 	bl	8000b84 <reset6502>
 8000786:	4810      	ldr	r0, [pc, #64]	; (80007c8 <initApple1+0x70>)
 8000788:	f7ff ff1a 	bl	80005c0 <writelineTerminal>

  // Initialize RAM
  writeTerminal("Initializing RAM...");
 800078c:	480f      	ldr	r0, [pc, #60]	; (80007cc <initApple1+0x74>)
 800078e:	f7ff ff41 	bl	8000614 <writeTerminal>
  for (uint16_t i = 0; i < RAM_SIZE; i++) {
    RAM[i] = 0x00;
 8000792:	4621      	mov	r1, r4
 8000794:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000798:	480d      	ldr	r0, [pc, #52]	; (80007d0 <initApple1+0x78>)
 800079a:	f003 ff79 	bl	8004690 <memset>
  }
  writelineTerminal(" Complete");
 800079e:	480a      	ldr	r0, [pc, #40]	; (80007c8 <initApple1+0x70>)
 80007a0:	f7ff ff0e 	bl	80005c0 <writelineTerminal>

  // Initialize PIA
  writeTerminal("Initializing PIA...");
 80007a4:	480b      	ldr	r0, [pc, #44]	; (80007d4 <initApple1+0x7c>)
 80007a6:	f7ff ff35 	bl	8000614 <writeTerminal>
  pia.keyboard_register = 0x00;
 80007aa:	4b0b      	ldr	r3, [pc, #44]	; (80007d8 <initApple1+0x80>)
  pia.keyboard_control = 0x00;
  pia.display_register = 0x00;
  writelineTerminal(" Complete");
 80007ac:	4806      	ldr	r0, [pc, #24]	; (80007c8 <initApple1+0x70>)
  pia.keyboard_register = 0x00;
 80007ae:	701c      	strb	r4, [r3, #0]
  pia.keyboard_control = 0x00;
 80007b0:	705c      	strb	r4, [r3, #1]
  pia.display_register = 0x00;
 80007b2:	709c      	strb	r4, [r3, #2]
}
 80007b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  writelineTerminal(" Complete");
 80007b8:	f7ff bf02 	b.w	80005c0 <writelineTerminal>
 80007bc:	080050bb 	.word	0x080050bb
 80007c0:	20008144 	.word	0x20008144
 80007c4:	080050d9 	.word	0x080050d9
 80007c8:	080050ed 	.word	0x080050ed
 80007cc:	080050f7 	.word	0x080050f7
 80007d0:	2000002e 	.word	0x2000002e
 80007d4:	0800510b 	.word	0x0800510b
 80007d8:	20008145 	.word	0x20008145

080007dc <handleInput>:
void handleInput(char *buffer) {
 80007dc:	b510      	push	{r4, lr}
 80007de:	4604      	mov	r4, r0
  HAL_UART_Receive(&huart1, (uint8_t *)buffer, 1, KEYBOARD_READ_INTERVAL); // Read from UART
 80007e0:	230a      	movs	r3, #10
 80007e2:	2201      	movs	r2, #1
 80007e4:	4601      	mov	r1, r0
 80007e6:	4814      	ldr	r0, [pc, #80]	; (8000838 <handleInput+0x5c>)
 80007e8:	f003 fa12 	bl	8003c10 <HAL_UART_Receive>
  buffer[0] &= 0x7F; // Mask out MSB
 80007ec:	7823      	ldrb	r3, [r4, #0]
 80007ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  if (buffer[0] >= 'a' && buffer[0] <= 'z') {
 80007f2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80007f6:	2a19      	cmp	r2, #25
  buffer[0] &= 0x7F; // Mask out MSB
 80007f8:	7023      	strb	r3, [r4, #0]
  if (buffer[0] >= 'a' && buffer[0] <= 'z') {
 80007fa:	d802      	bhi.n	8000802 <handleInput+0x26>
    buffer[0] -= 0x20;
 80007fc:	3b20      	subs	r3, #32
    buffer[0] = 0x5F;
 80007fe:	7023      	strb	r3, [r4, #0]
}
 8000800:	bd10      	pop	{r4, pc}
  else if (buffer[0] == '\n') {
 8000802:	2b0a      	cmp	r3, #10
 8000804:	d101      	bne.n	800080a <handleInput+0x2e>
    buffer[0] = '\r';
 8000806:	230d      	movs	r3, #13
 8000808:	e7f9      	b.n	80007fe <handleInput+0x22>
  else if (buffer[0] == '\b') {
 800080a:	2b08      	cmp	r3, #8
 800080c:	d101      	bne.n	8000812 <handleInput+0x36>
    buffer[0] = 0x5F;
 800080e:	235f      	movs	r3, #95	; 0x5f
 8000810:	e7f5      	b.n	80007fe <handleInput+0x22>
  else if (buffer[0] == 0x7F) {
 8000812:	2b7f      	cmp	r3, #127	; 0x7f
 8000814:	d0fb      	beq.n	800080e <handleInput+0x32>
  else if (buffer[0] == 0x03) {
 8000816:	2b03      	cmp	r3, #3
 8000818:	d1f2      	bne.n	8000800 <handleInput+0x24>
    writelineTerminal("[Ctrl + C] Resetting in 5 seconds...");
 800081a:	4808      	ldr	r0, [pc, #32]	; (800083c <handleInput+0x60>)
 800081c:	f7ff fed0 	bl	80005c0 <writelineTerminal>
    HAL_Delay(5000);
 8000820:	f241 3088 	movw	r0, #5000	; 0x1388
 8000824:	f001 fe58 	bl	80024d8 <HAL_Delay>
    keyboardBuffer[0] = SPACE_KEY;
 8000828:	2220      	movs	r2, #32
 800082a:	4b05      	ldr	r3, [pc, #20]	; (8000840 <handleInput+0x64>)
 800082c:	701a      	strb	r2, [r3, #0]
}
 800082e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    initApple1();
 8000832:	f7ff bf91 	b.w	8000758 <initApple1>
 8000836:	bf00      	nop
 8000838:	200080fc 	.word	0x200080fc
 800083c:	0800511f 	.word	0x0800511f
 8000840:	20008144 	.word	0x20008144

08000844 <read6502>:
  if (address < RAM_SIZE) return RAM[address];
 8000844:	0403      	lsls	r3, r0, #16
uint8_t read6502(uint16_t address) { // Memory mapping for Apple I
 8000846:	b510      	push	{r4, lr}
  if (address < RAM_SIZE) return RAM[address];
 8000848:	d402      	bmi.n	8000850 <read6502+0xc>
 800084a:	4b16      	ldr	r3, [pc, #88]	; (80008a4 <read6502+0x60>)
    if (monitor_addr < 0x100) return monitor[monitor_addr];
 800084c:	5c18      	ldrb	r0, [r3, r0]
 800084e:	e005      	b.n	800085c <read6502+0x18>
  if (address == PIA_KEYBOARD_REG) {
 8000850:	f24d 0310 	movw	r3, #53264	; 0xd010
 8000854:	4298      	cmp	r0, r3
 8000856:	d102      	bne.n	800085e <read6502+0x1a>
    return pia.keyboard_register;
 8000858:	4b13      	ldr	r3, [pc, #76]	; (80008a8 <read6502+0x64>)
 800085a:	7818      	ldrb	r0, [r3, #0]
}
 800085c:	bd10      	pop	{r4, pc}
  if (address == PIA_KEYBOARD_CTRL) {
 800085e:	f24d 0311 	movw	r3, #53265	; 0xd011
 8000862:	4298      	cmp	r0, r3
 8000864:	d10f      	bne.n	8000886 <read6502+0x42>
    handleInput((char *)keyboardBuffer);
 8000866:	4c11      	ldr	r4, [pc, #68]	; (80008ac <read6502+0x68>)
 8000868:	4620      	mov	r0, r4
 800086a:	f7ff ffb7 	bl	80007dc <handleInput>
    pia.keyboard_register = keyboardBuffer[0] | 0x80;
 800086e:	7823      	ldrb	r3, [r4, #0]
 8000870:	4a0d      	ldr	r2, [pc, #52]	; (80008a8 <read6502+0x64>)
 8000872:	f063 017f 	orn	r1, r3, #127	; 0x7f
 8000876:	7011      	strb	r1, [r2, #0]
    if (keyboardBuffer[0] != 0x00) {
 8000878:	b90b      	cbnz	r3, 800087e <read6502+0x3a>
      return 0x00;
 800087a:	2000      	movs	r0, #0
 800087c:	e7ee      	b.n	800085c <read6502+0x18>
      keyboardBuffer[0] = 0x00;
 800087e:	2300      	movs	r3, #0
      return 0x80;
 8000880:	2080      	movs	r0, #128	; 0x80
      keyboardBuffer[0] = 0x00;
 8000882:	7023      	strb	r3, [r4, #0]
      return 0x80;
 8000884:	e7ea      	b.n	800085c <read6502+0x18>
  if (address >= BASIC_START && address <= 0xEFFF) {
 8000886:	f500 5300 	add.w	r3, r0, #8192	; 0x2000
 800088a:	b29b      	uxth	r3, r3
 800088c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000890:	d202      	bcs.n	8000898 <read6502+0x54>
      return BASIC[BASIC_addr];
 8000892:	4a07      	ldr	r2, [pc, #28]	; (80008b0 <read6502+0x6c>)
 8000894:	5cd0      	ldrb	r0, [r2, r3]
 8000896:	e7e1      	b.n	800085c <read6502+0x18>
  if (address >= 0xF000) {
 8000898:	f5b0 4f70 	cmp.w	r0, #61440	; 0xf000
 800089c:	d3ed      	bcc.n	800087a <read6502+0x36>
    if (monitor_addr < 0x100) return monitor[monitor_addr];
 800089e:	4b05      	ldr	r3, [pc, #20]	; (80008b4 <read6502+0x70>)
 80008a0:	b2c0      	uxtb	r0, r0
 80008a2:	e7d3      	b.n	800084c <read6502+0x8>
 80008a4:	2000002e 	.word	0x2000002e
 80008a8:	20008145 	.word	0x20008145
 80008ac:	20008144 	.word	0x20008144
 80008b0:	08005144 	.word	0x08005144
 80008b4:	08006144 	.word	0x08006144

080008b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008b8:	b510      	push	{r4, lr}
 80008ba:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008bc:	2214      	movs	r2, #20
 80008be:	2100      	movs	r1, #0
 80008c0:	a808      	add	r0, sp, #32
 80008c2:	f003 fee5 	bl	8004690 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008c6:	2214      	movs	r2, #20
 80008c8:	2100      	movs	r1, #0
 80008ca:	a801      	add	r0, sp, #4
 80008cc:	f003 fee0 	bl	8004690 <memset>
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008d0:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008d6:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008d8:	e9cd 430d 	strd	r4, r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008dc:	e9cd 2306 	strd	r2, r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80008e0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008e4:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008e6:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80008e8:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ea:	f002 f803 	bl	80028f4 <HAL_RCC_OscConfig>
 80008ee:	b108      	cbz	r0, 80008f4 <SystemClock_Config+0x3c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f0:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008f2:	e7fe      	b.n	80008f2 <SystemClock_Config+0x3a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008f4:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008f6:	e9cd 3401 	strd	r3, r4, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008fe:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000900:	e9cd 3004 	strd	r3, r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000904:	4621      	mov	r1, r4
 8000906:	a801      	add	r0, sp, #4
 8000908:	f002 f9b6 	bl	8002c78 <HAL_RCC_ClockConfig>
 800090c:	b108      	cbz	r0, 8000912 <SystemClock_Config+0x5a>
 800090e:	b672      	cpsid	i
  while (1)
 8000910:	e7fe      	b.n	8000910 <SystemClock_Config+0x58>
}
 8000912:	b010      	add	sp, #64	; 0x40
 8000914:	bd10      	pop	{r4, pc}
	...

08000918 <main>:
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000918:	2610      	movs	r6, #16
{
 800091a:	b580      	push	{r7, lr}
 800091c:	b08c      	sub	sp, #48	; 0x30
  HAL_Init();
 800091e:	f001 fdb7 	bl	8002490 <HAL_Init>
  SystemClock_Config();
 8000922:	f7ff ffc9 	bl	80008b8 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000926:	4632      	mov	r2, r6
 8000928:	2100      	movs	r1, #0
 800092a:	a805      	add	r0, sp, #20
 800092c:	f003 feb0 	bl	8004690 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000930:	4b54      	ldr	r3, [pc, #336]	; (8000a84 <main+0x16c>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000932:	2400      	movs	r4, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000934:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000936:	f04f 0901 	mov.w	r9, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800093a:	4332      	orrs	r2, r6
 800093c:	619a      	str	r2, [r3, #24]
 800093e:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000940:	f04f 0803 	mov.w	r8, #3
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000944:	4032      	ands	r2, r6
 8000946:	9200      	str	r2, [sp, #0]
 8000948:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800094a:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800094c:	f44f 5780 	mov.w	r7, #4096	; 0x1000
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000950:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000954:	619a      	str	r2, [r3, #24]
 8000956:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_RESET);
 8000958:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800095c:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8000960:	9201      	str	r2, [sp, #4]
 8000962:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000964:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_RESET);
 8000966:	4848      	ldr	r0, [pc, #288]	; (8000a88 <main+0x170>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000968:	f042 0220 	orr.w	r2, r2, #32
 800096c:	619a      	str	r2, [r3, #24]
 800096e:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pin = LCD_RST_Pin;
 8000970:	2502      	movs	r5, #2
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000972:	f002 0220 	and.w	r2, r2, #32
 8000976:	9202      	str	r2, [sp, #8]
 8000978:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800097a:	699a      	ldr	r2, [r3, #24]
 800097c:	f042 0204 	orr.w	r2, r2, #4
 8000980:	619a      	str	r2, [r3, #24]
 8000982:	699a      	ldr	r2, [r3, #24]
 8000984:	f002 0204 	and.w	r2, r2, #4
 8000988:	9203      	str	r2, [sp, #12]
 800098a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800098c:	699a      	ldr	r2, [r3, #24]
 800098e:	f042 0208 	orr.w	r2, r2, #8
 8000992:	619a      	str	r2, [r3, #24]
 8000994:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_RESET);
 8000996:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000998:	f003 0308 	and.w	r3, r3, #8
 800099c:	9304      	str	r3, [sp, #16]
 800099e:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_RESET);
 80009a0:	f001 ffa2 	bl	80028e8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 80009a4:	2200      	movs	r2, #0
 80009a6:	2102      	movs	r1, #2
 80009a8:	4838      	ldr	r0, [pc, #224]	; (8000a8c <main+0x174>)
 80009aa:	f001 ff9d 	bl	80028e8 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 80009ae:	4836      	ldr	r0, [pc, #216]	; (8000a88 <main+0x170>)
 80009b0:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b2:	e9cd 7905 	strd	r7, r9, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009b6:	e9cd 4807 	strd	r4, r8, [sp, #28]
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 80009ba:	f001 fea7 	bl	800270c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SDIO_DETECT_Pin;
 80009be:	f44f 7380 	mov.w	r3, #256	; 0x100
  HAL_GPIO_Init(SDIO_DETECT_GPIO_Port, &GPIO_InitStruct);
 80009c2:	4833      	ldr	r0, [pc, #204]	; (8000a90 <main+0x178>)
 80009c4:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009c6:	e9cd 3405 	strd	r3, r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ca:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(SDIO_DETECT_GPIO_Port, &GPIO_InitStruct);
 80009cc:	f001 fe9e 	bl	800270c <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 80009d0:	482e      	ldr	r0, [pc, #184]	; (8000a8c <main+0x174>)
 80009d2:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d4:	e9cd 5905 	strd	r5, r9, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009d8:	e9cd 4807 	strd	r4, r8, [sp, #28]
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 80009dc:	f001 fe96 	bl	800270c <HAL_GPIO_Init>
  huart1.Init.BaudRate = 115200;
 80009e0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart1.Instance = USART1;
 80009e4:	482b      	ldr	r0, [pc, #172]	; (8000a94 <main+0x17c>)
  huart1.Init.BaudRate = 115200;
 80009e6:	4a2c      	ldr	r2, [pc, #176]	; (8000a98 <main+0x180>)
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009e8:	e9c0 4402 	strd	r4, r4, [r0, #8]
  huart1.Init.BaudRate = 115200;
 80009ec:	e9c0 2300 	strd	r2, r3, [r0]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009f0:	230c      	movs	r3, #12
  huart1.Init.Parity = UART_PARITY_NONE;
 80009f2:	6104      	str	r4, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009f4:	e9c0 3405 	strd	r3, r4, [r0, #20]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009f8:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009fa:	f003 f88f 	bl	8003b1c <HAL_UART_Init>
 80009fe:	4602      	mov	r2, r0
 8000a00:	b108      	cbz	r0, 8000a06 <main+0xee>
 8000a02:	b672      	cpsid	i
  while (1)
 8000a04:	e7fe      	b.n	8000a04 <main+0xec>
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000a06:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000a0a:	900b      	str	r0, [sp, #44]	; 0x2c
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000a0c:	4823      	ldr	r0, [pc, #140]	; (8000a9c <main+0x184>)
  Timing.DataSetupTime = 255;
 8000a0e:	21ff      	movs	r1, #255	; 0xff
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000a10:	6003      	str	r3, [r0, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000a12:	f503 7382 	add.w	r3, r3, #260	; 0x104
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8000a16:	e9c0 3201 	strd	r3, r2, [r0, #4]
  Timing.AddressSetupTime = 15;
 8000a1a:	230f      	movs	r3, #15
  Timing.BusTurnAroundDuration = 15;
 8000a1c:	e9cd 1307 	strd	r1, r3, [sp, #28]
  Timing.AddressHoldTime = 15;
 8000a20:	e9cd 3305 	strd	r3, r3, [sp, #20]
  Timing.DataLatency = 17;
 8000a24:	2311      	movs	r3, #17
  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000a26:	a905      	add	r1, sp, #20
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000a28:	e9c0 2203 	strd	r2, r2, [r0, #12]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000a2c:	e9c0 6205 	strd	r6, r2, [r0, #20]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8000a30:	e9c0 2207 	strd	r2, r2, [r0, #28]
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8000a34:	e9c0 2709 	strd	r2, r7, [r0, #36]	; 0x24
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8000a38:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000a3c:	e9c0 220d 	strd	r2, r2, [r0, #52]	; 0x34
  Timing.CLKDivision = 16;
 8000a40:	9609      	str	r6, [sp, #36]	; 0x24
  Timing.DataLatency = 17;
 8000a42:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000a44:	f002 ffc8 	bl	80039d8 <HAL_SRAM_Init>
 8000a48:	b108      	cbz	r0, 8000a4e <main+0x136>
 8000a4a:	b672      	cpsid	i
  while (1)
 8000a4c:	e7fe      	b.n	8000a4c <main+0x134>
  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 8000a4e:	4a14      	ldr	r2, [pc, #80]	; (8000aa0 <main+0x188>)
 8000a50:	69d3      	ldr	r3, [r2, #28]
 8000a52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a56:	61d3      	str	r3, [r2, #28]
  hsd.Instance = SDIO;
 8000a58:	4b12      	ldr	r3, [pc, #72]	; (8000aa4 <main+0x18c>)
 8000a5a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000a5e:	e9c3 2000 	strd	r2, r0, [r3]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000a62:	e9c3 0002 	strd	r0, r0, [r3, #8]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000a66:	e9c3 0004 	strd	r0, r0, [r3, #16]
  hsd.Init.ClockDiv = 2;
 8000a6a:	619d      	str	r5, [r3, #24]
  MX_FATFS_Init();
 8000a6c:	f003 fcce 	bl	800440c <MX_FATFS_Init>
  LCD_INIT(); // Initialize LCD
 8000a70:	f7ff fd0e 	bl	8000490 <LCD_INIT>
  initApple1(); // Initialize Apple I
 8000a74:	f7ff fe70 	bl	8000758 <initApple1>
    exec6502(INSTRUCTION_CHUNK);
 8000a78:	f242 7010 	movw	r0, #10000	; 0x2710
 8000a7c:	f000 ffe6 	bl	8001a4c <exec6502>
  while (1)
 8000a80:	e7fa      	b.n	8000a78 <main+0x160>
 8000a82:	bf00      	nop
 8000a84:	40021000 	.word	0x40021000
 8000a88:	40011400 	.word	0x40011400
 8000a8c:	40011800 	.word	0x40011800
 8000a90:	40010c00 	.word	0x40010c00
 8000a94:	200080fc 	.word	0x200080fc
 8000a98:	40013800 	.word	0x40013800
 8000a9c:	200080b4 	.word	0x200080b4
 8000aa0:	40010000 	.word	0x40010000
 8000aa4:	20008030 	.word	0x20008030

08000aa8 <getvalue>:
    startpage = ea & 0xFF00;
    ea += (uint16_t)y;

}

static uint16_t getvalue() {
 8000aa8:	b508      	push	{r3, lr}
    if (useaccum) return((uint16_t)a);
 8000aaa:	4b06      	ldr	r3, [pc, #24]	; (8000ac4 <getvalue+0x1c>)
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	b113      	cbz	r3, 8000ab6 <getvalue+0xe>
 8000ab0:	4b05      	ldr	r3, [pc, #20]	; (8000ac8 <getvalue+0x20>)
 8000ab2:	7818      	ldrb	r0, [r3, #0]
        else return((uint16_t)read6502(ea));
}
 8000ab4:	bd08      	pop	{r3, pc}
        else return((uint16_t)read6502(ea));
 8000ab6:	4b05      	ldr	r3, [pc, #20]	; (8000acc <getvalue+0x24>)
 8000ab8:	8818      	ldrh	r0, [r3, #0]
 8000aba:	f7ff fec3 	bl	8000844 <read6502>
 8000abe:	b280      	uxth	r0, r0
 8000ac0:	e7f8      	b.n	8000ab4 <getvalue+0xc>
 8000ac2:	bf00      	nop
 8000ac4:	20008163 	.word	0x20008163
 8000ac8:	20008149 	.word	0x20008149
 8000acc:	20008152 	.word	0x20008152

08000ad0 <bcc.part.0>:

void bcc() {
    if ((cpustatus & FLAG_CARRY) == 0) {
        oldpc = pc;
        pc += reladdr;
        if ((oldpc & 0xFF00) != (pc & 0xFF00)) clockticks6502 += 2; // check if jump crossed a page boundary
 8000ad0:	4a02      	ldr	r2, [pc, #8]	; (8000adc <bcc.part.0+0xc>)
 8000ad2:	6813      	ldr	r3, [r2, #0]
 8000ad4:	3302      	adds	r3, #2
 8000ad6:	6013      	str	r3, [r2, #0]
            else clockticks6502++;
    }
}
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	2000814c 	.word	0x2000814c

08000ae0 <dex.part.0>:

void dex() {
    x--;
   
    zerocalc(x);
    signcalc(x);
 8000ae0:	4a02      	ldr	r2, [pc, #8]	; (8000aec <dex.part.0+0xc>)
 8000ae2:	7813      	ldrb	r3, [r2, #0]
 8000ae4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ae8:	7013      	strb	r3, [r2, #0]
}
 8000aea:	4770      	bx	lr
 8000aec:	20008150 	.word	0x20008150

08000af0 <push16>:
void push16(uint16_t pushval) {
 8000af0:	b538      	push	{r3, r4, r5, lr}
 8000af2:	4605      	mov	r5, r0
    write6502(BASE_STACK + sp, (pushval >> 8) & 0xFF);
 8000af4:	4c09      	ldr	r4, [pc, #36]	; (8000b1c <push16+0x2c>)
 8000af6:	0a29      	lsrs	r1, r5, #8
 8000af8:	7820      	ldrb	r0, [r4, #0]
 8000afa:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8000afe:	f7ff fe17 	bl	8000730 <write6502>
    write6502(BASE_STACK + ((sp - 1) & 0xFF), pushval & 0xFF);
 8000b02:	7823      	ldrb	r3, [r4, #0]
 8000b04:	b2e9      	uxtb	r1, r5
 8000b06:	3b01      	subs	r3, #1
 8000b08:	b2db      	uxtb	r3, r3
 8000b0a:	f503 7080 	add.w	r0, r3, #256	; 0x100
 8000b0e:	f7ff fe0f 	bl	8000730 <write6502>
    sp -= 2;
 8000b12:	7823      	ldrb	r3, [r4, #0]
 8000b14:	3b02      	subs	r3, #2
 8000b16:	7023      	strb	r3, [r4, #0]
}
 8000b18:	bd38      	pop	{r3, r4, r5, pc}
 8000b1a:	bf00      	nop
 8000b1c:	20008162 	.word	0x20008162

08000b20 <push8>:
    write6502(BASE_STACK + sp--, pushval);
 8000b20:	4a04      	ldr	r2, [pc, #16]	; (8000b34 <push8+0x14>)
void push8(uint8_t pushval) {
 8000b22:	4601      	mov	r1, r0
    write6502(BASE_STACK + sp--, pushval);
 8000b24:	7813      	ldrb	r3, [r2, #0]
 8000b26:	1e58      	subs	r0, r3, #1
 8000b28:	7010      	strb	r0, [r2, #0]
 8000b2a:	f503 7080 	add.w	r0, r3, #256	; 0x100
 8000b2e:	f7ff bdff 	b.w	8000730 <write6502>
 8000b32:	bf00      	nop
 8000b34:	20008162 	.word	0x20008162

08000b38 <pull16>:
uint16_t pull16() {
 8000b38:	b538      	push	{r3, r4, r5, lr}
    temp16 = read6502(BASE_STACK + ((sp + 1) & 0xFF)) | ((uint16_t)read6502(BASE_STACK + ((sp + 2) & 0xFF)) << 8);
 8000b3a:	4d0b      	ldr	r5, [pc, #44]	; (8000b68 <pull16+0x30>)
 8000b3c:	7828      	ldrb	r0, [r5, #0]
 8000b3e:	3001      	adds	r0, #1
 8000b40:	b2c0      	uxtb	r0, r0
 8000b42:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8000b46:	f7ff fe7d 	bl	8000844 <read6502>
 8000b4a:	4604      	mov	r4, r0
 8000b4c:	7828      	ldrb	r0, [r5, #0]
 8000b4e:	3002      	adds	r0, #2
 8000b50:	b2c0      	uxtb	r0, r0
 8000b52:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8000b56:	f7ff fe75 	bl	8000844 <read6502>
    sp += 2;
 8000b5a:	782b      	ldrb	r3, [r5, #0]
    temp16 = read6502(BASE_STACK + ((sp + 1) & 0xFF)) | ((uint16_t)read6502(BASE_STACK + ((sp + 2) & 0xFF)) << 8);
 8000b5c:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
    sp += 2;
 8000b60:	3302      	adds	r3, #2
 8000b62:	702b      	strb	r3, [r5, #0]
}
 8000b64:	b280      	uxth	r0, r0
 8000b66:	bd38      	pop	{r3, r4, r5, pc}
 8000b68:	20008162 	.word	0x20008162

08000b6c <pull8>:
    return (read6502(BASE_STACK + ++sp));
 8000b6c:	4b04      	ldr	r3, [pc, #16]	; (8000b80 <pull8+0x14>)
 8000b6e:	7818      	ldrb	r0, [r3, #0]
 8000b70:	3001      	adds	r0, #1
 8000b72:	b2c0      	uxtb	r0, r0
 8000b74:	7018      	strb	r0, [r3, #0]
 8000b76:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8000b7a:	f7ff be63 	b.w	8000844 <read6502>
 8000b7e:	bf00      	nop
 8000b80:	20008162 	.word	0x20008162

08000b84 <reset6502>:
void reset6502() {
 8000b84:	b510      	push	{r4, lr}
    pc = (uint16_t)read6502(0xFFFC) | ((uint16_t)read6502(0xFFFD) << 8);
 8000b86:	f64f 70fc 	movw	r0, #65532	; 0xfffc
 8000b8a:	f7ff fe5b 	bl	8000844 <read6502>
 8000b8e:	4604      	mov	r4, r0
 8000b90:	f64f 70fd 	movw	r0, #65533	; 0xfffd
 8000b94:	f7ff fe56 	bl	8000844 <read6502>
 8000b98:	4b09      	ldr	r3, [pc, #36]	; (8000bc0 <reset6502+0x3c>)
 8000b9a:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
 8000b9e:	801c      	strh	r4, [r3, #0]
    a = 0;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	4a08      	ldr	r2, [pc, #32]	; (8000bc4 <reset6502+0x40>)
 8000ba4:	7013      	strb	r3, [r2, #0]
    x = 0;
 8000ba6:	4a08      	ldr	r2, [pc, #32]	; (8000bc8 <reset6502+0x44>)
 8000ba8:	7013      	strb	r3, [r2, #0]
    y = 0;
 8000baa:	4a08      	ldr	r2, [pc, #32]	; (8000bcc <reset6502+0x48>)
 8000bac:	7013      	strb	r3, [r2, #0]
    sp = 0xFD;
 8000bae:	22fd      	movs	r2, #253	; 0xfd
 8000bb0:	4b07      	ldr	r3, [pc, #28]	; (8000bd0 <reset6502+0x4c>)
 8000bb2:	701a      	strb	r2, [r3, #0]
    cpustatus |= FLAG_CONSTANT;
 8000bb4:	4a07      	ldr	r2, [pc, #28]	; (8000bd4 <reset6502+0x50>)
 8000bb6:	7813      	ldrb	r3, [r2, #0]
 8000bb8:	f043 0320 	orr.w	r3, r3, #32
 8000bbc:	7013      	strb	r3, [r2, #0]
}
 8000bbe:	bd10      	pop	{r4, pc}
 8000bc0:	2000815c 	.word	0x2000815c
 8000bc4:	20008149 	.word	0x20008149
 8000bc8:	20008166 	.word	0x20008166
 8000bcc:	20008167 	.word	0x20008167
 8000bd0:	20008162 	.word	0x20008162
 8000bd4:	20008150 	.word	0x20008150

08000bd8 <imm>:
    ea = pc++;
 8000bd8:	4a03      	ldr	r2, [pc, #12]	; (8000be8 <imm+0x10>)
 8000bda:	8813      	ldrh	r3, [r2, #0]
 8000bdc:	1c59      	adds	r1, r3, #1
 8000bde:	8011      	strh	r1, [r2, #0]
 8000be0:	4a02      	ldr	r2, [pc, #8]	; (8000bec <imm+0x14>)
 8000be2:	8013      	strh	r3, [r2, #0]
}
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	2000815c 	.word	0x2000815c
 8000bec:	20008152 	.word	0x20008152

08000bf0 <zp>:
void zp() { // zero-page
 8000bf0:	b508      	push	{r3, lr}
    ea = (uint16_t)read6502((uint16_t)pc++);
 8000bf2:	4b04      	ldr	r3, [pc, #16]	; (8000c04 <zp+0x14>)
 8000bf4:	8818      	ldrh	r0, [r3, #0]
 8000bf6:	1c42      	adds	r2, r0, #1
 8000bf8:	801a      	strh	r2, [r3, #0]
 8000bfa:	f7ff fe23 	bl	8000844 <read6502>
 8000bfe:	4b02      	ldr	r3, [pc, #8]	; (8000c08 <zp+0x18>)
 8000c00:	8018      	strh	r0, [r3, #0]
}
 8000c02:	bd08      	pop	{r3, pc}
 8000c04:	2000815c 	.word	0x2000815c
 8000c08:	20008152 	.word	0x20008152

08000c0c <zpx>:
void zpx() { // zero-page,X
 8000c0c:	b508      	push	{r3, lr}
    ea = ((uint16_t)read6502((uint16_t)pc++) + (uint16_t)x) & 0xFF; // zero-page wraparound
 8000c0e:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <zpx+0x1c>)
 8000c10:	8818      	ldrh	r0, [r3, #0]
 8000c12:	1c42      	adds	r2, r0, #1
 8000c14:	801a      	strh	r2, [r3, #0]
 8000c16:	f7ff fe15 	bl	8000844 <read6502>
 8000c1a:	4b04      	ldr	r3, [pc, #16]	; (8000c2c <zpx+0x20>)
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	4418      	add	r0, r3
 8000c20:	4b03      	ldr	r3, [pc, #12]	; (8000c30 <zpx+0x24>)
 8000c22:	b2c0      	uxtb	r0, r0
 8000c24:	8018      	strh	r0, [r3, #0]
}
 8000c26:	bd08      	pop	{r3, pc}
 8000c28:	2000815c 	.word	0x2000815c
 8000c2c:	20008166 	.word	0x20008166
 8000c30:	20008152 	.word	0x20008152

08000c34 <zpy>:
void zpy() { // zero-page,Y
 8000c34:	b508      	push	{r3, lr}
    ea = ((uint16_t)read6502((uint16_t)pc++) + (uint16_t)y) & 0xFF; // zero-page wraparound
 8000c36:	4b06      	ldr	r3, [pc, #24]	; (8000c50 <zpy+0x1c>)
 8000c38:	8818      	ldrh	r0, [r3, #0]
 8000c3a:	1c42      	adds	r2, r0, #1
 8000c3c:	801a      	strh	r2, [r3, #0]
 8000c3e:	f7ff fe01 	bl	8000844 <read6502>
 8000c42:	4b04      	ldr	r3, [pc, #16]	; (8000c54 <zpy+0x20>)
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	4418      	add	r0, r3
 8000c48:	4b03      	ldr	r3, [pc, #12]	; (8000c58 <zpy+0x24>)
 8000c4a:	b2c0      	uxtb	r0, r0
 8000c4c:	8018      	strh	r0, [r3, #0]
}
 8000c4e:	bd08      	pop	{r3, pc}
 8000c50:	2000815c 	.word	0x2000815c
 8000c54:	20008167 	.word	0x20008167
 8000c58:	20008152 	.word	0x20008152

08000c5c <rel>:
void rel() { // relative for branch ops (8-bit immediate value, sign-extended)
 8000c5c:	b508      	push	{r3, lr}
    reladdr = (uint16_t)read6502(pc++);
 8000c5e:	4b07      	ldr	r3, [pc, #28]	; (8000c7c <rel+0x20>)
 8000c60:	8818      	ldrh	r0, [r3, #0]
 8000c62:	1c42      	adds	r2, r0, #1
 8000c64:	801a      	strh	r2, [r3, #0]
 8000c66:	f7ff fded 	bl	8000844 <read6502>
 8000c6a:	4a05      	ldr	r2, [pc, #20]	; (8000c80 <rel+0x24>)
 8000c6c:	b283      	uxth	r3, r0
    if (reladdr & 0x80) reladdr |= 0xFF00;
 8000c6e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8000c72:	bf18      	it	ne
 8000c74:	f063 03ff 	ornne	r3, r3, #255	; 0xff
 8000c78:	8013      	strh	r3, [r2, #0]
}
 8000c7a:	bd08      	pop	{r3, pc}
 8000c7c:	2000815c 	.word	0x2000815c
 8000c80:	2000815e 	.word	0x2000815e

08000c84 <abso>:
void abso() { // absolute
 8000c84:	b538      	push	{r3, r4, r5, lr}
    ea = (uint16_t)read6502(pc) | ((uint16_t)read6502(pc+1) << 8);
 8000c86:	4d09      	ldr	r5, [pc, #36]	; (8000cac <abso+0x28>)
 8000c88:	8828      	ldrh	r0, [r5, #0]
 8000c8a:	f7ff fddb 	bl	8000844 <read6502>
 8000c8e:	4604      	mov	r4, r0
 8000c90:	8828      	ldrh	r0, [r5, #0]
 8000c92:	3001      	adds	r0, #1
 8000c94:	b280      	uxth	r0, r0
 8000c96:	f7ff fdd5 	bl	8000844 <read6502>
 8000c9a:	4b05      	ldr	r3, [pc, #20]	; (8000cb0 <abso+0x2c>)
 8000c9c:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
 8000ca0:	801c      	strh	r4, [r3, #0]
    pc += 2;
 8000ca2:	882b      	ldrh	r3, [r5, #0]
 8000ca4:	3302      	adds	r3, #2
 8000ca6:	802b      	strh	r3, [r5, #0]
}
 8000ca8:	bd38      	pop	{r3, r4, r5, pc}
 8000caa:	bf00      	nop
 8000cac:	2000815c 	.word	0x2000815c
 8000cb0:	20008152 	.word	0x20008152

08000cb4 <absx>:
void absx() { // absolute,X
 8000cb4:	b538      	push	{r3, r4, r5, lr}
    ea = ((uint16_t)read6502(pc) | ((uint16_t)read6502(pc+1) << 8));
 8000cb6:	4d0a      	ldr	r5, [pc, #40]	; (8000ce0 <absx+0x2c>)
 8000cb8:	8828      	ldrh	r0, [r5, #0]
 8000cba:	f7ff fdc3 	bl	8000844 <read6502>
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	8828      	ldrh	r0, [r5, #0]
 8000cc2:	3001      	adds	r0, #1
 8000cc4:	b280      	uxth	r0, r0
 8000cc6:	f7ff fdbd 	bl	8000844 <read6502>
    ea += (uint16_t)x;
 8000cca:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <absx+0x30>)
    ea = ((uint16_t)read6502(pc) | ((uint16_t)read6502(pc+1) << 8));
 8000ccc:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
    ea += (uint16_t)x;
 8000cd0:	7818      	ldrb	r0, [r3, #0]
 8000cd2:	4b05      	ldr	r3, [pc, #20]	; (8000ce8 <absx+0x34>)
 8000cd4:	4404      	add	r4, r0
 8000cd6:	801c      	strh	r4, [r3, #0]
    pc += 2;
 8000cd8:	882b      	ldrh	r3, [r5, #0]
 8000cda:	3302      	adds	r3, #2
 8000cdc:	802b      	strh	r3, [r5, #0]
}
 8000cde:	bd38      	pop	{r3, r4, r5, pc}
 8000ce0:	2000815c 	.word	0x2000815c
 8000ce4:	20008166 	.word	0x20008166
 8000ce8:	20008152 	.word	0x20008152

08000cec <absy>:
void absy() { // absolute,Y
 8000cec:	b538      	push	{r3, r4, r5, lr}
    ea = ((uint16_t)read6502(pc) | ((uint16_t)read6502(pc+1) << 8));
 8000cee:	4d0a      	ldr	r5, [pc, #40]	; (8000d18 <absy+0x2c>)
 8000cf0:	8828      	ldrh	r0, [r5, #0]
 8000cf2:	f7ff fda7 	bl	8000844 <read6502>
 8000cf6:	4604      	mov	r4, r0
 8000cf8:	8828      	ldrh	r0, [r5, #0]
 8000cfa:	3001      	adds	r0, #1
 8000cfc:	b280      	uxth	r0, r0
 8000cfe:	f7ff fda1 	bl	8000844 <read6502>
    ea += (uint16_t)y;
 8000d02:	4b06      	ldr	r3, [pc, #24]	; (8000d1c <absy+0x30>)
    ea = ((uint16_t)read6502(pc) | ((uint16_t)read6502(pc+1) << 8));
 8000d04:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
    ea += (uint16_t)y;
 8000d08:	7818      	ldrb	r0, [r3, #0]
 8000d0a:	4b05      	ldr	r3, [pc, #20]	; (8000d20 <absy+0x34>)
 8000d0c:	4404      	add	r4, r0
 8000d0e:	801c      	strh	r4, [r3, #0]
    pc += 2;
 8000d10:	882b      	ldrh	r3, [r5, #0]
 8000d12:	3302      	adds	r3, #2
 8000d14:	802b      	strh	r3, [r5, #0]
}
 8000d16:	bd38      	pop	{r3, r4, r5, pc}
 8000d18:	2000815c 	.word	0x2000815c
 8000d1c:	20008167 	.word	0x20008167
 8000d20:	20008152 	.word	0x20008152

08000d24 <ind>:
void ind() { // indirect
 8000d24:	b570      	push	{r4, r5, r6, lr}
    eahelp = (uint16_t)read6502(pc) | (uint16_t)((uint16_t)read6502(pc+1) << 8);
 8000d26:	4e10      	ldr	r6, [pc, #64]	; (8000d68 <ind+0x44>)
 8000d28:	8830      	ldrh	r0, [r6, #0]
 8000d2a:	f7ff fd8b 	bl	8000844 <read6502>
 8000d2e:	4604      	mov	r4, r0
 8000d30:	8830      	ldrh	r0, [r6, #0]
 8000d32:	3001      	adds	r0, #1
 8000d34:	b280      	uxth	r0, r0
 8000d36:	f7ff fd85 	bl	8000844 <read6502>
 8000d3a:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
 8000d3e:	b2a4      	uxth	r4, r4
    ea = (uint16_t)read6502(eahelp) | ((uint16_t)read6502(eahelp2) << 8);
 8000d40:	4620      	mov	r0, r4
 8000d42:	f7ff fd7f 	bl	8000844 <read6502>
 8000d46:	4605      	mov	r5, r0
    eahelp2 = (eahelp & 0xFF00) | ((eahelp + 1) & 0x00FF); // replicate 6502 page-boundary wraparound bug
 8000d48:	1c60      	adds	r0, r4, #1
 8000d4a:	b2c0      	uxtb	r0, r0
 8000d4c:	f024 04ff 	bic.w	r4, r4, #255	; 0xff
    ea = (uint16_t)read6502(eahelp) | ((uint16_t)read6502(eahelp2) << 8);
 8000d50:	4320      	orrs	r0, r4
 8000d52:	f7ff fd77 	bl	8000844 <read6502>
 8000d56:	4b05      	ldr	r3, [pc, #20]	; (8000d6c <ind+0x48>)
 8000d58:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
 8000d5c:	801d      	strh	r5, [r3, #0]
    pc += 2;
 8000d5e:	8833      	ldrh	r3, [r6, #0]
 8000d60:	3302      	adds	r3, #2
 8000d62:	8033      	strh	r3, [r6, #0]
}
 8000d64:	bd70      	pop	{r4, r5, r6, pc}
 8000d66:	bf00      	nop
 8000d68:	2000815c 	.word	0x2000815c
 8000d6c:	20008152 	.word	0x20008152

08000d70 <indx>:
void indx() { //  (indirect,X)
 8000d70:	b538      	push	{r3, r4, r5, lr}
    eahelp = (uint16_t)(((uint16_t)read6502(pc++) + (uint16_t)x) & 0xFF); // zero-page wraparound for table pointer
 8000d72:	4b0b      	ldr	r3, [pc, #44]	; (8000da0 <indx+0x30>)
 8000d74:	8818      	ldrh	r0, [r3, #0]
 8000d76:	1c42      	adds	r2, r0, #1
 8000d78:	801a      	strh	r2, [r3, #0]
 8000d7a:	f7ff fd63 	bl	8000844 <read6502>
 8000d7e:	4b09      	ldr	r3, [pc, #36]	; (8000da4 <indx+0x34>)
 8000d80:	781c      	ldrb	r4, [r3, #0]
 8000d82:	4404      	add	r4, r0
 8000d84:	b2e4      	uxtb	r4, r4
    ea = (uint16_t)read6502(eahelp & 0x00FF) | ((uint16_t)read6502((eahelp+1) & 0x00FF) << 8);
 8000d86:	4620      	mov	r0, r4
 8000d88:	f7ff fd5c 	bl	8000844 <read6502>
 8000d8c:	3401      	adds	r4, #1
 8000d8e:	4605      	mov	r5, r0
 8000d90:	b2e0      	uxtb	r0, r4
 8000d92:	f7ff fd57 	bl	8000844 <read6502>
 8000d96:	4b04      	ldr	r3, [pc, #16]	; (8000da8 <indx+0x38>)
 8000d98:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
 8000d9c:	801d      	strh	r5, [r3, #0]
}
 8000d9e:	bd38      	pop	{r3, r4, r5, pc}
 8000da0:	2000815c 	.word	0x2000815c
 8000da4:	20008166 	.word	0x20008166
 8000da8:	20008152 	.word	0x20008152

08000dac <indy>:
void indy() { //  (indirect),Y
 8000dac:	b538      	push	{r3, r4, r5, lr}
    eahelp = (uint16_t)read6502(pc++);
 8000dae:	4b0b      	ldr	r3, [pc, #44]	; (8000ddc <indy+0x30>)
 8000db0:	8818      	ldrh	r0, [r3, #0]
 8000db2:	1c42      	adds	r2, r0, #1
 8000db4:	801a      	strh	r2, [r3, #0]
 8000db6:	f7ff fd45 	bl	8000844 <read6502>
 8000dba:	b284      	uxth	r4, r0
    ea = (uint16_t)read6502(eahelp) | ((uint16_t)read6502(eahelp2) << 8);
 8000dbc:	4620      	mov	r0, r4
 8000dbe:	f7ff fd41 	bl	8000844 <read6502>
    eahelp2 = (eahelp & 0xFF00) | ((eahelp + 1) & 0x00FF); // zero-page wraparound
 8000dc2:	3401      	adds	r4, #1
    ea = (uint16_t)read6502(eahelp) | ((uint16_t)read6502(eahelp2) << 8);
 8000dc4:	4605      	mov	r5, r0
 8000dc6:	b2e0      	uxtb	r0, r4
 8000dc8:	f7ff fd3c 	bl	8000844 <read6502>
    ea += (uint16_t)y;
 8000dcc:	4b04      	ldr	r3, [pc, #16]	; (8000de0 <indy+0x34>)
    ea = (uint16_t)read6502(eahelp) | ((uint16_t)read6502(eahelp2) << 8);
 8000dce:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
    ea += (uint16_t)y;
 8000dd2:	7818      	ldrb	r0, [r3, #0]
 8000dd4:	4b03      	ldr	r3, [pc, #12]	; (8000de4 <indy+0x38>)
 8000dd6:	4405      	add	r5, r0
 8000dd8:	801d      	strh	r5, [r3, #0]
}
 8000dda:	bd38      	pop	{r3, r4, r5, pc}
 8000ddc:	2000815c 	.word	0x2000815c
 8000de0:	20008167 	.word	0x20008167
 8000de4:	20008152 	.word	0x20008152

08000de8 <putvalue>:
    if (useaccum) a = (uint8_t)(saveval & 0x00FF);
 8000de8:	4b05      	ldr	r3, [pc, #20]	; (8000e00 <putvalue+0x18>)
 8000dea:	b2c1      	uxtb	r1, r0
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	b113      	cbz	r3, 8000df6 <putvalue+0xe>
 8000df0:	4b04      	ldr	r3, [pc, #16]	; (8000e04 <putvalue+0x1c>)
 8000df2:	7019      	strb	r1, [r3, #0]
}
 8000df4:	4770      	bx	lr
        else write6502(ea, (saveval & 0x00FF));
 8000df6:	4b04      	ldr	r3, [pc, #16]	; (8000e08 <putvalue+0x20>)
 8000df8:	8818      	ldrh	r0, [r3, #0]
 8000dfa:	f7ff bc99 	b.w	8000730 <write6502>
 8000dfe:	bf00      	nop
 8000e00:	20008163 	.word	0x20008163
 8000e04:	20008149 	.word	0x20008149
 8000e08:	20008152 	.word	0x20008152

08000e0c <adc>:
void adc() {
 8000e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    value = getvalue();
 8000e0e:	f7ff fe4b 	bl	8000aa8 <getvalue>
    result = (uint16_t)a + value + (uint16_t)(cpustatus & FLAG_CARRY);
 8000e12:	4d24      	ldr	r5, [pc, #144]	; (8000ea4 <adc+0x98>)
    value = getvalue();
 8000e14:	4b24      	ldr	r3, [pc, #144]	; (8000ea8 <adc+0x9c>)
    result = (uint16_t)a + value + (uint16_t)(cpustatus & FLAG_CARRY);
 8000e16:	4c25      	ldr	r4, [pc, #148]	; (8000eac <adc+0xa0>)
    value = getvalue();
 8000e18:	8018      	strh	r0, [r3, #0]
    result = (uint16_t)a + value + (uint16_t)(cpustatus & FLAG_CARRY);
 8000e1a:	782b      	ldrb	r3, [r5, #0]
 8000e1c:	7821      	ldrb	r1, [r4, #0]
 8000e1e:	f003 0201 	and.w	r2, r3, #1
 8000e22:	440a      	add	r2, r1
 8000e24:	4e22      	ldr	r6, [pc, #136]	; (8000eb0 <adc+0xa4>)
 8000e26:	4402      	add	r2, r0
 8000e28:	b292      	uxth	r2, r2
    carrycalc(result);
 8000e2a:	f412 4f7f 	tst.w	r2, #65280	; 0xff00
    result = (uint16_t)a + value + (uint16_t)(cpustatus & FLAG_CARRY);
 8000e2e:	8032      	strh	r2, [r6, #0]
    zerocalc(result);
 8000e30:	b2d6      	uxtb	r6, r2
    carrycalc(result);
 8000e32:	bf14      	ite	ne
 8000e34:	f043 0301 	orrne.w	r3, r3, #1
 8000e38:	f003 03fe 	andeq.w	r3, r3, #254	; 0xfe
    zerocalc(result);
 8000e3c:	b1c6      	cbz	r6, 8000e70 <adc+0x64>
 8000e3e:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    overflowcalc(result, a, value);
 8000e42:	ea81 0602 	eor.w	r6, r1, r2
 8000e46:	ea80 0702 	eor.w	r7, r0, r2
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	4038      	ands	r0, r7
 8000e4e:	0607      	lsls	r7, r0, #24
 8000e50:	bf4c      	ite	mi
 8000e52:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 8000e56:	f003 03bf 	andpl.w	r3, r3, #191	; 0xbf
    signcalc(result);
 8000e5a:	0616      	lsls	r6, r2, #24
 8000e5c:	bf4c      	ite	mi
 8000e5e:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
 8000e62:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
    if (cpustatus & FLAG_DECIMAL) {
 8000e66:	0718      	lsls	r0, r3, #28
 8000e68:	d405      	bmi.n	8000e76 <adc+0x6a>
 8000e6a:	702b      	strb	r3, [r5, #0]
    saveaccum(result);
 8000e6c:	7022      	strb	r2, [r4, #0]
}
 8000e6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    zerocalc(result);
 8000e70:	f043 0302 	orr.w	r3, r3, #2
 8000e74:	e7e5      	b.n	8000e42 <adc+0x36>
        if ((a & 0x0F) > 0x09) {
 8000e76:	f001 000f 	and.w	r0, r1, #15
 8000e7a:	2809      	cmp	r0, #9
            a += 0x06;
 8000e7c:	bf84      	itt	hi
 8000e7e:	3106      	addhi	r1, #6
 8000e80:	7021      	strbhi	r1, [r4, #0]
        if ((a & 0xF0) > 0x90) {
 8000e82:	7821      	ldrb	r1, [r4, #0]
        clearcarry();
 8000e84:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
        if ((a & 0xF0) > 0x90) {
 8000e88:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
 8000e8c:	2990      	cmp	r1, #144	; 0x90
        clockticks6502++;
 8000e8e:	4909      	ldr	r1, [pc, #36]	; (8000eb4 <adc+0xa8>)
        clearcarry();
 8000e90:	702b      	strb	r3, [r5, #0]
            setcarry();
 8000e92:	bf84      	itt	hi
 8000e94:	f043 0301 	orrhi.w	r3, r3, #1
 8000e98:	702b      	strbhi	r3, [r5, #0]
        clockticks6502++;
 8000e9a:	680b      	ldr	r3, [r1, #0]
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	600b      	str	r3, [r1, #0]
 8000ea0:	e7e4      	b.n	8000e6c <adc+0x60>
 8000ea2:	bf00      	nop
 8000ea4:	20008150 	.word	0x20008150
 8000ea8:	20008164 	.word	0x20008164
 8000eac:	20008149 	.word	0x20008149
 8000eb0:	20008160 	.word	0x20008160
 8000eb4:	2000814c 	.word	0x2000814c

08000eb8 <op_and>:
void op_and() {
 8000eb8:	b508      	push	{r3, lr}
    value = getvalue();
 8000eba:	f7ff fdf5 	bl	8000aa8 <getvalue>
 8000ebe:	4b0e      	ldr	r3, [pc, #56]	; (8000ef8 <op_and+0x40>)
    result = (uint16_t)a & value;
 8000ec0:	490e      	ldr	r1, [pc, #56]	; (8000efc <op_and+0x44>)
    value = getvalue();
 8000ec2:	8018      	strh	r0, [r3, #0]
    result = (uint16_t)a & value;
 8000ec4:	780b      	ldrb	r3, [r1, #0]
 8000ec6:	4a0e      	ldr	r2, [pc, #56]	; (8000f00 <op_and+0x48>)
 8000ec8:	4018      	ands	r0, r3
 8000eca:	4b0e      	ldr	r3, [pc, #56]	; (8000f04 <op_and+0x4c>)
 8000ecc:	8018      	strh	r0, [r3, #0]
    zerocalc(result);
 8000ece:	7813      	ldrb	r3, [r2, #0]
 8000ed0:	b148      	cbz	r0, 8000ee6 <op_and+0x2e>
 8000ed2:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(result);
 8000ed6:	f010 0f80 	tst.w	r0, #128	; 0x80
    zerocalc(result);
 8000eda:	7013      	strb	r3, [r2, #0]
    signcalc(result);
 8000edc:	d107      	bne.n	8000eee <op_and+0x36>
 8000ede:	7813      	ldrb	r3, [r2, #0]
 8000ee0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000ee4:	e005      	b.n	8000ef2 <op_and+0x3a>
    zerocalc(result);
 8000ee6:	f043 0302 	orr.w	r3, r3, #2
 8000eea:	7013      	strb	r3, [r2, #0]
    signcalc(result);
 8000eec:	e7f7      	b.n	8000ede <op_and+0x26>
 8000eee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ef2:	7013      	strb	r3, [r2, #0]
    saveaccum(result);
 8000ef4:	7008      	strb	r0, [r1, #0]
}
 8000ef6:	bd08      	pop	{r3, pc}
 8000ef8:	20008164 	.word	0x20008164
 8000efc:	20008149 	.word	0x20008149
 8000f00:	20008150 	.word	0x20008150
 8000f04:	20008160 	.word	0x20008160

08000f08 <asl>:
void asl() {
 8000f08:	b508      	push	{r3, lr}
    value = getvalue();
 8000f0a:	f7ff fdcd 	bl	8000aa8 <getvalue>
 8000f0e:	4b10      	ldr	r3, [pc, #64]	; (8000f50 <asl+0x48>)
 8000f10:	4a10      	ldr	r2, [pc, #64]	; (8000f54 <asl+0x4c>)
 8000f12:	8018      	strh	r0, [r3, #0]
    result = value << 1;
 8000f14:	4b10      	ldr	r3, [pc, #64]	; (8000f58 <asl+0x50>)
 8000f16:	0040      	lsls	r0, r0, #1
 8000f18:	b280      	uxth	r0, r0
 8000f1a:	8018      	strh	r0, [r3, #0]
    carrycalc(result);
 8000f1c:	7813      	ldrb	r3, [r2, #0]
 8000f1e:	f410 4f7f 	tst.w	r0, #65280	; 0xff00
 8000f22:	bf14      	ite	ne
 8000f24:	f043 0301 	orrne.w	r3, r3, #1
 8000f28:	f003 03fe 	andeq.w	r3, r3, #254	; 0xfe
    zerocalc(result);
 8000f2c:	f010 0ffe 	tst.w	r0, #254	; 0xfe
 8000f30:	bf14      	ite	ne
 8000f32:	f003 03fd 	andne.w	r3, r3, #253	; 0xfd
 8000f36:	f043 0302 	orreq.w	r3, r3, #2
    signcalc(result);
 8000f3a:	0601      	lsls	r1, r0, #24
 8000f3c:	bf4c      	ite	mi
 8000f3e:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
 8000f42:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
 8000f46:	7013      	strb	r3, [r2, #0]
}
 8000f48:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    putvalue(result);
 8000f4c:	f7ff bf4c 	b.w	8000de8 <putvalue>
 8000f50:	20008164 	.word	0x20008164
 8000f54:	20008150 	.word	0x20008150
 8000f58:	20008160 	.word	0x20008160

08000f5c <bcc>:
    if ((cpustatus & FLAG_CARRY) == 0) {
 8000f5c:	4b0b      	ldr	r3, [pc, #44]	; (8000f8c <bcc+0x30>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	07db      	lsls	r3, r3, #31
 8000f62:	d412      	bmi.n	8000f8a <bcc+0x2e>
        oldpc = pc;
 8000f64:	490a      	ldr	r1, [pc, #40]	; (8000f90 <bcc+0x34>)
 8000f66:	4b0b      	ldr	r3, [pc, #44]	; (8000f94 <bcc+0x38>)
 8000f68:	880a      	ldrh	r2, [r1, #0]
 8000f6a:	801a      	strh	r2, [r3, #0]
        pc += reladdr;
 8000f6c:	4b0a      	ldr	r3, [pc, #40]	; (8000f98 <bcc+0x3c>)
 8000f6e:	881b      	ldrh	r3, [r3, #0]
 8000f70:	4413      	add	r3, r2
 8000f72:	b29b      	uxth	r3, r3
 8000f74:	800b      	strh	r3, [r1, #0]
        if ((oldpc & 0xFF00) != (pc & 0xFF00)) clockticks6502 += 2; // check if jump crossed a page boundary
 8000f76:	4053      	eors	r3, r2
 8000f78:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 8000f7c:	d001      	beq.n	8000f82 <bcc+0x26>
 8000f7e:	f7ff bda7 	b.w	8000ad0 <bcc.part.0>
            else clockticks6502++;
 8000f82:	4a06      	ldr	r2, [pc, #24]	; (8000f9c <bcc+0x40>)
 8000f84:	6813      	ldr	r3, [r2, #0]
 8000f86:	3301      	adds	r3, #1
 8000f88:	6013      	str	r3, [r2, #0]
}
 8000f8a:	4770      	bx	lr
 8000f8c:	20008150 	.word	0x20008150
 8000f90:	2000815c 	.word	0x2000815c
 8000f94:	20008158 	.word	0x20008158
 8000f98:	2000815e 	.word	0x2000815e
 8000f9c:	2000814c 	.word	0x2000814c

08000fa0 <bcs>:
    if ((cpustatus & FLAG_CARRY) == FLAG_CARRY) {
 8000fa0:	4b0b      	ldr	r3, [pc, #44]	; (8000fd0 <bcs+0x30>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	07db      	lsls	r3, r3, #31
 8000fa6:	d512      	bpl.n	8000fce <bcs+0x2e>
        oldpc = pc;
 8000fa8:	490a      	ldr	r1, [pc, #40]	; (8000fd4 <bcs+0x34>)
 8000faa:	4b0b      	ldr	r3, [pc, #44]	; (8000fd8 <bcs+0x38>)
 8000fac:	880a      	ldrh	r2, [r1, #0]
 8000fae:	801a      	strh	r2, [r3, #0]
        pc += reladdr;
 8000fb0:	4b0a      	ldr	r3, [pc, #40]	; (8000fdc <bcs+0x3c>)
 8000fb2:	881b      	ldrh	r3, [r3, #0]
 8000fb4:	4413      	add	r3, r2
 8000fb6:	b29b      	uxth	r3, r3
 8000fb8:	800b      	strh	r3, [r1, #0]
        if ((oldpc & 0xFF00) != (pc & 0xFF00)) clockticks6502 += 2; // check if jump crossed a page boundary
 8000fba:	4053      	eors	r3, r2
 8000fbc:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 8000fc0:	d001      	beq.n	8000fc6 <bcs+0x26>
 8000fc2:	f7ff bd85 	b.w	8000ad0 <bcc.part.0>
            else clockticks6502++;
 8000fc6:	4a06      	ldr	r2, [pc, #24]	; (8000fe0 <bcs+0x40>)
 8000fc8:	6813      	ldr	r3, [r2, #0]
 8000fca:	3301      	adds	r3, #1
 8000fcc:	6013      	str	r3, [r2, #0]
}
 8000fce:	4770      	bx	lr
 8000fd0:	20008150 	.word	0x20008150
 8000fd4:	2000815c 	.word	0x2000815c
 8000fd8:	20008158 	.word	0x20008158
 8000fdc:	2000815e 	.word	0x2000815e
 8000fe0:	2000814c 	.word	0x2000814c

08000fe4 <beq>:
    if ((cpustatus & FLAG_ZERO) == FLAG_ZERO) {
 8000fe4:	4b0b      	ldr	r3, [pc, #44]	; (8001014 <beq+0x30>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	079b      	lsls	r3, r3, #30
 8000fea:	d512      	bpl.n	8001012 <beq+0x2e>
        oldpc = pc;
 8000fec:	490a      	ldr	r1, [pc, #40]	; (8001018 <beq+0x34>)
 8000fee:	4b0b      	ldr	r3, [pc, #44]	; (800101c <beq+0x38>)
 8000ff0:	880a      	ldrh	r2, [r1, #0]
 8000ff2:	801a      	strh	r2, [r3, #0]
        pc += reladdr;
 8000ff4:	4b0a      	ldr	r3, [pc, #40]	; (8001020 <beq+0x3c>)
 8000ff6:	881b      	ldrh	r3, [r3, #0]
 8000ff8:	4413      	add	r3, r2
 8000ffa:	b29b      	uxth	r3, r3
 8000ffc:	800b      	strh	r3, [r1, #0]
        if ((oldpc & 0xFF00) != (pc & 0xFF00)) clockticks6502 += 2; // check if jump crossed a page boundary
 8000ffe:	4053      	eors	r3, r2
 8001000:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 8001004:	d001      	beq.n	800100a <beq+0x26>
 8001006:	f7ff bd63 	b.w	8000ad0 <bcc.part.0>
            else clockticks6502++;
 800100a:	4a06      	ldr	r2, [pc, #24]	; (8001024 <beq+0x40>)
 800100c:	6813      	ldr	r3, [r2, #0]
 800100e:	3301      	adds	r3, #1
 8001010:	6013      	str	r3, [r2, #0]
}
 8001012:	4770      	bx	lr
 8001014:	20008150 	.word	0x20008150
 8001018:	2000815c 	.word	0x2000815c
 800101c:	20008158 	.word	0x20008158
 8001020:	2000815e 	.word	0x2000815e
 8001024:	2000814c 	.word	0x2000814c

08001028 <op_bit>:
void op_bit() {
 8001028:	b508      	push	{r3, lr}
    value = getvalue();
 800102a:	f7ff fd3d 	bl	8000aa8 <getvalue>
 800102e:	4b0b      	ldr	r3, [pc, #44]	; (800105c <op_bit+0x34>)
    result = (uint16_t)a & value;
 8001030:	4a0b      	ldr	r2, [pc, #44]	; (8001060 <op_bit+0x38>)
    value = getvalue();
 8001032:	8018      	strh	r0, [r3, #0]
    result = (uint16_t)a & value;
 8001034:	4b0b      	ldr	r3, [pc, #44]	; (8001064 <op_bit+0x3c>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	4003      	ands	r3, r0
 800103a:	8013      	strh	r3, [r2, #0]
    zerocalc(result);
 800103c:	4a0a      	ldr	r2, [pc, #40]	; (8001068 <op_bit+0x40>)
 800103e:	b14b      	cbz	r3, 8001054 <op_bit+0x2c>
 8001040:	7813      	ldrb	r3, [r2, #0]
 8001042:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    cpustatus = (cpustatus & 0x3F) | (uint8_t)(value & 0xC0);
 8001046:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800104a:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 800104e:	4303      	orrs	r3, r0
 8001050:	7013      	strb	r3, [r2, #0]
}
 8001052:	bd08      	pop	{r3, pc}
    zerocalc(result);
 8001054:	7813      	ldrb	r3, [r2, #0]
 8001056:	f043 0302 	orr.w	r3, r3, #2
 800105a:	e7f4      	b.n	8001046 <op_bit+0x1e>
 800105c:	20008164 	.word	0x20008164
 8001060:	20008160 	.word	0x20008160
 8001064:	20008149 	.word	0x20008149
 8001068:	20008150 	.word	0x20008150

0800106c <bmi>:
    if ((cpustatus & FLAG_SIGN) == FLAG_SIGN) {
 800106c:	4b0c      	ldr	r3, [pc, #48]	; (80010a0 <bmi+0x34>)
 800106e:	f993 3000 	ldrsb.w	r3, [r3]
 8001072:	2b00      	cmp	r3, #0
 8001074:	da12      	bge.n	800109c <bmi+0x30>
        oldpc = pc;
 8001076:	490b      	ldr	r1, [pc, #44]	; (80010a4 <bmi+0x38>)
 8001078:	4b0b      	ldr	r3, [pc, #44]	; (80010a8 <bmi+0x3c>)
 800107a:	880a      	ldrh	r2, [r1, #0]
 800107c:	801a      	strh	r2, [r3, #0]
        pc += reladdr;
 800107e:	4b0b      	ldr	r3, [pc, #44]	; (80010ac <bmi+0x40>)
 8001080:	881b      	ldrh	r3, [r3, #0]
 8001082:	4413      	add	r3, r2
 8001084:	b29b      	uxth	r3, r3
 8001086:	800b      	strh	r3, [r1, #0]
        if ((oldpc & 0xFF00) != (pc & 0xFF00)) clockticks6502 += 2; // check if jump crossed a page boundary
 8001088:	4053      	eors	r3, r2
 800108a:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 800108e:	d001      	beq.n	8001094 <bmi+0x28>
 8001090:	f7ff bd1e 	b.w	8000ad0 <bcc.part.0>
            else clockticks6502++;
 8001094:	4a06      	ldr	r2, [pc, #24]	; (80010b0 <bmi+0x44>)
 8001096:	6813      	ldr	r3, [r2, #0]
 8001098:	3301      	adds	r3, #1
 800109a:	6013      	str	r3, [r2, #0]
}
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	20008150 	.word	0x20008150
 80010a4:	2000815c 	.word	0x2000815c
 80010a8:	20008158 	.word	0x20008158
 80010ac:	2000815e 	.word	0x2000815e
 80010b0:	2000814c 	.word	0x2000814c

080010b4 <bne>:
    if ((cpustatus & FLAG_ZERO) == 0) {
 80010b4:	4b0b      	ldr	r3, [pc, #44]	; (80010e4 <bne+0x30>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	079b      	lsls	r3, r3, #30
 80010ba:	d412      	bmi.n	80010e2 <bne+0x2e>
        oldpc = pc;
 80010bc:	490a      	ldr	r1, [pc, #40]	; (80010e8 <bne+0x34>)
 80010be:	4b0b      	ldr	r3, [pc, #44]	; (80010ec <bne+0x38>)
 80010c0:	880a      	ldrh	r2, [r1, #0]
 80010c2:	801a      	strh	r2, [r3, #0]
        pc += reladdr;
 80010c4:	4b0a      	ldr	r3, [pc, #40]	; (80010f0 <bne+0x3c>)
 80010c6:	881b      	ldrh	r3, [r3, #0]
 80010c8:	4413      	add	r3, r2
 80010ca:	b29b      	uxth	r3, r3
 80010cc:	800b      	strh	r3, [r1, #0]
        if ((oldpc & 0xFF00) != (pc & 0xFF00)) clockticks6502 += 2; // check if jump crossed a page boundary
 80010ce:	4053      	eors	r3, r2
 80010d0:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 80010d4:	d001      	beq.n	80010da <bne+0x26>
 80010d6:	f7ff bcfb 	b.w	8000ad0 <bcc.part.0>
            else clockticks6502++;
 80010da:	4a06      	ldr	r2, [pc, #24]	; (80010f4 <bne+0x40>)
 80010dc:	6813      	ldr	r3, [r2, #0]
 80010de:	3301      	adds	r3, #1
 80010e0:	6013      	str	r3, [r2, #0]
}
 80010e2:	4770      	bx	lr
 80010e4:	20008150 	.word	0x20008150
 80010e8:	2000815c 	.word	0x2000815c
 80010ec:	20008158 	.word	0x20008158
 80010f0:	2000815e 	.word	0x2000815e
 80010f4:	2000814c 	.word	0x2000814c

080010f8 <bpl>:
    if ((cpustatus & FLAG_SIGN) == 0) {
 80010f8:	4b0c      	ldr	r3, [pc, #48]	; (800112c <bpl+0x34>)
 80010fa:	f993 3000 	ldrsb.w	r3, [r3]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	db12      	blt.n	8001128 <bpl+0x30>
        oldpc = pc;
 8001102:	490b      	ldr	r1, [pc, #44]	; (8001130 <bpl+0x38>)
 8001104:	4b0b      	ldr	r3, [pc, #44]	; (8001134 <bpl+0x3c>)
 8001106:	880a      	ldrh	r2, [r1, #0]
 8001108:	801a      	strh	r2, [r3, #0]
        pc += reladdr;
 800110a:	4b0b      	ldr	r3, [pc, #44]	; (8001138 <bpl+0x40>)
 800110c:	881b      	ldrh	r3, [r3, #0]
 800110e:	4413      	add	r3, r2
 8001110:	b29b      	uxth	r3, r3
 8001112:	800b      	strh	r3, [r1, #0]
        if ((oldpc & 0xFF00) != (pc & 0xFF00)) clockticks6502 += 2; // check if jump crossed a page boundary
 8001114:	4053      	eors	r3, r2
 8001116:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 800111a:	d001      	beq.n	8001120 <bpl+0x28>
 800111c:	f7ff bcd8 	b.w	8000ad0 <bcc.part.0>
            else clockticks6502++;
 8001120:	4a06      	ldr	r2, [pc, #24]	; (800113c <bpl+0x44>)
 8001122:	6813      	ldr	r3, [r2, #0]
 8001124:	3301      	adds	r3, #1
 8001126:	6013      	str	r3, [r2, #0]
}
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	20008150 	.word	0x20008150
 8001130:	2000815c 	.word	0x2000815c
 8001134:	20008158 	.word	0x20008158
 8001138:	2000815e 	.word	0x2000815e
 800113c:	2000814c 	.word	0x2000814c

08001140 <brk>:
void brk() {
 8001140:	b538      	push	{r3, r4, r5, lr}
    pc++;
 8001142:	4d0f      	ldr	r5, [pc, #60]	; (8001180 <brk+0x40>)
    push8(cpustatus | FLAG_BREAK); // push CPU cpustatus to stack
 8001144:	4c0f      	ldr	r4, [pc, #60]	; (8001184 <brk+0x44>)
    pc++;
 8001146:	8828      	ldrh	r0, [r5, #0]
 8001148:	3001      	adds	r0, #1
 800114a:	b280      	uxth	r0, r0
 800114c:	8028      	strh	r0, [r5, #0]
    push16(pc); // push next instruction address onto stack
 800114e:	f7ff fccf 	bl	8000af0 <push16>
    push8(cpustatus | FLAG_BREAK); // push CPU cpustatus to stack
 8001152:	7820      	ldrb	r0, [r4, #0]
 8001154:	f040 0010 	orr.w	r0, r0, #16
 8001158:	f7ff fce2 	bl	8000b20 <push8>
    setinterrupt(); // set interrupt flag
 800115c:	7823      	ldrb	r3, [r4, #0]
    pc = (uint16_t)read6502(0xFFFE) | ((uint16_t)read6502(0xFFFF) << 8);
 800115e:	f64f 70fe 	movw	r0, #65534	; 0xfffe
    setinterrupt(); // set interrupt flag
 8001162:	f043 0304 	orr.w	r3, r3, #4
 8001166:	7023      	strb	r3, [r4, #0]
    pc = (uint16_t)read6502(0xFFFE) | ((uint16_t)read6502(0xFFFF) << 8);
 8001168:	f7ff fb6c 	bl	8000844 <read6502>
 800116c:	4604      	mov	r4, r0
 800116e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001172:	f7ff fb67 	bl	8000844 <read6502>
 8001176:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
 800117a:	802c      	strh	r4, [r5, #0]
}
 800117c:	bd38      	pop	{r3, r4, r5, pc}
 800117e:	bf00      	nop
 8001180:	2000815c 	.word	0x2000815c
 8001184:	20008150 	.word	0x20008150

08001188 <bvc>:
    if ((cpustatus & FLAG_OVERFLOW) == 0) {
 8001188:	4b0b      	ldr	r3, [pc, #44]	; (80011b8 <bvc+0x30>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	065b      	lsls	r3, r3, #25
 800118e:	d412      	bmi.n	80011b6 <bvc+0x2e>
        oldpc = pc;
 8001190:	490a      	ldr	r1, [pc, #40]	; (80011bc <bvc+0x34>)
 8001192:	4b0b      	ldr	r3, [pc, #44]	; (80011c0 <bvc+0x38>)
 8001194:	880a      	ldrh	r2, [r1, #0]
 8001196:	801a      	strh	r2, [r3, #0]
        pc += reladdr;
 8001198:	4b0a      	ldr	r3, [pc, #40]	; (80011c4 <bvc+0x3c>)
 800119a:	881b      	ldrh	r3, [r3, #0]
 800119c:	4413      	add	r3, r2
 800119e:	b29b      	uxth	r3, r3
 80011a0:	800b      	strh	r3, [r1, #0]
        if ((oldpc & 0xFF00) != (pc & 0xFF00)) clockticks6502 += 2; // check if jump crossed a page boundary
 80011a2:	4053      	eors	r3, r2
 80011a4:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 80011a8:	d001      	beq.n	80011ae <bvc+0x26>
 80011aa:	f7ff bc91 	b.w	8000ad0 <bcc.part.0>
            else clockticks6502++;
 80011ae:	4a06      	ldr	r2, [pc, #24]	; (80011c8 <bvc+0x40>)
 80011b0:	6813      	ldr	r3, [r2, #0]
 80011b2:	3301      	adds	r3, #1
 80011b4:	6013      	str	r3, [r2, #0]
}
 80011b6:	4770      	bx	lr
 80011b8:	20008150 	.word	0x20008150
 80011bc:	2000815c 	.word	0x2000815c
 80011c0:	20008158 	.word	0x20008158
 80011c4:	2000815e 	.word	0x2000815e
 80011c8:	2000814c 	.word	0x2000814c

080011cc <bvs>:
    if ((cpustatus & FLAG_OVERFLOW) == FLAG_OVERFLOW) {
 80011cc:	4b0b      	ldr	r3, [pc, #44]	; (80011fc <bvs+0x30>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	065b      	lsls	r3, r3, #25
 80011d2:	d512      	bpl.n	80011fa <bvs+0x2e>
        oldpc = pc;
 80011d4:	490a      	ldr	r1, [pc, #40]	; (8001200 <bvs+0x34>)
 80011d6:	4b0b      	ldr	r3, [pc, #44]	; (8001204 <bvs+0x38>)
 80011d8:	880a      	ldrh	r2, [r1, #0]
 80011da:	801a      	strh	r2, [r3, #0]
        pc += reladdr;
 80011dc:	4b0a      	ldr	r3, [pc, #40]	; (8001208 <bvs+0x3c>)
 80011de:	881b      	ldrh	r3, [r3, #0]
 80011e0:	4413      	add	r3, r2
 80011e2:	b29b      	uxth	r3, r3
 80011e4:	800b      	strh	r3, [r1, #0]
        if ((oldpc & 0xFF00) != (pc & 0xFF00)) clockticks6502 += 2; // check if jump crossed a page boundary
 80011e6:	4053      	eors	r3, r2
 80011e8:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 80011ec:	d001      	beq.n	80011f2 <bvs+0x26>
 80011ee:	f7ff bc6f 	b.w	8000ad0 <bcc.part.0>
            else clockticks6502++;
 80011f2:	4a06      	ldr	r2, [pc, #24]	; (800120c <bvs+0x40>)
 80011f4:	6813      	ldr	r3, [r2, #0]
 80011f6:	3301      	adds	r3, #1
 80011f8:	6013      	str	r3, [r2, #0]
}
 80011fa:	4770      	bx	lr
 80011fc:	20008150 	.word	0x20008150
 8001200:	2000815c 	.word	0x2000815c
 8001204:	20008158 	.word	0x20008158
 8001208:	2000815e 	.word	0x2000815e
 800120c:	2000814c 	.word	0x2000814c

08001210 <clc>:
    clearcarry();
 8001210:	4a02      	ldr	r2, [pc, #8]	; (800121c <clc+0xc>)
 8001212:	7813      	ldrb	r3, [r2, #0]
 8001214:	f023 0301 	bic.w	r3, r3, #1
 8001218:	7013      	strb	r3, [r2, #0]
}
 800121a:	4770      	bx	lr
 800121c:	20008150 	.word	0x20008150

08001220 <cld>:
    cleardecimal();
 8001220:	4a02      	ldr	r2, [pc, #8]	; (800122c <cld+0xc>)
 8001222:	7813      	ldrb	r3, [r2, #0]
 8001224:	f023 0308 	bic.w	r3, r3, #8
 8001228:	7013      	strb	r3, [r2, #0]
}
 800122a:	4770      	bx	lr
 800122c:	20008150 	.word	0x20008150

08001230 <cli>:
    clearinterrupt();
 8001230:	4a02      	ldr	r2, [pc, #8]	; (800123c <cli+0xc>)
 8001232:	7813      	ldrb	r3, [r2, #0]
 8001234:	f023 0304 	bic.w	r3, r3, #4
 8001238:	7013      	strb	r3, [r2, #0]
}
 800123a:	4770      	bx	lr
 800123c:	20008150 	.word	0x20008150

08001240 <clv>:
    clearoverflow();
 8001240:	4a02      	ldr	r2, [pc, #8]	; (800124c <clv+0xc>)
 8001242:	7813      	ldrb	r3, [r2, #0]
 8001244:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001248:	7013      	strb	r3, [r2, #0]
}
 800124a:	4770      	bx	lr
 800124c:	20008150 	.word	0x20008150

08001250 <cmp>:
void cmp() {
 8001250:	b508      	push	{r3, lr}
    value = getvalue();
 8001252:	f7ff fc29 	bl	8000aa8 <getvalue>
 8001256:	4b11      	ldr	r3, [pc, #68]	; (800129c <cmp+0x4c>)
    result = (uint16_t)a - value;
 8001258:	4a11      	ldr	r2, [pc, #68]	; (80012a0 <cmp+0x50>)
    value = getvalue();
 800125a:	8018      	strh	r0, [r3, #0]
    result = (uint16_t)a - value;
 800125c:	4b11      	ldr	r3, [pc, #68]	; (80012a4 <cmp+0x54>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	1a19      	subs	r1, r3, r0
 8001262:	b289      	uxth	r1, r1
 8001264:	8011      	strh	r1, [r2, #0]
    if (a >= (uint8_t)(value & 0x00FF)) setcarry();
 8001266:	b2c0      	uxtb	r0, r0
 8001268:	4a0f      	ldr	r2, [pc, #60]	; (80012a8 <cmp+0x58>)
 800126a:	4283      	cmp	r3, r0
 800126c:	7813      	ldrb	r3, [r2, #0]
 800126e:	d307      	bcc.n	8001280 <cmp+0x30>
 8001270:	f043 0001 	orr.w	r0, r3, #1
 8001274:	7010      	strb	r0, [r2, #0]
    if (a == (uint8_t)(value & 0x00FF)) setzero();
 8001276:	d007      	beq.n	8001288 <cmp+0x38>
        else clearzero();
 8001278:	7813      	ldrb	r3, [r2, #0]
 800127a:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 800127e:	e005      	b.n	800128c <cmp+0x3c>
        else clearcarry();
 8001280:	f023 0301 	bic.w	r3, r3, #1
 8001284:	7013      	strb	r3, [r2, #0]
    if (a == (uint8_t)(value & 0x00FF)) setzero();
 8001286:	e7f7      	b.n	8001278 <cmp+0x28>
 8001288:	f043 0303 	orr.w	r3, r3, #3
    signcalc(result);
 800128c:	0609      	lsls	r1, r1, #24
 800128e:	bf4c      	ite	mi
 8001290:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
 8001294:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
 8001298:	7013      	strb	r3, [r2, #0]
}
 800129a:	bd08      	pop	{r3, pc}
 800129c:	20008164 	.word	0x20008164
 80012a0:	20008160 	.word	0x20008160
 80012a4:	20008149 	.word	0x20008149
 80012a8:	20008150 	.word	0x20008150

080012ac <cpx>:
void cpx() {
 80012ac:	b508      	push	{r3, lr}
    value = getvalue();
 80012ae:	f7ff fbfb 	bl	8000aa8 <getvalue>
 80012b2:	4b11      	ldr	r3, [pc, #68]	; (80012f8 <cpx+0x4c>)
    result = (uint16_t)x - value;
 80012b4:	4a11      	ldr	r2, [pc, #68]	; (80012fc <cpx+0x50>)
    value = getvalue();
 80012b6:	8018      	strh	r0, [r3, #0]
    result = (uint16_t)x - value;
 80012b8:	4b11      	ldr	r3, [pc, #68]	; (8001300 <cpx+0x54>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	1a19      	subs	r1, r3, r0
 80012be:	b289      	uxth	r1, r1
 80012c0:	8011      	strh	r1, [r2, #0]
    if (x >= (uint8_t)(value & 0x00FF)) setcarry();
 80012c2:	b2c0      	uxtb	r0, r0
 80012c4:	4a0f      	ldr	r2, [pc, #60]	; (8001304 <cpx+0x58>)
 80012c6:	4283      	cmp	r3, r0
 80012c8:	7813      	ldrb	r3, [r2, #0]
 80012ca:	d307      	bcc.n	80012dc <cpx+0x30>
 80012cc:	f043 0001 	orr.w	r0, r3, #1
 80012d0:	7010      	strb	r0, [r2, #0]
    if (x == (uint8_t)(value & 0x00FF)) setzero();
 80012d2:	d007      	beq.n	80012e4 <cpx+0x38>
        else clearzero();
 80012d4:	7813      	ldrb	r3, [r2, #0]
 80012d6:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 80012da:	e005      	b.n	80012e8 <cpx+0x3c>
        else clearcarry();
 80012dc:	f023 0301 	bic.w	r3, r3, #1
 80012e0:	7013      	strb	r3, [r2, #0]
    if (x == (uint8_t)(value & 0x00FF)) setzero();
 80012e2:	e7f7      	b.n	80012d4 <cpx+0x28>
 80012e4:	f043 0303 	orr.w	r3, r3, #3
    signcalc(result);
 80012e8:	0609      	lsls	r1, r1, #24
 80012ea:	bf4c      	ite	mi
 80012ec:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
 80012f0:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
 80012f4:	7013      	strb	r3, [r2, #0]
}
 80012f6:	bd08      	pop	{r3, pc}
 80012f8:	20008164 	.word	0x20008164
 80012fc:	20008160 	.word	0x20008160
 8001300:	20008166 	.word	0x20008166
 8001304:	20008150 	.word	0x20008150

08001308 <cpy>:
void cpy() {
 8001308:	b508      	push	{r3, lr}
    value = getvalue();
 800130a:	f7ff fbcd 	bl	8000aa8 <getvalue>
 800130e:	4b11      	ldr	r3, [pc, #68]	; (8001354 <cpy+0x4c>)
    result = (uint16_t)y - value;
 8001310:	4a11      	ldr	r2, [pc, #68]	; (8001358 <cpy+0x50>)
    value = getvalue();
 8001312:	8018      	strh	r0, [r3, #0]
    result = (uint16_t)y - value;
 8001314:	4b11      	ldr	r3, [pc, #68]	; (800135c <cpy+0x54>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	1a19      	subs	r1, r3, r0
 800131a:	b289      	uxth	r1, r1
 800131c:	8011      	strh	r1, [r2, #0]
    if (y >= (uint8_t)(value & 0x00FF)) setcarry();
 800131e:	b2c0      	uxtb	r0, r0
 8001320:	4a0f      	ldr	r2, [pc, #60]	; (8001360 <cpy+0x58>)
 8001322:	4283      	cmp	r3, r0
 8001324:	7813      	ldrb	r3, [r2, #0]
 8001326:	d307      	bcc.n	8001338 <cpy+0x30>
 8001328:	f043 0001 	orr.w	r0, r3, #1
 800132c:	7010      	strb	r0, [r2, #0]
    if (y == (uint8_t)(value & 0x00FF)) setzero();
 800132e:	d007      	beq.n	8001340 <cpy+0x38>
        else clearzero();
 8001330:	7813      	ldrb	r3, [r2, #0]
 8001332:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 8001336:	e005      	b.n	8001344 <cpy+0x3c>
        else clearcarry();
 8001338:	f023 0301 	bic.w	r3, r3, #1
 800133c:	7013      	strb	r3, [r2, #0]
    if (y == (uint8_t)(value & 0x00FF)) setzero();
 800133e:	e7f7      	b.n	8001330 <cpy+0x28>
 8001340:	f043 0303 	orr.w	r3, r3, #3
    signcalc(result);
 8001344:	0609      	lsls	r1, r1, #24
 8001346:	bf4c      	ite	mi
 8001348:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
 800134c:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
 8001350:	7013      	strb	r3, [r2, #0]
}
 8001352:	bd08      	pop	{r3, pc}
 8001354:	20008164 	.word	0x20008164
 8001358:	20008160 	.word	0x20008160
 800135c:	20008167 	.word	0x20008167
 8001360:	20008150 	.word	0x20008150

08001364 <dec>:
void dec() {
 8001364:	b508      	push	{r3, lr}
    value = getvalue();
 8001366:	f7ff fb9f 	bl	8000aa8 <getvalue>
 800136a:	4b0d      	ldr	r3, [pc, #52]	; (80013a0 <dec+0x3c>)
 800136c:	4a0d      	ldr	r2, [pc, #52]	; (80013a4 <dec+0x40>)
 800136e:	8018      	strh	r0, [r3, #0]
    result = value - 1;
 8001370:	4b0d      	ldr	r3, [pc, #52]	; (80013a8 <dec+0x44>)
 8001372:	3801      	subs	r0, #1
 8001374:	b280      	uxth	r0, r0
 8001376:	8018      	strh	r0, [r3, #0]
    zerocalc(result);
 8001378:	b2c3      	uxtb	r3, r0
 800137a:	b16b      	cbz	r3, 8001398 <dec+0x34>
 800137c:	7813      	ldrb	r3, [r2, #0]
 800137e:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(result);
 8001382:	0601      	lsls	r1, r0, #24
 8001384:	bf4c      	ite	mi
 8001386:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
 800138a:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
 800138e:	7013      	strb	r3, [r2, #0]
}
 8001390:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    putvalue(result);
 8001394:	f7ff bd28 	b.w	8000de8 <putvalue>
    zerocalc(result);
 8001398:	7813      	ldrb	r3, [r2, #0]
 800139a:	f043 0302 	orr.w	r3, r3, #2
 800139e:	e7f0      	b.n	8001382 <dec+0x1e>
 80013a0:	20008164 	.word	0x20008164
 80013a4:	20008150 	.word	0x20008150
 80013a8:	20008160 	.word	0x20008160

080013ac <dex>:
    x--;
 80013ac:	4b0a      	ldr	r3, [pc, #40]	; (80013d8 <dex+0x2c>)
    zerocalc(x);
 80013ae:	490b      	ldr	r1, [pc, #44]	; (80013dc <dex+0x30>)
    x--;
 80013b0:	781a      	ldrb	r2, [r3, #0]
 80013b2:	3a01      	subs	r2, #1
 80013b4:	b2d2      	uxtb	r2, r2
 80013b6:	701a      	strb	r2, [r3, #0]
    zerocalc(x);
 80013b8:	780b      	ldrb	r3, [r1, #0]
 80013ba:	b132      	cbz	r2, 80013ca <dex+0x1e>
 80013bc:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(x);
 80013c0:	0612      	lsls	r2, r2, #24
 80013c2:	700b      	strb	r3, [r1, #0]
 80013c4:	d504      	bpl.n	80013d0 <dex+0x24>
 80013c6:	f7ff bb8b 	b.w	8000ae0 <dex.part.0>
    zerocalc(x);
 80013ca:	f043 0302 	orr.w	r3, r3, #2
 80013ce:	e7f7      	b.n	80013c0 <dex+0x14>
    signcalc(x);
 80013d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80013d4:	700b      	strb	r3, [r1, #0]
}
 80013d6:	4770      	bx	lr
 80013d8:	20008166 	.word	0x20008166
 80013dc:	20008150 	.word	0x20008150

080013e0 <dey>:

void dey() {
    y--;
 80013e0:	4b0a      	ldr	r3, [pc, #40]	; (800140c <dey+0x2c>)
   
    zerocalc(y);
 80013e2:	490b      	ldr	r1, [pc, #44]	; (8001410 <dey+0x30>)
    y--;
 80013e4:	781a      	ldrb	r2, [r3, #0]
 80013e6:	3a01      	subs	r2, #1
 80013e8:	b2d2      	uxtb	r2, r2
 80013ea:	701a      	strb	r2, [r3, #0]
    zerocalc(y);
 80013ec:	780b      	ldrb	r3, [r1, #0]
 80013ee:	b132      	cbz	r2, 80013fe <dey+0x1e>
 80013f0:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(y);
 80013f4:	0612      	lsls	r2, r2, #24
 80013f6:	700b      	strb	r3, [r1, #0]
 80013f8:	d504      	bpl.n	8001404 <dey+0x24>
 80013fa:	f7ff bb71 	b.w	8000ae0 <dex.part.0>
    zerocalc(y);
 80013fe:	f043 0302 	orr.w	r3, r3, #2
 8001402:	e7f7      	b.n	80013f4 <dey+0x14>
    signcalc(y);
 8001404:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001408:	700b      	strb	r3, [r1, #0]
}
 800140a:	4770      	bx	lr
 800140c:	20008167 	.word	0x20008167
 8001410:	20008150 	.word	0x20008150

08001414 <eor>:

void eor() {
 8001414:	b508      	push	{r3, lr}
    value = getvalue();
 8001416:	f7ff fb47 	bl	8000aa8 <getvalue>
 800141a:	4b0d      	ldr	r3, [pc, #52]	; (8001450 <eor+0x3c>)
    result = (uint16_t)a ^ value;
 800141c:	490d      	ldr	r1, [pc, #52]	; (8001454 <eor+0x40>)
    value = getvalue();
 800141e:	8018      	strh	r0, [r3, #0]
    result = (uint16_t)a ^ value;
 8001420:	780b      	ldrb	r3, [r1, #0]
 8001422:	4a0d      	ldr	r2, [pc, #52]	; (8001458 <eor+0x44>)
 8001424:	4058      	eors	r0, r3
 8001426:	4b0d      	ldr	r3, [pc, #52]	; (800145c <eor+0x48>)
 8001428:	8018      	strh	r0, [r3, #0]
   
    zerocalc(result);
 800142a:	b2c3      	uxtb	r3, r0
 800142c:	b163      	cbz	r3, 8001448 <eor+0x34>
 800142e:	7813      	ldrb	r3, [r2, #0]
 8001430:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(result);
 8001434:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001438:	bf14      	ite	ne
 800143a:	f043 0380 	orrne.w	r3, r3, #128	; 0x80
 800143e:	f003 037f 	andeq.w	r3, r3, #127	; 0x7f
 8001442:	7013      	strb	r3, [r2, #0]
   
    saveaccum(result);
 8001444:	7008      	strb	r0, [r1, #0]
}
 8001446:	bd08      	pop	{r3, pc}
    zerocalc(result);
 8001448:	7813      	ldrb	r3, [r2, #0]
 800144a:	f043 0302 	orr.w	r3, r3, #2
 800144e:	e7f1      	b.n	8001434 <eor+0x20>
 8001450:	20008164 	.word	0x20008164
 8001454:	20008149 	.word	0x20008149
 8001458:	20008150 	.word	0x20008150
 800145c:	20008160 	.word	0x20008160

08001460 <inc>:

void inc() {
 8001460:	b508      	push	{r3, lr}
    value = getvalue();
 8001462:	f7ff fb21 	bl	8000aa8 <getvalue>
 8001466:	4b0d      	ldr	r3, [pc, #52]	; (800149c <inc+0x3c>)
 8001468:	4a0d      	ldr	r2, [pc, #52]	; (80014a0 <inc+0x40>)
 800146a:	8018      	strh	r0, [r3, #0]
    result = value + 1;
 800146c:	4b0d      	ldr	r3, [pc, #52]	; (80014a4 <inc+0x44>)
 800146e:	3001      	adds	r0, #1
 8001470:	b280      	uxth	r0, r0
 8001472:	8018      	strh	r0, [r3, #0]
   
    zerocalc(result);
 8001474:	b2c3      	uxtb	r3, r0
 8001476:	b16b      	cbz	r3, 8001494 <inc+0x34>
 8001478:	7813      	ldrb	r3, [r2, #0]
 800147a:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(result);
 800147e:	0601      	lsls	r1, r0, #24
 8001480:	bf4c      	ite	mi
 8001482:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
 8001486:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
 800148a:	7013      	strb	r3, [r2, #0]
   
    putvalue(result);
}
 800148c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    putvalue(result);
 8001490:	f7ff bcaa 	b.w	8000de8 <putvalue>
    zerocalc(result);
 8001494:	7813      	ldrb	r3, [r2, #0]
 8001496:	f043 0302 	orr.w	r3, r3, #2
 800149a:	e7f0      	b.n	800147e <inc+0x1e>
 800149c:	20008164 	.word	0x20008164
 80014a0:	20008150 	.word	0x20008150
 80014a4:	20008160 	.word	0x20008160

080014a8 <inx>:

void inx() {
    x++;
 80014a8:	4b0a      	ldr	r3, [pc, #40]	; (80014d4 <inx+0x2c>)
   
    zerocalc(x);
 80014aa:	490b      	ldr	r1, [pc, #44]	; (80014d8 <inx+0x30>)
    x++;
 80014ac:	781a      	ldrb	r2, [r3, #0]
 80014ae:	3201      	adds	r2, #1
 80014b0:	b2d2      	uxtb	r2, r2
 80014b2:	701a      	strb	r2, [r3, #0]
    zerocalc(x);
 80014b4:	780b      	ldrb	r3, [r1, #0]
 80014b6:	b132      	cbz	r2, 80014c6 <inx+0x1e>
 80014b8:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(x);
 80014bc:	0612      	lsls	r2, r2, #24
 80014be:	700b      	strb	r3, [r1, #0]
 80014c0:	d504      	bpl.n	80014cc <inx+0x24>
 80014c2:	f7ff bb0d 	b.w	8000ae0 <dex.part.0>
    zerocalc(x);
 80014c6:	f043 0302 	orr.w	r3, r3, #2
 80014ca:	e7f7      	b.n	80014bc <inx+0x14>
    signcalc(x);
 80014cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80014d0:	700b      	strb	r3, [r1, #0]
}
 80014d2:	4770      	bx	lr
 80014d4:	20008166 	.word	0x20008166
 80014d8:	20008150 	.word	0x20008150

080014dc <iny>:

void iny() {
    y++;
 80014dc:	4b0a      	ldr	r3, [pc, #40]	; (8001508 <iny+0x2c>)
   
    zerocalc(y);
 80014de:	490b      	ldr	r1, [pc, #44]	; (800150c <iny+0x30>)
    y++;
 80014e0:	781a      	ldrb	r2, [r3, #0]
 80014e2:	3201      	adds	r2, #1
 80014e4:	b2d2      	uxtb	r2, r2
 80014e6:	701a      	strb	r2, [r3, #0]
    zerocalc(y);
 80014e8:	780b      	ldrb	r3, [r1, #0]
 80014ea:	b132      	cbz	r2, 80014fa <iny+0x1e>
 80014ec:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(y);
 80014f0:	0612      	lsls	r2, r2, #24
 80014f2:	700b      	strb	r3, [r1, #0]
 80014f4:	d504      	bpl.n	8001500 <iny+0x24>
 80014f6:	f7ff baf3 	b.w	8000ae0 <dex.part.0>
    zerocalc(y);
 80014fa:	f043 0302 	orr.w	r3, r3, #2
 80014fe:	e7f7      	b.n	80014f0 <iny+0x14>
    signcalc(y);
 8001500:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001504:	700b      	strb	r3, [r1, #0]
}
 8001506:	4770      	bx	lr
 8001508:	20008167 	.word	0x20008167
 800150c:	20008150 	.word	0x20008150

08001510 <jmp>:

void jmp() {
    pc = ea;
 8001510:	4b02      	ldr	r3, [pc, #8]	; (800151c <jmp+0xc>)
 8001512:	881a      	ldrh	r2, [r3, #0]
 8001514:	4b02      	ldr	r3, [pc, #8]	; (8001520 <jmp+0x10>)
 8001516:	801a      	strh	r2, [r3, #0]
}
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	20008152 	.word	0x20008152
 8001520:	2000815c 	.word	0x2000815c

08001524 <jsr>:

void jsr() {
 8001524:	b510      	push	{r4, lr}
    push16(pc - 1);
 8001526:	4c05      	ldr	r4, [pc, #20]	; (800153c <jsr+0x18>)
 8001528:	8820      	ldrh	r0, [r4, #0]
 800152a:	3801      	subs	r0, #1
 800152c:	b280      	uxth	r0, r0
 800152e:	f7ff fadf 	bl	8000af0 <push16>
    pc = ea;
 8001532:	4b03      	ldr	r3, [pc, #12]	; (8001540 <jsr+0x1c>)
 8001534:	881b      	ldrh	r3, [r3, #0]
 8001536:	8023      	strh	r3, [r4, #0]
}
 8001538:	bd10      	pop	{r4, pc}
 800153a:	bf00      	nop
 800153c:	2000815c 	.word	0x2000815c
 8001540:	20008152 	.word	0x20008152

08001544 <lda>:

void lda() {
 8001544:	b508      	push	{r3, lr}
    value = getvalue();
 8001546:	f7ff faaf 	bl	8000aa8 <getvalue>
 800154a:	4b0c      	ldr	r3, [pc, #48]	; (800157c <lda+0x38>)
    a = (uint8_t)(value & 0x00FF);
 800154c:	4a0c      	ldr	r2, [pc, #48]	; (8001580 <lda+0x3c>)
    value = getvalue();
 800154e:	8018      	strh	r0, [r3, #0]
    a = (uint8_t)(value & 0x00FF);
 8001550:	b2c3      	uxtb	r3, r0
 8001552:	7013      	strb	r3, [r2, #0]
   
    zerocalc(a);
 8001554:	4a0b      	ldr	r2, [pc, #44]	; (8001584 <lda+0x40>)
 8001556:	b14b      	cbz	r3, 800156c <lda+0x28>
 8001558:	7813      	ldrb	r3, [r2, #0]
 800155a:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(a);
 800155e:	0601      	lsls	r1, r0, #24
 8001560:	7013      	strb	r3, [r2, #0]
 8001562:	d507      	bpl.n	8001574 <lda+0x30>
}
 8001564:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001568:	f7ff baba 	b.w	8000ae0 <dex.part.0>
    zerocalc(a);
 800156c:	7813      	ldrb	r3, [r2, #0]
 800156e:	f043 0302 	orr.w	r3, r3, #2
 8001572:	e7f4      	b.n	800155e <lda+0x1a>
    signcalc(a);
 8001574:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001578:	7013      	strb	r3, [r2, #0]
}
 800157a:	bd08      	pop	{r3, pc}
 800157c:	20008164 	.word	0x20008164
 8001580:	20008149 	.word	0x20008149
 8001584:	20008150 	.word	0x20008150

08001588 <ldx>:

void ldx() {
 8001588:	b508      	push	{r3, lr}
    value = getvalue();
 800158a:	f7ff fa8d 	bl	8000aa8 <getvalue>
 800158e:	4b0c      	ldr	r3, [pc, #48]	; (80015c0 <ldx+0x38>)
    x = (uint8_t)(value & 0x00FF);
 8001590:	4a0c      	ldr	r2, [pc, #48]	; (80015c4 <ldx+0x3c>)
    value = getvalue();
 8001592:	8018      	strh	r0, [r3, #0]
    x = (uint8_t)(value & 0x00FF);
 8001594:	b2c3      	uxtb	r3, r0
 8001596:	7013      	strb	r3, [r2, #0]
   
    zerocalc(x);
 8001598:	4a0b      	ldr	r2, [pc, #44]	; (80015c8 <ldx+0x40>)
 800159a:	b14b      	cbz	r3, 80015b0 <ldx+0x28>
 800159c:	7813      	ldrb	r3, [r2, #0]
 800159e:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(x);
 80015a2:	0601      	lsls	r1, r0, #24
 80015a4:	7013      	strb	r3, [r2, #0]
 80015a6:	d507      	bpl.n	80015b8 <ldx+0x30>
}
 80015a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80015ac:	f7ff ba98 	b.w	8000ae0 <dex.part.0>
    zerocalc(x);
 80015b0:	7813      	ldrb	r3, [r2, #0]
 80015b2:	f043 0302 	orr.w	r3, r3, #2
 80015b6:	e7f4      	b.n	80015a2 <ldx+0x1a>
    signcalc(x);
 80015b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80015bc:	7013      	strb	r3, [r2, #0]
}
 80015be:	bd08      	pop	{r3, pc}
 80015c0:	20008164 	.word	0x20008164
 80015c4:	20008166 	.word	0x20008166
 80015c8:	20008150 	.word	0x20008150

080015cc <ldy>:

void ldy() {
 80015cc:	b508      	push	{r3, lr}
    value = getvalue();
 80015ce:	f7ff fa6b 	bl	8000aa8 <getvalue>
 80015d2:	4b0c      	ldr	r3, [pc, #48]	; (8001604 <ldy+0x38>)
    y = (uint8_t)(value & 0x00FF);
 80015d4:	4a0c      	ldr	r2, [pc, #48]	; (8001608 <ldy+0x3c>)
    value = getvalue();
 80015d6:	8018      	strh	r0, [r3, #0]
    y = (uint8_t)(value & 0x00FF);
 80015d8:	b2c3      	uxtb	r3, r0
 80015da:	7013      	strb	r3, [r2, #0]
   
    zerocalc(y);
 80015dc:	4a0b      	ldr	r2, [pc, #44]	; (800160c <ldy+0x40>)
 80015de:	b14b      	cbz	r3, 80015f4 <ldy+0x28>
 80015e0:	7813      	ldrb	r3, [r2, #0]
 80015e2:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(y);
 80015e6:	0601      	lsls	r1, r0, #24
 80015e8:	7013      	strb	r3, [r2, #0]
 80015ea:	d507      	bpl.n	80015fc <ldy+0x30>
}
 80015ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80015f0:	f7ff ba76 	b.w	8000ae0 <dex.part.0>
    zerocalc(y);
 80015f4:	7813      	ldrb	r3, [r2, #0]
 80015f6:	f043 0302 	orr.w	r3, r3, #2
 80015fa:	e7f4      	b.n	80015e6 <ldy+0x1a>
    signcalc(y);
 80015fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001600:	7013      	strb	r3, [r2, #0]
}
 8001602:	bd08      	pop	{r3, pc}
 8001604:	20008164 	.word	0x20008164
 8001608:	20008167 	.word	0x20008167
 800160c:	20008150 	.word	0x20008150

08001610 <lsr>:

void lsr() {
 8001610:	b508      	push	{r3, lr}
    value = getvalue();
 8001612:	f7ff fa49 	bl	8000aa8 <getvalue>
 8001616:	4603      	mov	r3, r0
 8001618:	4a10      	ldr	r2, [pc, #64]	; (800165c <lsr+0x4c>)
    result = value >> 1;
   
    if (value & 1) setcarry();
 800161a:	f013 0f01 	tst.w	r3, #1
    value = getvalue();
 800161e:	8010      	strh	r0, [r2, #0]
    result = value >> 1;
 8001620:	4a0f      	ldr	r2, [pc, #60]	; (8001660 <lsr+0x50>)
 8001622:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8001626:	8010      	strh	r0, [r2, #0]
    if (value & 1) setcarry();
 8001628:	4a0e      	ldr	r2, [pc, #56]	; (8001664 <lsr+0x54>)
        else clearcarry();
    zerocalc(result);
 800162a:	b2c1      	uxtb	r1, r0
    if (value & 1) setcarry();
 800162c:	7813      	ldrb	r3, [r2, #0]
 800162e:	bf14      	ite	ne
 8001630:	f043 0301 	orrne.w	r3, r3, #1
        else clearcarry();
 8001634:	f003 03fe 	andeq.w	r3, r3, #254	; 0xfe
    zerocalc(result);
 8001638:	b161      	cbz	r1, 8001654 <lsr+0x44>
 800163a:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(result);
 800163e:	0601      	lsls	r1, r0, #24
 8001640:	bf4c      	ite	mi
 8001642:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
 8001646:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
 800164a:	7013      	strb	r3, [r2, #0]
   
    putvalue(result);
}
 800164c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    putvalue(result);
 8001650:	f7ff bbca 	b.w	8000de8 <putvalue>
    zerocalc(result);
 8001654:	f043 0302 	orr.w	r3, r3, #2
 8001658:	e7f1      	b.n	800163e <lsr+0x2e>
 800165a:	bf00      	nop
 800165c:	20008164 	.word	0x20008164
 8001660:	20008160 	.word	0x20008160
 8001664:	20008150 	.word	0x20008150

08001668 <ora>:

void nop() {
}

void ora() {
 8001668:	b508      	push	{r3, lr}
    value = getvalue();
 800166a:	f7ff fa1d 	bl	8000aa8 <getvalue>
 800166e:	4b0d      	ldr	r3, [pc, #52]	; (80016a4 <ora+0x3c>)
    result = (uint16_t)a | value;
 8001670:	490d      	ldr	r1, [pc, #52]	; (80016a8 <ora+0x40>)
    value = getvalue();
 8001672:	8018      	strh	r0, [r3, #0]
    result = (uint16_t)a | value;
 8001674:	780b      	ldrb	r3, [r1, #0]
 8001676:	4a0d      	ldr	r2, [pc, #52]	; (80016ac <ora+0x44>)
 8001678:	4318      	orrs	r0, r3
 800167a:	4b0d      	ldr	r3, [pc, #52]	; (80016b0 <ora+0x48>)
 800167c:	8018      	strh	r0, [r3, #0]
   
    zerocalc(result);
 800167e:	b2c3      	uxtb	r3, r0
 8001680:	b163      	cbz	r3, 800169c <ora+0x34>
 8001682:	7813      	ldrb	r3, [r2, #0]
 8001684:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(result);
 8001688:	f010 0f80 	tst.w	r0, #128	; 0x80
 800168c:	bf14      	ite	ne
 800168e:	f043 0380 	orrne.w	r3, r3, #128	; 0x80
 8001692:	f003 037f 	andeq.w	r3, r3, #127	; 0x7f
 8001696:	7013      	strb	r3, [r2, #0]
   
    saveaccum(result);
 8001698:	7008      	strb	r0, [r1, #0]
}
 800169a:	bd08      	pop	{r3, pc}
    zerocalc(result);
 800169c:	7813      	ldrb	r3, [r2, #0]
 800169e:	f043 0302 	orr.w	r3, r3, #2
 80016a2:	e7f1      	b.n	8001688 <ora+0x20>
 80016a4:	20008164 	.word	0x20008164
 80016a8:	20008149 	.word	0x20008149
 80016ac:	20008150 	.word	0x20008150
 80016b0:	20008160 	.word	0x20008160

080016b4 <pha>:

void pha() {
    push8(a);
 80016b4:	4b01      	ldr	r3, [pc, #4]	; (80016bc <pha+0x8>)
 80016b6:	7818      	ldrb	r0, [r3, #0]
 80016b8:	f7ff ba32 	b.w	8000b20 <push8>
 80016bc:	20008149 	.word	0x20008149

080016c0 <php>:
}

void php() {
    push8(cpustatus | FLAG_BREAK);
 80016c0:	4b02      	ldr	r3, [pc, #8]	; (80016cc <php+0xc>)
 80016c2:	7818      	ldrb	r0, [r3, #0]
 80016c4:	f040 0010 	orr.w	r0, r0, #16
 80016c8:	f7ff ba2a 	b.w	8000b20 <push8>
 80016cc:	20008150 	.word	0x20008150

080016d0 <pla>:
}

void pla() {
 80016d0:	b508      	push	{r3, lr}
    a = pull8();
 80016d2:	f7ff fa4b 	bl	8000b6c <pull8>
 80016d6:	4b0a      	ldr	r3, [pc, #40]	; (8001700 <pla+0x30>)
 80016d8:	4a0a      	ldr	r2, [pc, #40]	; (8001704 <pla+0x34>)
 80016da:	7018      	strb	r0, [r3, #0]
   
    zerocalc(a);
 80016dc:	7813      	ldrb	r3, [r2, #0]
 80016de:	b140      	cbz	r0, 80016f2 <pla+0x22>
 80016e0:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(a);
 80016e4:	0601      	lsls	r1, r0, #24
 80016e6:	7013      	strb	r3, [r2, #0]
 80016e8:	d506      	bpl.n	80016f8 <pla+0x28>
}
 80016ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80016ee:	f7ff b9f7 	b.w	8000ae0 <dex.part.0>
    zerocalc(a);
 80016f2:	f043 0302 	orr.w	r3, r3, #2
 80016f6:	e7f5      	b.n	80016e4 <pla+0x14>
    signcalc(a);
 80016f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80016fc:	7013      	strb	r3, [r2, #0]
}
 80016fe:	bd08      	pop	{r3, pc}
 8001700:	20008149 	.word	0x20008149
 8001704:	20008150 	.word	0x20008150

08001708 <plp>:

void plp() {
 8001708:	b508      	push	{r3, lr}
    cpustatus = pull8() | FLAG_CONSTANT;
 800170a:	f7ff fa2f 	bl	8000b6c <pull8>
 800170e:	4b02      	ldr	r3, [pc, #8]	; (8001718 <plp+0x10>)
 8001710:	f040 0020 	orr.w	r0, r0, #32
 8001714:	7018      	strb	r0, [r3, #0]
}
 8001716:	bd08      	pop	{r3, pc}
 8001718:	20008150 	.word	0x20008150

0800171c <rol>:

void rol() {
 800171c:	b508      	push	{r3, lr}
    value = getvalue();
 800171e:	f7ff f9c3 	bl	8000aa8 <getvalue>
 8001722:	4b12      	ldr	r3, [pc, #72]	; (800176c <rol+0x50>)
    result = (value << 1) | (cpustatus & FLAG_CARRY);
 8001724:	4912      	ldr	r1, [pc, #72]	; (8001770 <rol+0x54>)
    value = getvalue();
 8001726:	8018      	strh	r0, [r3, #0]
    result = (value << 1) | (cpustatus & FLAG_CARRY);
 8001728:	780b      	ldrb	r3, [r1, #0]
 800172a:	f003 0201 	and.w	r2, r3, #1
 800172e:	ea42 0040 	orr.w	r0, r2, r0, lsl #1
 8001732:	4a10      	ldr	r2, [pc, #64]	; (8001774 <rol+0x58>)
 8001734:	b280      	uxth	r0, r0
   
    carrycalc(result);
 8001736:	f410 4f7f 	tst.w	r0, #65280	; 0xff00
    result = (value << 1) | (cpustatus & FLAG_CARRY);
 800173a:	8010      	strh	r0, [r2, #0]
    zerocalc(result);
 800173c:	b2c2      	uxtb	r2, r0
    carrycalc(result);
 800173e:	bf14      	ite	ne
 8001740:	f043 0301 	orrne.w	r3, r3, #1
 8001744:	f003 03fe 	andeq.w	r3, r3, #254	; 0xfe
    zerocalc(result);
 8001748:	b162      	cbz	r2, 8001764 <rol+0x48>
 800174a:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(result);
 800174e:	0602      	lsls	r2, r0, #24
 8001750:	bf4c      	ite	mi
 8001752:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
 8001756:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
 800175a:	700b      	strb	r3, [r1, #0]
   
    putvalue(result);
}
 800175c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    putvalue(result);
 8001760:	f7ff bb42 	b.w	8000de8 <putvalue>
    zerocalc(result);
 8001764:	f043 0302 	orr.w	r3, r3, #2
 8001768:	e7f1      	b.n	800174e <rol+0x32>
 800176a:	bf00      	nop
 800176c:	20008164 	.word	0x20008164
 8001770:	20008150 	.word	0x20008150
 8001774:	20008160 	.word	0x20008160

08001778 <ror>:

void ror() {
 8001778:	b510      	push	{r4, lr}
    value = getvalue();
 800177a:	f7ff f995 	bl	8000aa8 <getvalue>
 800177e:	4601      	mov	r1, r0
 8001780:	4b11      	ldr	r3, [pc, #68]	; (80017c8 <ror+0x50>)
    result = (value >> 1) | ((cpustatus & FLAG_CARRY) << 7);
 8001782:	4c12      	ldr	r4, [pc, #72]	; (80017cc <ror+0x54>)
    value = getvalue();
 8001784:	8018      	strh	r0, [r3, #0]
    result = (value >> 1) | ((cpustatus & FLAG_CARRY) << 7);
 8001786:	7823      	ldrb	r3, [r4, #0]
   
    if (value & 1) setcarry();
 8001788:	07c9      	lsls	r1, r1, #31
    result = (value >> 1) | ((cpustatus & FLAG_CARRY) << 7);
 800178a:	ea4f 12c3 	mov.w	r2, r3, lsl #7
 800178e:	b2d2      	uxtb	r2, r2
 8001790:	ea42 0050 	orr.w	r0, r2, r0, lsr #1
 8001794:	4a0e      	ldr	r2, [pc, #56]	; (80017d0 <ror+0x58>)
    if (value & 1) setcarry();
 8001796:	bf48      	it	mi
 8001798:	f043 0301 	orrmi.w	r3, r3, #1
    result = (value >> 1) | ((cpustatus & FLAG_CARRY) << 7);
 800179c:	8010      	strh	r0, [r2, #0]
        else clearcarry();
    zerocalc(result);
 800179e:	b2c2      	uxtb	r2, r0
        else clearcarry();
 80017a0:	bf58      	it	pl
 80017a2:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    zerocalc(result);
 80017a6:	b162      	cbz	r2, 80017c2 <ror+0x4a>
 80017a8:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(result);
 80017ac:	0602      	lsls	r2, r0, #24
 80017ae:	bf4c      	ite	mi
 80017b0:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
 80017b4:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
 80017b8:	7023      	strb	r3, [r4, #0]
   
    putvalue(result);
}
 80017ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    putvalue(result);
 80017be:	f7ff bb13 	b.w	8000de8 <putvalue>
    zerocalc(result);
 80017c2:	f043 0302 	orr.w	r3, r3, #2
 80017c6:	e7f1      	b.n	80017ac <ror+0x34>
 80017c8:	20008164 	.word	0x20008164
 80017cc:	20008150 	.word	0x20008150
 80017d0:	20008160 	.word	0x20008160

080017d4 <rti>:

void rti() {
 80017d4:	b508      	push	{r3, lr}
    cpustatus = pull8();
 80017d6:	f7ff f9c9 	bl	8000b6c <pull8>
 80017da:	4b04      	ldr	r3, [pc, #16]	; (80017ec <rti+0x18>)
 80017dc:	7018      	strb	r0, [r3, #0]
    value = pull16();
 80017de:	f7ff f9ab 	bl	8000b38 <pull16>
 80017e2:	4b03      	ldr	r3, [pc, #12]	; (80017f0 <rti+0x1c>)
 80017e4:	8018      	strh	r0, [r3, #0]
    pc = value;
 80017e6:	4b03      	ldr	r3, [pc, #12]	; (80017f4 <rti+0x20>)
 80017e8:	8018      	strh	r0, [r3, #0]
}
 80017ea:	bd08      	pop	{r3, pc}
 80017ec:	20008150 	.word	0x20008150
 80017f0:	20008164 	.word	0x20008164
 80017f4:	2000815c 	.word	0x2000815c

080017f8 <rts>:

void rts() {
 80017f8:	b508      	push	{r3, lr}
    value = pull16();
 80017fa:	f7ff f99d 	bl	8000b38 <pull16>
 80017fe:	4b03      	ldr	r3, [pc, #12]	; (800180c <rts+0x14>)
 8001800:	8018      	strh	r0, [r3, #0]
    pc = value + 1;
 8001802:	4b03      	ldr	r3, [pc, #12]	; (8001810 <rts+0x18>)
 8001804:	3001      	adds	r0, #1
 8001806:	8018      	strh	r0, [r3, #0]
}
 8001808:	bd08      	pop	{r3, pc}
 800180a:	bf00      	nop
 800180c:	20008164 	.word	0x20008164
 8001810:	2000815c 	.word	0x2000815c

08001814 <sbc>:

void sbc() {
 8001814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    value = getvalue() ^ 0x00FF;
 8001816:	f7ff f947 	bl	8000aa8 <getvalue>
    result = (uint16_t)a + value + (uint16_t)(cpustatus & FLAG_CARRY);
 800181a:	4d27      	ldr	r5, [pc, #156]	; (80018b8 <sbc+0xa4>)
    value = getvalue() ^ 0x00FF;
 800181c:	4b27      	ldr	r3, [pc, #156]	; (80018bc <sbc+0xa8>)
 800181e:	f080 00ff 	eor.w	r0, r0, #255	; 0xff
 8001822:	b280      	uxth	r0, r0
    result = (uint16_t)a + value + (uint16_t)(cpustatus & FLAG_CARRY);
 8001824:	4c26      	ldr	r4, [pc, #152]	; (80018c0 <sbc+0xac>)
    value = getvalue() ^ 0x00FF;
 8001826:	8018      	strh	r0, [r3, #0]
    result = (uint16_t)a + value + (uint16_t)(cpustatus & FLAG_CARRY);
 8001828:	782b      	ldrb	r3, [r5, #0]
 800182a:	7821      	ldrb	r1, [r4, #0]
 800182c:	f003 0201 	and.w	r2, r3, #1
 8001830:	440a      	add	r2, r1
 8001832:	4e24      	ldr	r6, [pc, #144]	; (80018c4 <sbc+0xb0>)
 8001834:	4402      	add	r2, r0
 8001836:	b292      	uxth	r2, r2
   
    carrycalc(result);
 8001838:	f412 4f7f 	tst.w	r2, #65280	; 0xff00
    result = (uint16_t)a + value + (uint16_t)(cpustatus & FLAG_CARRY);
 800183c:	8032      	strh	r2, [r6, #0]
    zerocalc(result);
 800183e:	b2d6      	uxtb	r6, r2
    carrycalc(result);
 8001840:	bf14      	ite	ne
 8001842:	f043 0301 	orrne.w	r3, r3, #1
 8001846:	f003 03fe 	andeq.w	r3, r3, #254	; 0xfe
    zerocalc(result);
 800184a:	b1c6      	cbz	r6, 800187e <sbc+0x6a>
 800184c:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    overflowcalc(result, a, value);
 8001850:	ea81 0602 	eor.w	r6, r1, r2
 8001854:	ea80 0702 	eor.w	r7, r0, r2
 8001858:	4630      	mov	r0, r6
 800185a:	4038      	ands	r0, r7
 800185c:	0607      	lsls	r7, r0, #24
 800185e:	bf4c      	ite	mi
 8001860:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 8001864:	f003 03bf 	andpl.w	r3, r3, #191	; 0xbf
    signcalc(result);
 8001868:	0616      	lsls	r6, r2, #24
 800186a:	bf4c      	ite	mi
 800186c:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
 8001870:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f

    #ifndef NES_CPU
    if (cpustatus & FLAG_DECIMAL) {
 8001874:	0718      	lsls	r0, r3, #28
 8001876:	d405      	bmi.n	8001884 <sbc+0x70>
 8001878:	702b      	strb	r3, [r5, #0]
        
        clockticks6502++;
    }
    #endif
   
    saveaccum(result);
 800187a:	7022      	strb	r2, [r4, #0]
}
 800187c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    zerocalc(result);
 800187e:	f043 0302 	orr.w	r3, r3, #2
 8001882:	e7e5      	b.n	8001850 <sbc+0x3c>
        a -= 0x66;
 8001884:	f1a1 0066 	sub.w	r0, r1, #102	; 0x66
 8001888:	b2c6      	uxtb	r6, r0
        if ((a & 0x0F) > 0x09) {
 800188a:	f000 000f 	and.w	r0, r0, #15
 800188e:	2809      	cmp	r0, #9
            a += 0x06;
 8001890:	bf8a      	itet	hi
 8001892:	3960      	subhi	r1, #96	; 0x60
        a -= 0x66;
 8001894:	7026      	strbls	r6, [r4, #0]
            a += 0x06;
 8001896:	7021      	strbhi	r1, [r4, #0]
        if ((a & 0xF0) > 0x90) {
 8001898:	7821      	ldrb	r1, [r4, #0]
        clearcarry();
 800189a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
        if ((a & 0xF0) > 0x90) {
 800189e:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
 80018a2:	2990      	cmp	r1, #144	; 0x90
        clockticks6502++;
 80018a4:	4908      	ldr	r1, [pc, #32]	; (80018c8 <sbc+0xb4>)
        clearcarry();
 80018a6:	702b      	strb	r3, [r5, #0]
            setcarry();
 80018a8:	bf84      	itt	hi
 80018aa:	f043 0301 	orrhi.w	r3, r3, #1
 80018ae:	702b      	strbhi	r3, [r5, #0]
        clockticks6502++;
 80018b0:	680b      	ldr	r3, [r1, #0]
 80018b2:	3301      	adds	r3, #1
 80018b4:	600b      	str	r3, [r1, #0]
 80018b6:	e7e0      	b.n	800187a <sbc+0x66>
 80018b8:	20008150 	.word	0x20008150
 80018bc:	20008164 	.word	0x20008164
 80018c0:	20008149 	.word	0x20008149
 80018c4:	20008160 	.word	0x20008160
 80018c8:	2000814c 	.word	0x2000814c

080018cc <sec>:

void sec() {
    setcarry();
 80018cc:	4a02      	ldr	r2, [pc, #8]	; (80018d8 <sec+0xc>)
 80018ce:	7813      	ldrb	r3, [r2, #0]
 80018d0:	f043 0301 	orr.w	r3, r3, #1
 80018d4:	7013      	strb	r3, [r2, #0]
}
 80018d6:	4770      	bx	lr
 80018d8:	20008150 	.word	0x20008150

080018dc <sed>:

void sed() {
    setdecimal();
 80018dc:	4a02      	ldr	r2, [pc, #8]	; (80018e8 <sed+0xc>)
 80018de:	7813      	ldrb	r3, [r2, #0]
 80018e0:	f043 0308 	orr.w	r3, r3, #8
 80018e4:	7013      	strb	r3, [r2, #0]
}
 80018e6:	4770      	bx	lr
 80018e8:	20008150 	.word	0x20008150

080018ec <sei>:

void sei() {
    setinterrupt();
 80018ec:	4a02      	ldr	r2, [pc, #8]	; (80018f8 <sei+0xc>)
 80018ee:	7813      	ldrb	r3, [r2, #0]
 80018f0:	f043 0304 	orr.w	r3, r3, #4
 80018f4:	7013      	strb	r3, [r2, #0]
}
 80018f6:	4770      	bx	lr
 80018f8:	20008150 	.word	0x20008150

080018fc <sta>:

void sta() {
    putvalue(a);
 80018fc:	4b01      	ldr	r3, [pc, #4]	; (8001904 <sta+0x8>)
 80018fe:	7818      	ldrb	r0, [r3, #0]
 8001900:	f7ff ba72 	b.w	8000de8 <putvalue>
 8001904:	20008149 	.word	0x20008149

08001908 <stx>:
}

void stx() {
    putvalue(x);
 8001908:	4b01      	ldr	r3, [pc, #4]	; (8001910 <stx+0x8>)
 800190a:	7818      	ldrb	r0, [r3, #0]
 800190c:	f7ff ba6c 	b.w	8000de8 <putvalue>
 8001910:	20008166 	.word	0x20008166

08001914 <sty>:
}

void sty() {
    putvalue(y);
 8001914:	4b01      	ldr	r3, [pc, #4]	; (800191c <sty+0x8>)
 8001916:	7818      	ldrb	r0, [r3, #0]
 8001918:	f7ff ba66 	b.w	8000de8 <putvalue>
 800191c:	20008167 	.word	0x20008167

08001920 <tax>:
}

void tax() {
    x = a;
 8001920:	4b0a      	ldr	r3, [pc, #40]	; (800194c <tax+0x2c>)
   
    zerocalc(x);
 8001922:	4a0b      	ldr	r2, [pc, #44]	; (8001950 <tax+0x30>)
    x = a;
 8001924:	7819      	ldrb	r1, [r3, #0]
 8001926:	4b0b      	ldr	r3, [pc, #44]	; (8001954 <tax+0x34>)
 8001928:	7019      	strb	r1, [r3, #0]
    zerocalc(x);
 800192a:	7813      	ldrb	r3, [r2, #0]
 800192c:	b131      	cbz	r1, 800193c <tax+0x1c>
 800192e:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(x);
 8001932:	0609      	lsls	r1, r1, #24
 8001934:	7013      	strb	r3, [r2, #0]
 8001936:	d504      	bpl.n	8001942 <tax+0x22>
 8001938:	f7ff b8d2 	b.w	8000ae0 <dex.part.0>
    zerocalc(x);
 800193c:	f043 0302 	orr.w	r3, r3, #2
 8001940:	e7f7      	b.n	8001932 <tax+0x12>
    signcalc(x);
 8001942:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001946:	7013      	strb	r3, [r2, #0]
}
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	20008149 	.word	0x20008149
 8001950:	20008150 	.word	0x20008150
 8001954:	20008166 	.word	0x20008166

08001958 <tay>:

void tay() {
    y = a;
 8001958:	4b0a      	ldr	r3, [pc, #40]	; (8001984 <tay+0x2c>)
   
    zerocalc(y);
 800195a:	4a0b      	ldr	r2, [pc, #44]	; (8001988 <tay+0x30>)
    y = a;
 800195c:	7819      	ldrb	r1, [r3, #0]
 800195e:	4b0b      	ldr	r3, [pc, #44]	; (800198c <tay+0x34>)
 8001960:	7019      	strb	r1, [r3, #0]
    zerocalc(y);
 8001962:	7813      	ldrb	r3, [r2, #0]
 8001964:	b131      	cbz	r1, 8001974 <tay+0x1c>
 8001966:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(y);
 800196a:	0609      	lsls	r1, r1, #24
 800196c:	7013      	strb	r3, [r2, #0]
 800196e:	d504      	bpl.n	800197a <tay+0x22>
 8001970:	f7ff b8b6 	b.w	8000ae0 <dex.part.0>
    zerocalc(y);
 8001974:	f043 0302 	orr.w	r3, r3, #2
 8001978:	e7f7      	b.n	800196a <tay+0x12>
    signcalc(y);
 800197a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800197e:	7013      	strb	r3, [r2, #0]
}
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	20008149 	.word	0x20008149
 8001988:	20008150 	.word	0x20008150
 800198c:	20008167 	.word	0x20008167

08001990 <tsx>:

void tsx() {
    x = sp;
 8001990:	4b0a      	ldr	r3, [pc, #40]	; (80019bc <tsx+0x2c>)
   
    zerocalc(x);
 8001992:	4a0b      	ldr	r2, [pc, #44]	; (80019c0 <tsx+0x30>)
    x = sp;
 8001994:	7819      	ldrb	r1, [r3, #0]
 8001996:	4b0b      	ldr	r3, [pc, #44]	; (80019c4 <tsx+0x34>)
 8001998:	7019      	strb	r1, [r3, #0]
    zerocalc(x);
 800199a:	7813      	ldrb	r3, [r2, #0]
 800199c:	b131      	cbz	r1, 80019ac <tsx+0x1c>
 800199e:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(x);
 80019a2:	0609      	lsls	r1, r1, #24
 80019a4:	7013      	strb	r3, [r2, #0]
 80019a6:	d504      	bpl.n	80019b2 <tsx+0x22>
 80019a8:	f7ff b89a 	b.w	8000ae0 <dex.part.0>
    zerocalc(x);
 80019ac:	f043 0302 	orr.w	r3, r3, #2
 80019b0:	e7f7      	b.n	80019a2 <tsx+0x12>
    signcalc(x);
 80019b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80019b6:	7013      	strb	r3, [r2, #0]
}
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	20008162 	.word	0x20008162
 80019c0:	20008150 	.word	0x20008150
 80019c4:	20008166 	.word	0x20008166

080019c8 <txa>:

void txa() {
    a = x;
 80019c8:	4b0a      	ldr	r3, [pc, #40]	; (80019f4 <txa+0x2c>)
   
    zerocalc(a);
 80019ca:	4a0b      	ldr	r2, [pc, #44]	; (80019f8 <txa+0x30>)
    a = x;
 80019cc:	7819      	ldrb	r1, [r3, #0]
 80019ce:	4b0b      	ldr	r3, [pc, #44]	; (80019fc <txa+0x34>)
 80019d0:	7019      	strb	r1, [r3, #0]
    zerocalc(a);
 80019d2:	7813      	ldrb	r3, [r2, #0]
 80019d4:	b131      	cbz	r1, 80019e4 <txa+0x1c>
 80019d6:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(a);
 80019da:	0609      	lsls	r1, r1, #24
 80019dc:	7013      	strb	r3, [r2, #0]
 80019de:	d504      	bpl.n	80019ea <txa+0x22>
 80019e0:	f7ff b87e 	b.w	8000ae0 <dex.part.0>
    zerocalc(a);
 80019e4:	f043 0302 	orr.w	r3, r3, #2
 80019e8:	e7f7      	b.n	80019da <txa+0x12>
    signcalc(a);
 80019ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80019ee:	7013      	strb	r3, [r2, #0]
}
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	20008166 	.word	0x20008166
 80019f8:	20008150 	.word	0x20008150
 80019fc:	20008149 	.word	0x20008149

08001a00 <txs>:

void txs() {
    sp = x;
 8001a00:	4b02      	ldr	r3, [pc, #8]	; (8001a0c <txs+0xc>)
 8001a02:	781a      	ldrb	r2, [r3, #0]
 8001a04:	4b02      	ldr	r3, [pc, #8]	; (8001a10 <txs+0x10>)
 8001a06:	701a      	strb	r2, [r3, #0]
}
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	20008166 	.word	0x20008166
 8001a10:	20008162 	.word	0x20008162

08001a14 <tya>:

void tya() {
    a = y;
 8001a14:	4b0a      	ldr	r3, [pc, #40]	; (8001a40 <tya+0x2c>)
   
    zerocalc(a);
 8001a16:	4a0b      	ldr	r2, [pc, #44]	; (8001a44 <tya+0x30>)
    a = y;
 8001a18:	7819      	ldrb	r1, [r3, #0]
 8001a1a:	4b0b      	ldr	r3, [pc, #44]	; (8001a48 <tya+0x34>)
 8001a1c:	7019      	strb	r1, [r3, #0]
    zerocalc(a);
 8001a1e:	7813      	ldrb	r3, [r2, #0]
 8001a20:	b131      	cbz	r1, 8001a30 <tya+0x1c>
 8001a22:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(a);
 8001a26:	0609      	lsls	r1, r1, #24
 8001a28:	7013      	strb	r3, [r2, #0]
 8001a2a:	d504      	bpl.n	8001a36 <tya+0x22>
 8001a2c:	f7ff b858 	b.w	8000ae0 <dex.part.0>
    zerocalc(a);
 8001a30:	f043 0302 	orr.w	r3, r3, #2
 8001a34:	e7f7      	b.n	8001a26 <tya+0x12>
    signcalc(a);
 8001a36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001a3a:	7013      	strb	r3, [r2, #0]
}
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	20008167 	.word	0x20008167
 8001a44:	20008150 	.word	0x20008150
 8001a48:	20008149 	.word	0x20008149

08001a4c <exec6502>:
/* E */      2,    6,    2,    8,    3,    3,    5,    5,    2,    2,    2,    2,    4,    4,    6,    6,  /* E */
/* F */      2,    5,    2,    8,    4,    4,    6,    6,    2,    4,    2,    7,    4,    4,    7,    7   /* F */
};
#endif

void exec6502(int32_t tickcount) {
 8001a4c:	b570      	push	{r4, r5, r6, lr}
 8001a4e:	4604      	mov	r4, r0
   
  while (clockgoal6502 > 0) {
#else
  while (tickcount--) {
#endif
    opcode = read6502(pc++);
 8001a50:	4e01      	ldr	r6, [pc, #4]	; (8001a58 <exec6502+0xc>)
    cpustatus |= FLAG_CONSTANT;

    useaccum = 0;
 8001a52:	4d02      	ldr	r5, [pc, #8]	; (8001a5c <exec6502+0x10>)
  while (tickcount--) {
 8001a54:	b924      	cbnz	r4, 8001a60 <exec6502+0x14>
#ifdef USE_TIMING
      clockgoal6502 -= (int32_t)ticktable[opcode];
#endif
      instructions++;
  }
}
 8001a56:	bd70      	pop	{r4, r5, r6, pc}
 8001a58:	2000815c 	.word	0x2000815c
 8001a5c:	20008163 	.word	0x20008163
    opcode = read6502(pc++);
 8001a60:	8830      	ldrh	r0, [r6, #0]
 8001a62:	1c43      	adds	r3, r0, #1
 8001a64:	8033      	strh	r3, [r6, #0]
 8001a66:	f7fe feed 	bl	8000844 <read6502>
 8001a6a:	4b05      	ldr	r3, [pc, #20]	; (8001a80 <exec6502+0x34>)
    cpustatus |= FLAG_CONSTANT;
 8001a6c:	4a05      	ldr	r2, [pc, #20]	; (8001a84 <exec6502+0x38>)
    opcode = read6502(pc++);
 8001a6e:	7018      	strb	r0, [r3, #0]
    cpustatus |= FLAG_CONSTANT;
 8001a70:	7813      	ldrb	r3, [r2, #0]
 8001a72:	f043 0320 	orr.w	r3, r3, #32
 8001a76:	7013      	strb	r3, [r2, #0]
    useaccum = 0;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	702b      	strb	r3, [r5, #0]
 8001a7c:	e004      	b.n	8001a88 <exec6502+0x3c>
 8001a7e:	bf00      	nop
 8001a80:	2000815a 	.word	0x2000815a
 8001a84:	20008150 	.word	0x20008150
		switch (opcode) {
 8001a88:	28fe      	cmp	r0, #254	; 0xfe
 8001a8a:	f200 8103 	bhi.w	8001c94 <exec6502+0x248>
 8001a8e:	e8df f010 	tbh	[pc, r0, lsl #1]
 8001a92:	00ff      	.short	0x00ff
 8001a94:	01010107 	.word	0x01010107
 8001a98:	01010101 	.word	0x01010101
 8001a9c:	0111010c 	.word	0x0111010c
 8001aa0:	01160101 	.word	0x01160101
 8001aa4:	011e0119 	.word	0x011e0119
 8001aa8:	01010101 	.word	0x01010101
 8001aac:	01280123 	.word	0x01280123
 8001ab0:	012d0101 	.word	0x012d0101
 8001ab4:	01010132 	.word	0x01010132
 8001ab8:	01010101 	.word	0x01010101
 8001abc:	013c0137 	.word	0x013c0137
 8001ac0:	01410101 	.word	0x01410101
 8001ac4:	01010144 	.word	0x01010144
 8001ac8:	01010101 	.word	0x01010101
 8001acc:	014e0149 	.word	0x014e0149
 8001ad0:	01530101 	.word	0x01530101
 8001ad4:	01010158 	.word	0x01010158
 8001ad8:	015d0101 	.word	0x015d0101
 8001adc:	01670162 	.word	0x01670162
 8001ae0:	016c0101 	.word	0x016c0101
 8001ae4:	0174016f 	.word	0x0174016f
 8001ae8:	01790101 	.word	0x01790101
 8001aec:	0183017e 	.word	0x0183017e
 8001af0:	01880101 	.word	0x01880101
 8001af4:	0101018d 	.word	0x0101018d
 8001af8:	01010101 	.word	0x01010101
 8001afc:	01970192 	.word	0x01970192
 8001b00:	019c0101 	.word	0x019c0101
 8001b04:	0101019f 	.word	0x0101019f
 8001b08:	01010101 	.word	0x01010101
 8001b0c:	01a901a4 	.word	0x01a901a4
 8001b10:	01ae0101 	.word	0x01ae0101
 8001b14:	010101b1 	.word	0x010101b1
 8001b18:	01010101 	.word	0x01010101
 8001b1c:	01bb01b6 	.word	0x01bb01b6
 8001b20:	01c00101 	.word	0x01c00101
 8001b24:	01c801c3 	.word	0x01c801c3
 8001b28:	01cd0101 	.word	0x01cd0101
 8001b2c:	01d701d2 	.word	0x01d701d2
 8001b30:	01dc0101 	.word	0x01dc0101
 8001b34:	010101e1 	.word	0x010101e1
 8001b38:	01010101 	.word	0x01010101
 8001b3c:	01eb01e6 	.word	0x01eb01e6
 8001b40:	01f00101 	.word	0x01f00101
 8001b44:	010101f3 	.word	0x010101f3
 8001b48:	01010101 	.word	0x01010101
 8001b4c:	01fd01f8 	.word	0x01fd01f8
 8001b50:	02020101 	.word	0x02020101
 8001b54:	01010205 	.word	0x01010205
 8001b58:	01010101 	.word	0x01010101
 8001b5c:	020f020a 	.word	0x020f020a
 8001b60:	02140101 	.word	0x02140101
 8001b64:	021c0217 	.word	0x021c0217
 8001b68:	02210101 	.word	0x02210101
 8001b6c:	022b0226 	.word	0x022b0226
 8001b70:	02300101 	.word	0x02300101
 8001b74:	01010235 	.word	0x01010235
 8001b78:	01010101 	.word	0x01010101
 8001b7c:	023f023a 	.word	0x023f023a
 8001b80:	02440101 	.word	0x02440101
 8001b84:	01010247 	.word	0x01010247
 8001b88:	01010101 	.word	0x01010101
 8001b8c:	0251024c 	.word	0x0251024c
 8001b90:	01010101 	.word	0x01010101
 8001b94:	01010256 	.word	0x01010256
 8001b98:	025b0101 	.word	0x025b0101
 8001b9c:	02650260 	.word	0x02650260
 8001ba0:	026a0101 	.word	0x026a0101
 8001ba4:	026d0101 	.word	0x026d0101
 8001ba8:	02700101 	.word	0x02700101
 8001bac:	027a0275 	.word	0x027a0275
 8001bb0:	027f0101 	.word	0x027f0101
 8001bb4:	01010284 	.word	0x01010284
 8001bb8:	02890101 	.word	0x02890101
 8001bbc:	0293028e 	.word	0x0293028e
 8001bc0:	02980101 	.word	0x02980101
 8001bc4:	02a3029b 	.word	0x02a3029b
 8001bc8:	01010101 	.word	0x01010101
 8001bcc:	010102a6 	.word	0x010102a6
 8001bd0:	02ab0101 	.word	0x02ab0101
 8001bd4:	02b502b0 	.word	0x02b502b0
 8001bd8:	02ba0101 	.word	0x02ba0101
 8001bdc:	02c402bf 	.word	0x02c402bf
 8001be0:	02c90101 	.word	0x02c90101
 8001be4:	02d102cc 	.word	0x02d102cc
 8001be8:	02d40101 	.word	0x02d40101
 8001bec:	02de02d9 	.word	0x02de02d9
 8001bf0:	02e30101 	.word	0x02e30101
 8001bf4:	010102e8 	.word	0x010102e8
 8001bf8:	02ed0101 	.word	0x02ed0101
 8001bfc:	02f702f2 	.word	0x02f702f2
 8001c00:	02fc0101 	.word	0x02fc0101
 8001c04:	030402ff 	.word	0x030402ff
 8001c08:	03070101 	.word	0x03070101
 8001c0c:	0311030c 	.word	0x0311030c
 8001c10:	03160101 	.word	0x03160101
 8001c14:	0101031b 	.word	0x0101031b
 8001c18:	03200101 	.word	0x03200101
 8001c1c:	032a0325 	.word	0x032a0325
 8001c20:	032f0101 	.word	0x032f0101
 8001c24:	03370332 	.word	0x03370332
 8001c28:	033a0101 	.word	0x033a0101
 8001c2c:	0344033f 	.word	0x0344033f
 8001c30:	03490101 	.word	0x03490101
 8001c34:	0101034e 	.word	0x0101034e
 8001c38:	01010101 	.word	0x01010101
 8001c3c:	03580353 	.word	0x03580353
 8001c40:	035d0101 	.word	0x035d0101
 8001c44:	01010360 	.word	0x01010360
 8001c48:	01010101 	.word	0x01010101
 8001c4c:	036a0365 	.word	0x036a0365
 8001c50:	036f0101 	.word	0x036f0101
 8001c54:	01010374 	.word	0x01010374
 8001c58:	03790101 	.word	0x03790101
 8001c5c:	0383037e 	.word	0x0383037e
 8001c60:	03880101 	.word	0x03880101
 8001c64:	0101038b 	.word	0x0101038b
 8001c68:	0390038b 	.word	0x0390038b
 8001c6c:	039a0395 	.word	0x039a0395
 8001c70:	039f0101 	.word	0x039f0101
 8001c74:	010103a4 	.word	0x010103a4
 8001c78:	01010101 	.word	0x01010101
 8001c7c:	03ae03a9 	.word	0x03ae03a9
 8001c80:	03b30101 	.word	0x03b30101
 8001c84:	010103b6 	.word	0x010103b6
 8001c88:	01010101 	.word	0x01010101
 8001c8c:	03c003bb 	.word	0x03c003bb
			brk();
 8001c90:	f7ff fa56 	bl	8001140 <brk>
      instructions++;
 8001c94:	4acf      	ldr	r2, [pc, #828]	; (8001fd4 <exec6502+0x588>)
 8001c96:	3c01      	subs	r4, #1
 8001c98:	6813      	ldr	r3, [r2, #0]
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	6013      	str	r3, [r2, #0]
 8001c9e:	e6d9      	b.n	8001a54 <exec6502+0x8>
			indx();
 8001ca0:	f7ff f866 	bl	8000d70 <indx>
			ora();
 8001ca4:	f7ff fce0 	bl	8001668 <ora>
			break;
 8001ca8:	e7f4      	b.n	8001c94 <exec6502+0x248>
			zp();
 8001caa:	f7fe ffa1 	bl	8000bf0 <zp>
			ora();
 8001cae:	f7ff fcdb 	bl	8001668 <ora>
			break;
 8001cb2:	e7ef      	b.n	8001c94 <exec6502+0x248>
			zp();
 8001cb4:	f7fe ff9c 	bl	8000bf0 <zp>
			asl();
 8001cb8:	f7ff f926 	bl	8000f08 <asl>
			break;
 8001cbc:	e7ea      	b.n	8001c94 <exec6502+0x248>
			php();
 8001cbe:	f7ff fcff 	bl	80016c0 <php>
			break;
 8001cc2:	e7e7      	b.n	8001c94 <exec6502+0x248>
			imm();
 8001cc4:	f7fe ff88 	bl	8000bd8 <imm>
			ora();
 8001cc8:	f7ff fcce 	bl	8001668 <ora>
			break;
 8001ccc:	e7e2      	b.n	8001c94 <exec6502+0x248>
  useaccum = 1;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	702b      	strb	r3, [r5, #0]
			asl();
 8001cd2:	f7ff f919 	bl	8000f08 <asl>
			break;
 8001cd6:	e7dd      	b.n	8001c94 <exec6502+0x248>
			abso();
 8001cd8:	f7fe ffd4 	bl	8000c84 <abso>
			ora();
 8001cdc:	f7ff fcc4 	bl	8001668 <ora>
			break;
 8001ce0:	e7d8      	b.n	8001c94 <exec6502+0x248>
			abso();
 8001ce2:	f7fe ffcf 	bl	8000c84 <abso>
			asl();
 8001ce6:	f7ff f90f 	bl	8000f08 <asl>
			break;
 8001cea:	e7d3      	b.n	8001c94 <exec6502+0x248>
			rel();
 8001cec:	f7fe ffb6 	bl	8000c5c <rel>
			bpl();
 8001cf0:	f7ff fa02 	bl	80010f8 <bpl>
			break;
 8001cf4:	e7ce      	b.n	8001c94 <exec6502+0x248>
			indy();
 8001cf6:	f7ff f859 	bl	8000dac <indy>
			ora();
 8001cfa:	f7ff fcb5 	bl	8001668 <ora>
			break;
 8001cfe:	e7c9      	b.n	8001c94 <exec6502+0x248>
			zpx();
 8001d00:	f7fe ff84 	bl	8000c0c <zpx>
			ora();
 8001d04:	f7ff fcb0 	bl	8001668 <ora>
			break;
 8001d08:	e7c4      	b.n	8001c94 <exec6502+0x248>
			zpx();
 8001d0a:	f7fe ff7f 	bl	8000c0c <zpx>
			asl();
 8001d0e:	f7ff f8fb 	bl	8000f08 <asl>
			break;
 8001d12:	e7bf      	b.n	8001c94 <exec6502+0x248>
			clc();
 8001d14:	f7ff fa7c 	bl	8001210 <clc>
			break;
 8001d18:	e7bc      	b.n	8001c94 <exec6502+0x248>
			absy();
 8001d1a:	f7fe ffe7 	bl	8000cec <absy>
			ora();
 8001d1e:	f7ff fca3 	bl	8001668 <ora>
			break;
 8001d22:	e7b7      	b.n	8001c94 <exec6502+0x248>
			absx();
 8001d24:	f7fe ffc6 	bl	8000cb4 <absx>
			ora();
 8001d28:	f7ff fc9e 	bl	8001668 <ora>
			break;
 8001d2c:	e7b2      	b.n	8001c94 <exec6502+0x248>
			absx();
 8001d2e:	f7fe ffc1 	bl	8000cb4 <absx>
			asl();
 8001d32:	f7ff f8e9 	bl	8000f08 <asl>
			break;
 8001d36:	e7ad      	b.n	8001c94 <exec6502+0x248>
			abso();
 8001d38:	f7fe ffa4 	bl	8000c84 <abso>
			jsr();
 8001d3c:	f7ff fbf2 	bl	8001524 <jsr>
			break;
 8001d40:	e7a8      	b.n	8001c94 <exec6502+0x248>
			indx();
 8001d42:	f7ff f815 	bl	8000d70 <indx>
			op_and();
 8001d46:	f7ff f8b7 	bl	8000eb8 <op_and>
			break;
 8001d4a:	e7a3      	b.n	8001c94 <exec6502+0x248>
			zp();
 8001d4c:	f7fe ff50 	bl	8000bf0 <zp>
			op_bit();
 8001d50:	f7ff f96a 	bl	8001028 <op_bit>
			break;
 8001d54:	e79e      	b.n	8001c94 <exec6502+0x248>
			zp();
 8001d56:	f7fe ff4b 	bl	8000bf0 <zp>
			op_and();
 8001d5a:	f7ff f8ad 	bl	8000eb8 <op_and>
			break;
 8001d5e:	e799      	b.n	8001c94 <exec6502+0x248>
			zp();
 8001d60:	f7fe ff46 	bl	8000bf0 <zp>
			rol();
 8001d64:	f7ff fcda 	bl	800171c <rol>
			break;
 8001d68:	e794      	b.n	8001c94 <exec6502+0x248>
			plp();
 8001d6a:	f7ff fccd 	bl	8001708 <plp>
			break;
 8001d6e:	e791      	b.n	8001c94 <exec6502+0x248>
			imm();
 8001d70:	f7fe ff32 	bl	8000bd8 <imm>
			op_and();
 8001d74:	f7ff f8a0 	bl	8000eb8 <op_and>
			break;
 8001d78:	e78c      	b.n	8001c94 <exec6502+0x248>
  useaccum = 1;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	702b      	strb	r3, [r5, #0]
			rol();
 8001d7e:	f7ff fccd 	bl	800171c <rol>
			break;
 8001d82:	e787      	b.n	8001c94 <exec6502+0x248>
			abso();
 8001d84:	f7fe ff7e 	bl	8000c84 <abso>
			op_bit();
 8001d88:	f7ff f94e 	bl	8001028 <op_bit>
			break;
 8001d8c:	e782      	b.n	8001c94 <exec6502+0x248>
			abso();
 8001d8e:	f7fe ff79 	bl	8000c84 <abso>
			op_and();
 8001d92:	f7ff f891 	bl	8000eb8 <op_and>
			break;
 8001d96:	e77d      	b.n	8001c94 <exec6502+0x248>
			abso();
 8001d98:	f7fe ff74 	bl	8000c84 <abso>
			rol();
 8001d9c:	f7ff fcbe 	bl	800171c <rol>
			break;
 8001da0:	e778      	b.n	8001c94 <exec6502+0x248>
			rel();
 8001da2:	f7fe ff5b 	bl	8000c5c <rel>
			bmi();
 8001da6:	f7ff f961 	bl	800106c <bmi>
			break;
 8001daa:	e773      	b.n	8001c94 <exec6502+0x248>
			indy();
 8001dac:	f7fe fffe 	bl	8000dac <indy>
			op_and();
 8001db0:	f7ff f882 	bl	8000eb8 <op_and>
			break;
 8001db4:	e76e      	b.n	8001c94 <exec6502+0x248>
			zpx();
 8001db6:	f7fe ff29 	bl	8000c0c <zpx>
			op_and();
 8001dba:	f7ff f87d 	bl	8000eb8 <op_and>
			break;
 8001dbe:	e769      	b.n	8001c94 <exec6502+0x248>
			zpx();
 8001dc0:	f7fe ff24 	bl	8000c0c <zpx>
			rol();
 8001dc4:	f7ff fcaa 	bl	800171c <rol>
			break;
 8001dc8:	e764      	b.n	8001c94 <exec6502+0x248>
			sec();
 8001dca:	f7ff fd7f 	bl	80018cc <sec>
			break;
 8001dce:	e761      	b.n	8001c94 <exec6502+0x248>
			absy();
 8001dd0:	f7fe ff8c 	bl	8000cec <absy>
			op_and();
 8001dd4:	f7ff f870 	bl	8000eb8 <op_and>
			break;
 8001dd8:	e75c      	b.n	8001c94 <exec6502+0x248>
			absx();
 8001dda:	f7fe ff6b 	bl	8000cb4 <absx>
			op_and();
 8001dde:	f7ff f86b 	bl	8000eb8 <op_and>
			break;
 8001de2:	e757      	b.n	8001c94 <exec6502+0x248>
			absx();
 8001de4:	f7fe ff66 	bl	8000cb4 <absx>
			rol();
 8001de8:	f7ff fc98 	bl	800171c <rol>
			break;
 8001dec:	e752      	b.n	8001c94 <exec6502+0x248>
			rti();
 8001dee:	f7ff fcf1 	bl	80017d4 <rti>
			break;
 8001df2:	e74f      	b.n	8001c94 <exec6502+0x248>
			indx();
 8001df4:	f7fe ffbc 	bl	8000d70 <indx>
			eor();
 8001df8:	f7ff fb0c 	bl	8001414 <eor>
			break;
 8001dfc:	e74a      	b.n	8001c94 <exec6502+0x248>
			zp();
 8001dfe:	f7fe fef7 	bl	8000bf0 <zp>
			eor();
 8001e02:	f7ff fb07 	bl	8001414 <eor>
			break;
 8001e06:	e745      	b.n	8001c94 <exec6502+0x248>
			zp();
 8001e08:	f7fe fef2 	bl	8000bf0 <zp>
			lsr();
 8001e0c:	f7ff fc00 	bl	8001610 <lsr>
			break;
 8001e10:	e740      	b.n	8001c94 <exec6502+0x248>
			pha();
 8001e12:	f7ff fc4f 	bl	80016b4 <pha>
			break;
 8001e16:	e73d      	b.n	8001c94 <exec6502+0x248>
			imm();
 8001e18:	f7fe fede 	bl	8000bd8 <imm>
			eor();
 8001e1c:	f7ff fafa 	bl	8001414 <eor>
			break;
 8001e20:	e738      	b.n	8001c94 <exec6502+0x248>
  useaccum = 1;
 8001e22:	2301      	movs	r3, #1
 8001e24:	702b      	strb	r3, [r5, #0]
			lsr();
 8001e26:	f7ff fbf3 	bl	8001610 <lsr>
			break;
 8001e2a:	e733      	b.n	8001c94 <exec6502+0x248>
			abso();
 8001e2c:	f7fe ff2a 	bl	8000c84 <abso>
			jmp();
 8001e30:	f7ff fb6e 	bl	8001510 <jmp>
			break;
 8001e34:	e72e      	b.n	8001c94 <exec6502+0x248>
			abso();
 8001e36:	f7fe ff25 	bl	8000c84 <abso>
			eor();
 8001e3a:	f7ff faeb 	bl	8001414 <eor>
			break;
 8001e3e:	e729      	b.n	8001c94 <exec6502+0x248>
			abso();
 8001e40:	f7fe ff20 	bl	8000c84 <abso>
			lsr();
 8001e44:	f7ff fbe4 	bl	8001610 <lsr>
			break;
 8001e48:	e724      	b.n	8001c94 <exec6502+0x248>
			rel();
 8001e4a:	f7fe ff07 	bl	8000c5c <rel>
			bvc();
 8001e4e:	f7ff f99b 	bl	8001188 <bvc>
			break;
 8001e52:	e71f      	b.n	8001c94 <exec6502+0x248>
			indy();
 8001e54:	f7fe ffaa 	bl	8000dac <indy>
			eor();
 8001e58:	f7ff fadc 	bl	8001414 <eor>
			break;
 8001e5c:	e71a      	b.n	8001c94 <exec6502+0x248>
			zpx();
 8001e5e:	f7fe fed5 	bl	8000c0c <zpx>
			eor();
 8001e62:	f7ff fad7 	bl	8001414 <eor>
			break;
 8001e66:	e715      	b.n	8001c94 <exec6502+0x248>
			zpx();
 8001e68:	f7fe fed0 	bl	8000c0c <zpx>
			lsr();
 8001e6c:	f7ff fbd0 	bl	8001610 <lsr>
			break;
 8001e70:	e710      	b.n	8001c94 <exec6502+0x248>
			cli();
 8001e72:	f7ff f9dd 	bl	8001230 <cli>
			break;
 8001e76:	e70d      	b.n	8001c94 <exec6502+0x248>
			absy();
 8001e78:	f7fe ff38 	bl	8000cec <absy>
			eor();
 8001e7c:	f7ff faca 	bl	8001414 <eor>
			break;
 8001e80:	e708      	b.n	8001c94 <exec6502+0x248>
			absx();
 8001e82:	f7fe ff17 	bl	8000cb4 <absx>
			eor();
 8001e86:	f7ff fac5 	bl	8001414 <eor>
			break;
 8001e8a:	e703      	b.n	8001c94 <exec6502+0x248>
			absx();
 8001e8c:	f7fe ff12 	bl	8000cb4 <absx>
			lsr();
 8001e90:	f7ff fbbe 	bl	8001610 <lsr>
			break;
 8001e94:	e6fe      	b.n	8001c94 <exec6502+0x248>
			rts();
 8001e96:	f7ff fcaf 	bl	80017f8 <rts>
			break;
 8001e9a:	e6fb      	b.n	8001c94 <exec6502+0x248>
			indx();
 8001e9c:	f7fe ff68 	bl	8000d70 <indx>
			adc();
 8001ea0:	f7fe ffb4 	bl	8000e0c <adc>
			break;
 8001ea4:	e6f6      	b.n	8001c94 <exec6502+0x248>
			zp();
 8001ea6:	f7fe fea3 	bl	8000bf0 <zp>
			adc();
 8001eaa:	f7fe ffaf 	bl	8000e0c <adc>
			break;
 8001eae:	e6f1      	b.n	8001c94 <exec6502+0x248>
			zp();
 8001eb0:	f7fe fe9e 	bl	8000bf0 <zp>
			ror();
 8001eb4:	f7ff fc60 	bl	8001778 <ror>
			break;
 8001eb8:	e6ec      	b.n	8001c94 <exec6502+0x248>
			pla();
 8001eba:	f7ff fc09 	bl	80016d0 <pla>
			break;
 8001ebe:	e6e9      	b.n	8001c94 <exec6502+0x248>
			imm();
 8001ec0:	f7fe fe8a 	bl	8000bd8 <imm>
			adc();
 8001ec4:	f7fe ffa2 	bl	8000e0c <adc>
			break;
 8001ec8:	e6e4      	b.n	8001c94 <exec6502+0x248>
  useaccum = 1;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	702b      	strb	r3, [r5, #0]
			ror();
 8001ece:	f7ff fc53 	bl	8001778 <ror>
			break;
 8001ed2:	e6df      	b.n	8001c94 <exec6502+0x248>
			ind();
 8001ed4:	f7fe ff26 	bl	8000d24 <ind>
			jmp();
 8001ed8:	f7ff fb1a 	bl	8001510 <jmp>
			break;
 8001edc:	e6da      	b.n	8001c94 <exec6502+0x248>
			abso();
 8001ede:	f7fe fed1 	bl	8000c84 <abso>
			adc();
 8001ee2:	f7fe ff93 	bl	8000e0c <adc>
			break;
 8001ee6:	e6d5      	b.n	8001c94 <exec6502+0x248>
			abso();
 8001ee8:	f7fe fecc 	bl	8000c84 <abso>
			ror();
 8001eec:	f7ff fc44 	bl	8001778 <ror>
			break;
 8001ef0:	e6d0      	b.n	8001c94 <exec6502+0x248>
			rel();
 8001ef2:	f7fe feb3 	bl	8000c5c <rel>
			bvs();
 8001ef6:	f7ff f969 	bl	80011cc <bvs>
			break;
 8001efa:	e6cb      	b.n	8001c94 <exec6502+0x248>
			indy();
 8001efc:	f7fe ff56 	bl	8000dac <indy>
			adc();
 8001f00:	f7fe ff84 	bl	8000e0c <adc>
			break;
 8001f04:	e6c6      	b.n	8001c94 <exec6502+0x248>
			zpx();
 8001f06:	f7fe fe81 	bl	8000c0c <zpx>
			adc();
 8001f0a:	f7fe ff7f 	bl	8000e0c <adc>
			break;
 8001f0e:	e6c1      	b.n	8001c94 <exec6502+0x248>
			zpx();
 8001f10:	f7fe fe7c 	bl	8000c0c <zpx>
			ror();
 8001f14:	f7ff fc30 	bl	8001778 <ror>
			break;
 8001f18:	e6bc      	b.n	8001c94 <exec6502+0x248>
			sei();
 8001f1a:	f7ff fce7 	bl	80018ec <sei>
			break;
 8001f1e:	e6b9      	b.n	8001c94 <exec6502+0x248>
			absy();
 8001f20:	f7fe fee4 	bl	8000cec <absy>
			adc();
 8001f24:	f7fe ff72 	bl	8000e0c <adc>
			break;
 8001f28:	e6b4      	b.n	8001c94 <exec6502+0x248>
			absx();
 8001f2a:	f7fe fec3 	bl	8000cb4 <absx>
			adc();
 8001f2e:	f7fe ff6d 	bl	8000e0c <adc>
			break;
 8001f32:	e6af      	b.n	8001c94 <exec6502+0x248>
			absx();
 8001f34:	f7fe febe 	bl	8000cb4 <absx>
			ror();
 8001f38:	f7ff fc1e 	bl	8001778 <ror>
			break;
 8001f3c:	e6aa      	b.n	8001c94 <exec6502+0x248>
			indx();
 8001f3e:	f7fe ff17 	bl	8000d70 <indx>
			sta();
 8001f42:	f7ff fcdb 	bl	80018fc <sta>
			break;
 8001f46:	e6a5      	b.n	8001c94 <exec6502+0x248>
			zp();
 8001f48:	f7fe fe52 	bl	8000bf0 <zp>
			sty();
 8001f4c:	f7ff fce2 	bl	8001914 <sty>
			break;
 8001f50:	e6a0      	b.n	8001c94 <exec6502+0x248>
			zp();
 8001f52:	f7fe fe4d 	bl	8000bf0 <zp>
			sta();
 8001f56:	f7ff fcd1 	bl	80018fc <sta>
			break;
 8001f5a:	e69b      	b.n	8001c94 <exec6502+0x248>
			zp();
 8001f5c:	f7fe fe48 	bl	8000bf0 <zp>
			stx();
 8001f60:	f7ff fcd2 	bl	8001908 <stx>
			break;
 8001f64:	e696      	b.n	8001c94 <exec6502+0x248>
			dey();
 8001f66:	f7ff fa3b 	bl	80013e0 <dey>
			break;
 8001f6a:	e693      	b.n	8001c94 <exec6502+0x248>
			txa();
 8001f6c:	f7ff fd2c 	bl	80019c8 <txa>
			break;
 8001f70:	e690      	b.n	8001c94 <exec6502+0x248>
			abso();
 8001f72:	f7fe fe87 	bl	8000c84 <abso>
			sty();
 8001f76:	f7ff fccd 	bl	8001914 <sty>
			break;
 8001f7a:	e68b      	b.n	8001c94 <exec6502+0x248>
			abso();
 8001f7c:	f7fe fe82 	bl	8000c84 <abso>
			sta();
 8001f80:	f7ff fcbc 	bl	80018fc <sta>
			break;
 8001f84:	e686      	b.n	8001c94 <exec6502+0x248>
			abso();
 8001f86:	f7fe fe7d 	bl	8000c84 <abso>
			stx();
 8001f8a:	f7ff fcbd 	bl	8001908 <stx>
			break;
 8001f8e:	e681      	b.n	8001c94 <exec6502+0x248>
			rel();
 8001f90:	f7fe fe64 	bl	8000c5c <rel>
			bcc();
 8001f94:	f7fe ffe2 	bl	8000f5c <bcc>
			break;
 8001f98:	e67c      	b.n	8001c94 <exec6502+0x248>
			indy();
 8001f9a:	f7fe ff07 	bl	8000dac <indy>
			sta();
 8001f9e:	f7ff fcad 	bl	80018fc <sta>
			break;
 8001fa2:	e677      	b.n	8001c94 <exec6502+0x248>
			zpx();
 8001fa4:	f7fe fe32 	bl	8000c0c <zpx>
			sty();
 8001fa8:	f7ff fcb4 	bl	8001914 <sty>
			break;
 8001fac:	e672      	b.n	8001c94 <exec6502+0x248>
			zpx();
 8001fae:	f7fe fe2d 	bl	8000c0c <zpx>
			sta();
 8001fb2:	f7ff fca3 	bl	80018fc <sta>
			break;
 8001fb6:	e66d      	b.n	8001c94 <exec6502+0x248>
			zpy();
 8001fb8:	f7fe fe3c 	bl	8000c34 <zpy>
			stx();
 8001fbc:	f7ff fca4 	bl	8001908 <stx>
			break;
 8001fc0:	e668      	b.n	8001c94 <exec6502+0x248>
			tya();
 8001fc2:	f7ff fd27 	bl	8001a14 <tya>
			break;
 8001fc6:	e665      	b.n	8001c94 <exec6502+0x248>
			absy();
 8001fc8:	f7fe fe90 	bl	8000cec <absy>
			sta();
 8001fcc:	f7ff fc96 	bl	80018fc <sta>
			break;
 8001fd0:	e660      	b.n	8001c94 <exec6502+0x248>
 8001fd2:	bf00      	nop
 8001fd4:	20008154 	.word	0x20008154
			txs();
 8001fd8:	f7ff fd12 	bl	8001a00 <txs>
			break;
 8001fdc:	e65a      	b.n	8001c94 <exec6502+0x248>
			absx();
 8001fde:	f7fe fe69 	bl	8000cb4 <absx>
			sta();
 8001fe2:	f7ff fc8b 	bl	80018fc <sta>
			break;
 8001fe6:	e655      	b.n	8001c94 <exec6502+0x248>
			imm();
 8001fe8:	f7fe fdf6 	bl	8000bd8 <imm>
			ldy();
 8001fec:	f7ff faee 	bl	80015cc <ldy>
			break;
 8001ff0:	e650      	b.n	8001c94 <exec6502+0x248>
			indx();
 8001ff2:	f7fe febd 	bl	8000d70 <indx>
			lda();
 8001ff6:	f7ff faa5 	bl	8001544 <lda>
			break;
 8001ffa:	e64b      	b.n	8001c94 <exec6502+0x248>
			imm();
 8001ffc:	f7fe fdec 	bl	8000bd8 <imm>
			ldx();
 8002000:	f7ff fac2 	bl	8001588 <ldx>
			break;
 8002004:	e646      	b.n	8001c94 <exec6502+0x248>
			zp();
 8002006:	f7fe fdf3 	bl	8000bf0 <zp>
			ldy();
 800200a:	f7ff fadf 	bl	80015cc <ldy>
			break;
 800200e:	e641      	b.n	8001c94 <exec6502+0x248>
			zp();
 8002010:	f7fe fdee 	bl	8000bf0 <zp>
			lda();
 8002014:	f7ff fa96 	bl	8001544 <lda>
			break;
 8002018:	e63c      	b.n	8001c94 <exec6502+0x248>
			zp();
 800201a:	f7fe fde9 	bl	8000bf0 <zp>
			ldx();
 800201e:	f7ff fab3 	bl	8001588 <ldx>
			break;
 8002022:	e637      	b.n	8001c94 <exec6502+0x248>
			tay();
 8002024:	f7ff fc98 	bl	8001958 <tay>
			break;
 8002028:	e634      	b.n	8001c94 <exec6502+0x248>
			imm();
 800202a:	f7fe fdd5 	bl	8000bd8 <imm>
			lda();
 800202e:	f7ff fa89 	bl	8001544 <lda>
			break;
 8002032:	e62f      	b.n	8001c94 <exec6502+0x248>
			tax();
 8002034:	f7ff fc74 	bl	8001920 <tax>
			break;
 8002038:	e62c      	b.n	8001c94 <exec6502+0x248>
			abso();
 800203a:	f7fe fe23 	bl	8000c84 <abso>
			ldy();
 800203e:	f7ff fac5 	bl	80015cc <ldy>
			break;
 8002042:	e627      	b.n	8001c94 <exec6502+0x248>
			abso();
 8002044:	f7fe fe1e 	bl	8000c84 <abso>
			lda();
 8002048:	f7ff fa7c 	bl	8001544 <lda>
			break;
 800204c:	e622      	b.n	8001c94 <exec6502+0x248>
			abso();
 800204e:	f7fe fe19 	bl	8000c84 <abso>
			ldx();
 8002052:	f7ff fa99 	bl	8001588 <ldx>
			break;
 8002056:	e61d      	b.n	8001c94 <exec6502+0x248>
			rel();
 8002058:	f7fe fe00 	bl	8000c5c <rel>
			bcs();
 800205c:	f7fe ffa0 	bl	8000fa0 <bcs>
			break;
 8002060:	e618      	b.n	8001c94 <exec6502+0x248>
			indy();
 8002062:	f7fe fea3 	bl	8000dac <indy>
			lda();
 8002066:	f7ff fa6d 	bl	8001544 <lda>
			break;
 800206a:	e613      	b.n	8001c94 <exec6502+0x248>
			zpx();
 800206c:	f7fe fdce 	bl	8000c0c <zpx>
			ldy();
 8002070:	f7ff faac 	bl	80015cc <ldy>
			break;
 8002074:	e60e      	b.n	8001c94 <exec6502+0x248>
			zpx();
 8002076:	f7fe fdc9 	bl	8000c0c <zpx>
			lda();
 800207a:	f7ff fa63 	bl	8001544 <lda>
			break;
 800207e:	e609      	b.n	8001c94 <exec6502+0x248>
			zpy();
 8002080:	f7fe fdd8 	bl	8000c34 <zpy>
			ldx();
 8002084:	f7ff fa80 	bl	8001588 <ldx>
			break;
 8002088:	e604      	b.n	8001c94 <exec6502+0x248>
			clv();
 800208a:	f7ff f8d9 	bl	8001240 <clv>
			break;
 800208e:	e601      	b.n	8001c94 <exec6502+0x248>
			absy();
 8002090:	f7fe fe2c 	bl	8000cec <absy>
			lda();
 8002094:	f7ff fa56 	bl	8001544 <lda>
			break;
 8002098:	e5fc      	b.n	8001c94 <exec6502+0x248>
			tsx();
 800209a:	f7ff fc79 	bl	8001990 <tsx>
			break;
 800209e:	e5f9      	b.n	8001c94 <exec6502+0x248>
			absx();
 80020a0:	f7fe fe08 	bl	8000cb4 <absx>
			ldy();
 80020a4:	f7ff fa92 	bl	80015cc <ldy>
			break;
 80020a8:	e5f4      	b.n	8001c94 <exec6502+0x248>
			absx();
 80020aa:	f7fe fe03 	bl	8000cb4 <absx>
			lda();
 80020ae:	f7ff fa49 	bl	8001544 <lda>
			break;
 80020b2:	e5ef      	b.n	8001c94 <exec6502+0x248>
			absy();
 80020b4:	f7fe fe1a 	bl	8000cec <absy>
			ldx();
 80020b8:	f7ff fa66 	bl	8001588 <ldx>
			break;
 80020bc:	e5ea      	b.n	8001c94 <exec6502+0x248>
			imm();
 80020be:	f7fe fd8b 	bl	8000bd8 <imm>
			cpy();
 80020c2:	f7ff f921 	bl	8001308 <cpy>
			break;
 80020c6:	e5e5      	b.n	8001c94 <exec6502+0x248>
			indx();
 80020c8:	f7fe fe52 	bl	8000d70 <indx>
			cmp();
 80020cc:	f7ff f8c0 	bl	8001250 <cmp>
			break;
 80020d0:	e5e0      	b.n	8001c94 <exec6502+0x248>
			zp();
 80020d2:	f7fe fd8d 	bl	8000bf0 <zp>
			cpy();
 80020d6:	f7ff f917 	bl	8001308 <cpy>
			break;
 80020da:	e5db      	b.n	8001c94 <exec6502+0x248>
			zp();
 80020dc:	f7fe fd88 	bl	8000bf0 <zp>
			cmp();
 80020e0:	f7ff f8b6 	bl	8001250 <cmp>
			break;
 80020e4:	e5d6      	b.n	8001c94 <exec6502+0x248>
			zp();
 80020e6:	f7fe fd83 	bl	8000bf0 <zp>
			dec();
 80020ea:	f7ff f93b 	bl	8001364 <dec>
			break;
 80020ee:	e5d1      	b.n	8001c94 <exec6502+0x248>
			iny();
 80020f0:	f7ff f9f4 	bl	80014dc <iny>
			break;
 80020f4:	e5ce      	b.n	8001c94 <exec6502+0x248>
			imm();
 80020f6:	f7fe fd6f 	bl	8000bd8 <imm>
			cmp();
 80020fa:	f7ff f8a9 	bl	8001250 <cmp>
			break;
 80020fe:	e5c9      	b.n	8001c94 <exec6502+0x248>
			dex();
 8002100:	f7ff f954 	bl	80013ac <dex>
			break;
 8002104:	e5c6      	b.n	8001c94 <exec6502+0x248>
			abso();
 8002106:	f7fe fdbd 	bl	8000c84 <abso>
			cpy();
 800210a:	f7ff f8fd 	bl	8001308 <cpy>
			break;
 800210e:	e5c1      	b.n	8001c94 <exec6502+0x248>
			abso();
 8002110:	f7fe fdb8 	bl	8000c84 <abso>
			cmp();
 8002114:	f7ff f89c 	bl	8001250 <cmp>
			break;
 8002118:	e5bc      	b.n	8001c94 <exec6502+0x248>
			abso();
 800211a:	f7fe fdb3 	bl	8000c84 <abso>
			dec();
 800211e:	f7ff f921 	bl	8001364 <dec>
			break;
 8002122:	e5b7      	b.n	8001c94 <exec6502+0x248>
			rel();
 8002124:	f7fe fd9a 	bl	8000c5c <rel>
			bne();
 8002128:	f7fe ffc4 	bl	80010b4 <bne>
			break;
 800212c:	e5b2      	b.n	8001c94 <exec6502+0x248>
			indy();
 800212e:	f7fe fe3d 	bl	8000dac <indy>
			cmp();
 8002132:	f7ff f88d 	bl	8001250 <cmp>
			break;
 8002136:	e5ad      	b.n	8001c94 <exec6502+0x248>
			zpx();
 8002138:	f7fe fd68 	bl	8000c0c <zpx>
			cmp();
 800213c:	f7ff f888 	bl	8001250 <cmp>
			break;
 8002140:	e5a8      	b.n	8001c94 <exec6502+0x248>
			zpx();
 8002142:	f7fe fd63 	bl	8000c0c <zpx>
			dec();
 8002146:	f7ff f90d 	bl	8001364 <dec>
			break;
 800214a:	e5a3      	b.n	8001c94 <exec6502+0x248>
			cld();
 800214c:	f7ff f868 	bl	8001220 <cld>
			break;
 8002150:	e5a0      	b.n	8001c94 <exec6502+0x248>
			absy();
 8002152:	f7fe fdcb 	bl	8000cec <absy>
			cmp();
 8002156:	f7ff f87b 	bl	8001250 <cmp>
			break;
 800215a:	e59b      	b.n	8001c94 <exec6502+0x248>
			absx();
 800215c:	f7fe fdaa 	bl	8000cb4 <absx>
			cmp();
 8002160:	f7ff f876 	bl	8001250 <cmp>
			break;
 8002164:	e596      	b.n	8001c94 <exec6502+0x248>
			absx();
 8002166:	f7fe fda5 	bl	8000cb4 <absx>
			dec();
 800216a:	f7ff f8fb 	bl	8001364 <dec>
			break;
 800216e:	e591      	b.n	8001c94 <exec6502+0x248>
			imm();
 8002170:	f7fe fd32 	bl	8000bd8 <imm>
			cpx();
 8002174:	f7ff f89a 	bl	80012ac <cpx>
			break;
 8002178:	e58c      	b.n	8001c94 <exec6502+0x248>
			indx();
 800217a:	f7fe fdf9 	bl	8000d70 <indx>
			sbc();
 800217e:	f7ff fb49 	bl	8001814 <sbc>
			break;
 8002182:	e587      	b.n	8001c94 <exec6502+0x248>
			zp();
 8002184:	f7fe fd34 	bl	8000bf0 <zp>
			cpx();
 8002188:	f7ff f890 	bl	80012ac <cpx>
			break;
 800218c:	e582      	b.n	8001c94 <exec6502+0x248>
			zp();
 800218e:	f7fe fd2f 	bl	8000bf0 <zp>
			sbc();
 8002192:	f7ff fb3f 	bl	8001814 <sbc>
			break;
 8002196:	e57d      	b.n	8001c94 <exec6502+0x248>
			zp();
 8002198:	f7fe fd2a 	bl	8000bf0 <zp>
			inc();
 800219c:	f7ff f960 	bl	8001460 <inc>
			break;
 80021a0:	e578      	b.n	8001c94 <exec6502+0x248>
			inx();
 80021a2:	f7ff f981 	bl	80014a8 <inx>
			break;
 80021a6:	e575      	b.n	8001c94 <exec6502+0x248>
			imm();
 80021a8:	f7fe fd16 	bl	8000bd8 <imm>
			sbc();
 80021ac:	f7ff fb32 	bl	8001814 <sbc>
			break;
 80021b0:	e570      	b.n	8001c94 <exec6502+0x248>
			abso();
 80021b2:	f7fe fd67 	bl	8000c84 <abso>
			cpx();
 80021b6:	f7ff f879 	bl	80012ac <cpx>
			break;
 80021ba:	e56b      	b.n	8001c94 <exec6502+0x248>
			abso();
 80021bc:	f7fe fd62 	bl	8000c84 <abso>
			sbc();
 80021c0:	f7ff fb28 	bl	8001814 <sbc>
			break;
 80021c4:	e566      	b.n	8001c94 <exec6502+0x248>
			abso();
 80021c6:	f7fe fd5d 	bl	8000c84 <abso>
			inc();
 80021ca:	f7ff f949 	bl	8001460 <inc>
			break;
 80021ce:	e561      	b.n	8001c94 <exec6502+0x248>
			rel();
 80021d0:	f7fe fd44 	bl	8000c5c <rel>
			beq();
 80021d4:	f7fe ff06 	bl	8000fe4 <beq>
			break;
 80021d8:	e55c      	b.n	8001c94 <exec6502+0x248>
			indy();
 80021da:	f7fe fde7 	bl	8000dac <indy>
			sbc();
 80021de:	f7ff fb19 	bl	8001814 <sbc>
			break;
 80021e2:	e557      	b.n	8001c94 <exec6502+0x248>
			zpx();
 80021e4:	f7fe fd12 	bl	8000c0c <zpx>
			sbc();
 80021e8:	f7ff fb14 	bl	8001814 <sbc>
			break;
 80021ec:	e552      	b.n	8001c94 <exec6502+0x248>
			zpx();
 80021ee:	f7fe fd0d 	bl	8000c0c <zpx>
			inc();
 80021f2:	f7ff f935 	bl	8001460 <inc>
			break;
 80021f6:	e54d      	b.n	8001c94 <exec6502+0x248>
			sed();
 80021f8:	f7ff fb70 	bl	80018dc <sed>
			break;
 80021fc:	e54a      	b.n	8001c94 <exec6502+0x248>
			absy();
 80021fe:	f7fe fd75 	bl	8000cec <absy>
			sbc();
 8002202:	f7ff fb07 	bl	8001814 <sbc>
			break;
 8002206:	e545      	b.n	8001c94 <exec6502+0x248>
			absx();
 8002208:	f7fe fd54 	bl	8000cb4 <absx>
			sbc();
 800220c:	f7ff fb02 	bl	8001814 <sbc>
			break;
 8002210:	e540      	b.n	8001c94 <exec6502+0x248>
			absx();
 8002212:	f7fe fd4f 	bl	8000cb4 <absx>
			inc();
 8002216:	f7ff f923 	bl	8001460 <inc>
			break;
 800221a:	e53b      	b.n	8001c94 <exec6502+0x248>

0800221c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800221c:	4b0e      	ldr	r3, [pc, #56]	; (8002258 <HAL_MspInit+0x3c>)
{
 800221e:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002220:	699a      	ldr	r2, [r3, #24]
 8002222:	f042 0201 	orr.w	r2, r2, #1
 8002226:	619a      	str	r2, [r3, #24]
 8002228:	699a      	ldr	r2, [r3, #24]
 800222a:	f002 0201 	and.w	r2, r2, #1
 800222e:	9200      	str	r2, [sp, #0]
 8002230:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002232:	69da      	ldr	r2, [r3, #28]
 8002234:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002238:	61da      	str	r2, [r3, #28]
 800223a:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800223c:	4a07      	ldr	r2, [pc, #28]	; (800225c <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800223e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002242:	9301      	str	r3, [sp, #4]
 8002244:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002246:	6853      	ldr	r3, [r2, #4]
 8002248:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800224c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002250:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002252:	b002      	add	sp, #8
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop
 8002258:	40021000 	.word	0x40021000
 800225c:	40010000 	.word	0x40010000

08002260 <HAL_SD_MspInit>:
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002260:	2210      	movs	r2, #16
{
 8002262:	b530      	push	{r4, r5, lr}
 8002264:	4604      	mov	r4, r0
 8002266:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002268:	eb0d 0002 	add.w	r0, sp, r2
 800226c:	2100      	movs	r1, #0
 800226e:	f002 fa0f 	bl	8004690 <memset>
  if(hsd->Instance==SDIO)
 8002272:	6822      	ldr	r2, [r4, #0]
 8002274:	4b1e      	ldr	r3, [pc, #120]	; (80022f0 <HAL_SD_MspInit+0x90>)
 8002276:	429a      	cmp	r2, r3
 8002278:	d137      	bne.n	80022ea <HAL_SD_MspInit+0x8a>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800227a:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
 800227e:	695a      	ldr	r2, [r3, #20]
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002280:	2502      	movs	r5, #2
    __HAL_RCC_SDIO_CLK_ENABLE();
 8002282:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002286:	615a      	str	r2, [r3, #20]
 8002288:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800228a:	2403      	movs	r4, #3
    __HAL_RCC_SDIO_CLK_ENABLE();
 800228c:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8002290:	9201      	str	r2, [sp, #4]
 8002292:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002294:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002296:	4817      	ldr	r0, [pc, #92]	; (80022f4 <HAL_SD_MspInit+0x94>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002298:	f042 0210 	orr.w	r2, r2, #16
 800229c:	619a      	str	r2, [r3, #24]
 800229e:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022a0:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022a2:	f002 0210 	and.w	r2, r2, #16
 80022a6:	9202      	str	r2, [sp, #8]
 80022a8:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80022aa:	699a      	ldr	r2, [r3, #24]
 80022ac:	f042 0220 	orr.w	r2, r2, #32
 80022b0:	619a      	str	r2, [r3, #24]
 80022b2:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022b4:	9407      	str	r4, [sp, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80022b6:	f003 0320 	and.w	r3, r3, #32
 80022ba:	9303      	str	r3, [sp, #12]
 80022bc:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022be:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80022c2:	e9cd 3504 	strd	r3, r5, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022c6:	f000 fa21 	bl	800270c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80022ca:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022cc:	480a      	ldr	r0, [pc, #40]	; (80022f8 <HAL_SD_MspInit+0x98>)
 80022ce:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d0:	e9cd 3504 	strd	r3, r5, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022d4:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022d6:	f000 fa19 	bl	800270c <HAL_GPIO_Init>

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 80022da:	2200      	movs	r2, #0
 80022dc:	2031      	movs	r0, #49	; 0x31
 80022de:	4611      	mov	r1, r2
 80022e0:	f000 f91e 	bl	8002520 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 80022e4:	2031      	movs	r0, #49	; 0x31
 80022e6:	f000 f94d 	bl	8002584 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80022ea:	b009      	add	sp, #36	; 0x24
 80022ec:	bd30      	pop	{r4, r5, pc}
 80022ee:	bf00      	nop
 80022f0:	40018000 	.word	0x40018000
 80022f4:	40011000 	.word	0x40011000
 80022f8:	40011400 	.word	0x40011400

080022fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022fc:	b510      	push	{r4, lr}
 80022fe:	4604      	mov	r4, r0
 8002300:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002302:	2210      	movs	r2, #16
 8002304:	2100      	movs	r1, #0
 8002306:	a802      	add	r0, sp, #8
 8002308:	f002 f9c2 	bl	8004690 <memset>
  if(huart->Instance==USART1)
 800230c:	6822      	ldr	r2, [r4, #0]
 800230e:	4b17      	ldr	r3, [pc, #92]	; (800236c <HAL_UART_MspInit+0x70>)
 8002310:	429a      	cmp	r2, r3
 8002312:	d128      	bne.n	8002366 <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002314:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8002318:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800231a:	4815      	ldr	r0, [pc, #84]	; (8002370 <HAL_UART_MspInit+0x74>)
    __HAL_RCC_USART1_CLK_ENABLE();
 800231c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002320:	619a      	str	r2, [r3, #24]
 8002322:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002324:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 8002326:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800232a:	9200      	str	r2, [sp, #0]
 800232c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800232e:	699a      	ldr	r2, [r3, #24]
 8002330:	f042 0204 	orr.w	r2, r2, #4
 8002334:	619a      	str	r2, [r3, #24]
 8002336:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002338:	f44f 7200 	mov.w	r2, #512	; 0x200
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800233c:	f003 0304 	and.w	r3, r3, #4
 8002340:	9301      	str	r3, [sp, #4]
 8002342:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002344:	2302      	movs	r3, #2
 8002346:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800234a:	2303      	movs	r3, #3
 800234c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800234e:	f000 f9dd 	bl	800270c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002352:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002356:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002358:	4805      	ldr	r0, [pc, #20]	; (8002370 <HAL_UART_MspInit+0x74>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800235a:	e9cd 1302 	strd	r1, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800235e:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002360:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002362:	f000 f9d3 	bl	800270c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002366:	b006      	add	sp, #24
 8002368:	bd10      	pop	{r4, pc}
 800236a:	bf00      	nop
 800236c:	40013800 	.word	0x40013800
 8002370:	40010800 	.word	0x40010800

08002374 <HAL_SRAM_MspInit>:

static void HAL_FSMC_MspInit(void){
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002374:	2300      	movs	r3, #0
  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8002376:	b530      	push	{r4, r5, lr}
 8002378:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800237a:	9304      	str	r3, [sp, #16]
  if (FSMC_Initialized) {
 800237c:	4b12      	ldr	r3, [pc, #72]	; (80023c8 <HAL_SRAM_MspInit+0x54>)
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	b9fa      	cbnz	r2, 80023c2 <HAL_SRAM_MspInit+0x4e>
  FSMC_Initialized = 1;
 8002382:	2201      	movs	r2, #1
 8002384:	601a      	str	r2, [r3, #0]
  __HAL_RCC_FSMC_CLK_ENABLE();
 8002386:	4b11      	ldr	r3, [pc, #68]	; (80023cc <HAL_SRAM_MspInit+0x58>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002388:	2502      	movs	r5, #2
  __HAL_RCC_FSMC_CLK_ENABLE();
 800238a:	695a      	ldr	r2, [r3, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800238c:	2403      	movs	r4, #3
  __HAL_RCC_FSMC_CLK_ENABLE();
 800238e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002392:	615a      	str	r2, [r3, #20]
 8002394:	695b      	ldr	r3, [r3, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002396:	480e      	ldr	r0, [pc, #56]	; (80023d0 <HAL_SRAM_MspInit+0x5c>)
  __HAL_RCC_FSMC_CLK_ENABLE();
 8002398:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800239c:	9301      	str	r3, [sp, #4]
 800239e:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a0:	f64f 7380 	movw	r3, #65408	; 0xff80
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80023a4:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a6:	e9cd 3502 	strd	r3, r5, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023aa:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80023ac:	f000 f9ae 	bl	800270c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80023b0:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023b4:	4807      	ldr	r0, [pc, #28]	; (80023d4 <HAL_SRAM_MspInit+0x60>)
 80023b6:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023b8:	e9cd 3502 	strd	r3, r5, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023bc:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023be:	f000 f9a5 	bl	800270c <HAL_GPIO_Init>
  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80023c2:	b007      	add	sp, #28
 80023c4:	bd30      	pop	{r4, r5, pc}
 80023c6:	bf00      	nop
 80023c8:	20008168 	.word	0x20008168
 80023cc:	40021000 	.word	0x40021000
 80023d0:	40011800 	.word	0x40011800
 80023d4:	40011400 	.word	0x40011400

080023d8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023d8:	e7fe      	b.n	80023d8 <NMI_Handler>

080023da <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023da:	e7fe      	b.n	80023da <HardFault_Handler>

080023dc <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023dc:	e7fe      	b.n	80023dc <MemManage_Handler>

080023de <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023de:	e7fe      	b.n	80023de <BusFault_Handler>

080023e0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023e0:	e7fe      	b.n	80023e0 <UsageFault_Handler>

080023e2 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023e2:	4770      	bx	lr

080023e4 <DebugMon_Handler>:
 80023e4:	4770      	bx	lr

080023e6 <PendSV_Handler>:
 80023e6:	4770      	bx	lr

080023e8 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023e8:	f000 b864 	b.w	80024b4 <HAL_IncTick>

080023ec <SDIO_IRQHandler>:
void SDIO_IRQHandler(void)
{
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 80023ec:	4801      	ldr	r0, [pc, #4]	; (80023f4 <SDIO_IRQHandler+0x8>)
 80023ee:	f001 b9ef 	b.w	80037d0 <HAL_SD_IRQHandler>
 80023f2:	bf00      	nop
 80023f4:	20008030 	.word	0x20008030

080023f8 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023f8:	4770      	bx	lr
	...

080023fc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80023fc:	f7ff fffc 	bl	80023f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002400:	480b      	ldr	r0, [pc, #44]	; (8002430 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002402:	490c      	ldr	r1, [pc, #48]	; (8002434 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002404:	4a0c      	ldr	r2, [pc, #48]	; (8002438 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002406:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002408:	e002      	b.n	8002410 <LoopCopyDataInit>

0800240a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800240a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800240c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800240e:	3304      	adds	r3, #4

08002410 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002410:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002412:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002414:	d3f9      	bcc.n	800240a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002416:	4a09      	ldr	r2, [pc, #36]	; (800243c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002418:	4c09      	ldr	r4, [pc, #36]	; (8002440 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800241a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800241c:	e001      	b.n	8002422 <LoopFillZerobss>

0800241e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800241e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002420:	3204      	adds	r2, #4

08002422 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002422:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002424:	d3fb      	bcc.n	800241e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002426:	f002 f90f 	bl	8004648 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800242a:	f7fe fa75 	bl	8000918 <main>
  bx lr
 800242e:	4770      	bx	lr
  ldr r0, =_sdata
 8002430:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002434:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8002438:	0800628c 	.word	0x0800628c
  ldr r2, =_sbss
 800243c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8002440:	20008184 	.word	0x20008184

08002444 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002444:	e7fe      	b.n	8002444 <ADC1_2_IRQHandler>
	...

08002448 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002448:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800244a:	4b0e      	ldr	r3, [pc, #56]	; (8002484 <HAL_InitTick+0x3c>)
{
 800244c:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800244e:	7818      	ldrb	r0, [r3, #0]
 8002450:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002454:	fbb3 f3f0 	udiv	r3, r3, r0
 8002458:	4a0b      	ldr	r2, [pc, #44]	; (8002488 <HAL_InitTick+0x40>)
 800245a:	6810      	ldr	r0, [r2, #0]
 800245c:	fbb0 f0f3 	udiv	r0, r0, r3
 8002460:	f000 f89e 	bl	80025a0 <HAL_SYSTICK_Config>
 8002464:	4604      	mov	r4, r0
 8002466:	b958      	cbnz	r0, 8002480 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002468:	2d0f      	cmp	r5, #15
 800246a:	d809      	bhi.n	8002480 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800246c:	4602      	mov	r2, r0
 800246e:	4629      	mov	r1, r5
 8002470:	f04f 30ff 	mov.w	r0, #4294967295
 8002474:	f000 f854 	bl	8002520 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002478:	4620      	mov	r0, r4
 800247a:	4b04      	ldr	r3, [pc, #16]	; (800248c <HAL_InitTick+0x44>)
 800247c:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800247e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8002480:	2001      	movs	r0, #1
 8002482:	e7fc      	b.n	800247e <HAL_InitTick+0x36>
 8002484:	20000004 	.word	0x20000004
 8002488:	20000000 	.word	0x20000000
 800248c:	20000008 	.word	0x20000008

08002490 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002490:	4a07      	ldr	r2, [pc, #28]	; (80024b0 <HAL_Init+0x20>)
{
 8002492:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002494:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002496:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002498:	f043 0310 	orr.w	r3, r3, #16
 800249c:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800249e:	f000 f82d 	bl	80024fc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80024a2:	200f      	movs	r0, #15
 80024a4:	f7ff ffd0 	bl	8002448 <HAL_InitTick>
  HAL_MspInit();
 80024a8:	f7ff feb8 	bl	800221c <HAL_MspInit>
}
 80024ac:	2000      	movs	r0, #0
 80024ae:	bd08      	pop	{r3, pc}
 80024b0:	40022000 	.word	0x40022000

080024b4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80024b4:	4a03      	ldr	r2, [pc, #12]	; (80024c4 <HAL_IncTick+0x10>)
 80024b6:	4b04      	ldr	r3, [pc, #16]	; (80024c8 <HAL_IncTick+0x14>)
 80024b8:	6811      	ldr	r1, [r2, #0]
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	440b      	add	r3, r1
 80024be:	6013      	str	r3, [r2, #0]
}
 80024c0:	4770      	bx	lr
 80024c2:	bf00      	nop
 80024c4:	2000816c 	.word	0x2000816c
 80024c8:	20000004 	.word	0x20000004

080024cc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80024cc:	4b01      	ldr	r3, [pc, #4]	; (80024d4 <HAL_GetTick+0x8>)
 80024ce:	6818      	ldr	r0, [r3, #0]
}
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop
 80024d4:	2000816c 	.word	0x2000816c

080024d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024d8:	b538      	push	{r3, r4, r5, lr}
 80024da:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80024dc:	f7ff fff6 	bl	80024cc <HAL_GetTick>
 80024e0:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024e2:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80024e4:	bf1e      	ittt	ne
 80024e6:	4b04      	ldrne	r3, [pc, #16]	; (80024f8 <HAL_Delay+0x20>)
 80024e8:	781b      	ldrbne	r3, [r3, #0]
 80024ea:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80024ec:	f7ff ffee 	bl	80024cc <HAL_GetTick>
 80024f0:	1b43      	subs	r3, r0, r5
 80024f2:	42a3      	cmp	r3, r4
 80024f4:	d3fa      	bcc.n	80024ec <HAL_Delay+0x14>
  {
  }
}
 80024f6:	bd38      	pop	{r3, r4, r5, pc}
 80024f8:	20000004 	.word	0x20000004

080024fc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024fc:	4907      	ldr	r1, [pc, #28]	; (800251c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80024fe:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002500:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002502:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002506:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800250a:	0412      	lsls	r2, r2, #16
 800250c:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800250e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002510:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002514:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002518:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800251a:	4770      	bx	lr
 800251c:	e000ed00 	.word	0xe000ed00

08002520 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002520:	4b16      	ldr	r3, [pc, #88]	; (800257c <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002522:	b530      	push	{r4, r5, lr}
 8002524:	68dc      	ldr	r4, [r3, #12]
 8002526:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800252a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800252e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002530:	2b04      	cmp	r3, #4
 8002532:	bf28      	it	cs
 8002534:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002536:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002538:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800253c:	bf98      	it	ls
 800253e:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002540:	fa05 f303 	lsl.w	r3, r5, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002544:	bf88      	it	hi
 8002546:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002548:	ea21 0303 	bic.w	r3, r1, r3
 800254c:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800254e:	fa05 f404 	lsl.w	r4, r5, r4
 8002552:	ea22 0204 	bic.w	r2, r2, r4
  if ((int32_t)(IRQn) >= 0)
 8002556:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002558:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800255c:	bfac      	ite	ge
 800255e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002562:	4a07      	ldrlt	r2, [pc, #28]	; (8002580 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002564:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8002568:	b2db      	uxtb	r3, r3
 800256a:	bfab      	itete	ge
 800256c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002570:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002574:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002578:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800257a:	bd30      	pop	{r4, r5, pc}
 800257c:	e000ed00 	.word	0xe000ed00
 8002580:	e000ed14 	.word	0xe000ed14

08002584 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002584:	2800      	cmp	r0, #0
 8002586:	db08      	blt.n	800259a <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002588:	2301      	movs	r3, #1
 800258a:	0942      	lsrs	r2, r0, #5
 800258c:	f000 001f 	and.w	r0, r0, #31
 8002590:	fa03 f000 	lsl.w	r0, r3, r0
 8002594:	4b01      	ldr	r3, [pc, #4]	; (800259c <HAL_NVIC_EnableIRQ+0x18>)
 8002596:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800259a:	4770      	bx	lr
 800259c:	e000e100 	.word	0xe000e100

080025a0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025a0:	3801      	subs	r0, #1
 80025a2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80025a6:	d20b      	bcs.n	80025c0 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025a8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025ac:	21f0      	movs	r1, #240	; 0xf0
 80025ae:	4a05      	ldr	r2, [pc, #20]	; (80025c4 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025b0:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025b2:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025b6:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025b8:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025ba:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025bc:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025be:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80025c0:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80025c2:	4770      	bx	lr
 80025c4:	e000ed00 	.word	0xe000ed00

080025c8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80025c8:	b510      	push	{r4, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80025ca:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	d003      	beq.n	80025da <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025d2:	2304      	movs	r3, #4
 80025d4:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 80025d6:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 80025d8:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025da:	6803      	ldr	r3, [r0, #0]
 80025dc:	4945      	ldr	r1, [pc, #276]	; (80026f4 <HAL_DMA_Abort_IT+0x12c>)
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	f022 020e 	bic.w	r2, r2, #14
 80025e4:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	f022 0201 	bic.w	r2, r2, #1
 80025ec:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80025ee:	4a42      	ldr	r2, [pc, #264]	; (80026f8 <HAL_DMA_Abort_IT+0x130>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d944      	bls.n	800267e <HAL_DMA_Abort_IT+0xb6>
 80025f4:	428b      	cmp	r3, r1
 80025f6:	d03b      	beq.n	8002670 <HAL_DMA_Abort_IT+0xa8>
 80025f8:	3114      	adds	r1, #20
 80025fa:	428b      	cmp	r3, r1
 80025fc:	d03a      	beq.n	8002674 <HAL_DMA_Abort_IT+0xac>
 80025fe:	3114      	adds	r1, #20
 8002600:	428b      	cmp	r3, r1
 8002602:	d039      	beq.n	8002678 <HAL_DMA_Abort_IT+0xb0>
 8002604:	3114      	adds	r1, #20
 8002606:	428b      	cmp	r3, r1
 8002608:	d026      	beq.n	8002658 <HAL_DMA_Abort_IT+0x90>
 800260a:	3114      	adds	r1, #20
 800260c:	428b      	cmp	r3, r1
 800260e:	d026      	beq.n	800265e <HAL_DMA_Abort_IT+0x96>
 8002610:	3114      	adds	r1, #20
 8002612:	428b      	cmp	r3, r1
 8002614:	d026      	beq.n	8002664 <HAL_DMA_Abort_IT+0x9c>
 8002616:	4293      	cmp	r3, r2
 8002618:	d027      	beq.n	800266a <HAL_DMA_Abort_IT+0xa2>
 800261a:	f502 7262 	add.w	r2, r2, #904	; 0x388
 800261e:	4293      	cmp	r3, r2
 8002620:	d026      	beq.n	8002670 <HAL_DMA_Abort_IT+0xa8>
 8002622:	3214      	adds	r2, #20
 8002624:	4293      	cmp	r3, r2
 8002626:	d025      	beq.n	8002674 <HAL_DMA_Abort_IT+0xac>
 8002628:	3214      	adds	r2, #20
 800262a:	4293      	cmp	r3, r2
 800262c:	d024      	beq.n	8002678 <HAL_DMA_Abort_IT+0xb0>
 800262e:	3214      	adds	r2, #20
 8002630:	4293      	cmp	r3, r2
 8002632:	bf14      	ite	ne
 8002634:	f44f 3380 	movne.w	r3, #65536	; 0x10000
 8002638:	f44f 5380 	moveq.w	r3, #4096	; 0x1000
 800263c:	4a2f      	ldr	r2, [pc, #188]	; (80026fc <HAL_DMA_Abort_IT+0x134>)
 800263e:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8002640:	2301      	movs	r3, #1
    __HAL_UNLOCK(hdma);
 8002642:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 8002644:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    if(hdma->XferAbortCallback != NULL)
 8002648:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 800264a:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 800264e:	2b00      	cmp	r3, #0
 8002650:	d04d      	beq.n	80026ee <HAL_DMA_Abort_IT+0x126>
      hdma->XferAbortCallback(hdma);
 8002652:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8002654:	4620      	mov	r0, r4
 8002656:	e7bf      	b.n	80025d8 <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002658:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800265c:	e7ee      	b.n	800263c <HAL_DMA_Abort_IT+0x74>
 800265e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002662:	e7eb      	b.n	800263c <HAL_DMA_Abort_IT+0x74>
 8002664:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002668:	e7e8      	b.n	800263c <HAL_DMA_Abort_IT+0x74>
 800266a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800266e:	e7e5      	b.n	800263c <HAL_DMA_Abort_IT+0x74>
 8002670:	2301      	movs	r3, #1
 8002672:	e7e3      	b.n	800263c <HAL_DMA_Abort_IT+0x74>
 8002674:	2310      	movs	r3, #16
 8002676:	e7e1      	b.n	800263c <HAL_DMA_Abort_IT+0x74>
 8002678:	f44f 7380 	mov.w	r3, #256	; 0x100
 800267c:	e7de      	b.n	800263c <HAL_DMA_Abort_IT+0x74>
 800267e:	428b      	cmp	r3, r1
 8002680:	d02e      	beq.n	80026e0 <HAL_DMA_Abort_IT+0x118>
 8002682:	491f      	ldr	r1, [pc, #124]	; (8002700 <HAL_DMA_Abort_IT+0x138>)
 8002684:	428b      	cmp	r3, r1
 8002686:	d02d      	beq.n	80026e4 <HAL_DMA_Abort_IT+0x11c>
 8002688:	3114      	adds	r1, #20
 800268a:	428b      	cmp	r3, r1
 800268c:	d02c      	beq.n	80026e8 <HAL_DMA_Abort_IT+0x120>
 800268e:	3114      	adds	r1, #20
 8002690:	428b      	cmp	r3, r1
 8002692:	d019      	beq.n	80026c8 <HAL_DMA_Abort_IT+0x100>
 8002694:	3114      	adds	r1, #20
 8002696:	428b      	cmp	r3, r1
 8002698:	d019      	beq.n	80026ce <HAL_DMA_Abort_IT+0x106>
 800269a:	3114      	adds	r1, #20
 800269c:	428b      	cmp	r3, r1
 800269e:	d019      	beq.n	80026d4 <HAL_DMA_Abort_IT+0x10c>
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d01a      	beq.n	80026da <HAL_DMA_Abort_IT+0x112>
 80026a4:	4a17      	ldr	r2, [pc, #92]	; (8002704 <HAL_DMA_Abort_IT+0x13c>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d01a      	beq.n	80026e0 <HAL_DMA_Abort_IT+0x118>
 80026aa:	3214      	adds	r2, #20
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d019      	beq.n	80026e4 <HAL_DMA_Abort_IT+0x11c>
 80026b0:	3214      	adds	r2, #20
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d018      	beq.n	80026e8 <HAL_DMA_Abort_IT+0x120>
 80026b6:	3214      	adds	r2, #20
 80026b8:	4293      	cmp	r3, r2
 80026ba:	bf14      	ite	ne
 80026bc:	f44f 3380 	movne.w	r3, #65536	; 0x10000
 80026c0:	f44f 5380 	moveq.w	r3, #4096	; 0x1000
 80026c4:	4a10      	ldr	r2, [pc, #64]	; (8002708 <HAL_DMA_Abort_IT+0x140>)
 80026c6:	e7ba      	b.n	800263e <HAL_DMA_Abort_IT+0x76>
 80026c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026cc:	e7fa      	b.n	80026c4 <HAL_DMA_Abort_IT+0xfc>
 80026ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026d2:	e7f7      	b.n	80026c4 <HAL_DMA_Abort_IT+0xfc>
 80026d4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80026d8:	e7f4      	b.n	80026c4 <HAL_DMA_Abort_IT+0xfc>
 80026da:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80026de:	e7f1      	b.n	80026c4 <HAL_DMA_Abort_IT+0xfc>
 80026e0:	2301      	movs	r3, #1
 80026e2:	e7ef      	b.n	80026c4 <HAL_DMA_Abort_IT+0xfc>
 80026e4:	2310      	movs	r3, #16
 80026e6:	e7ed      	b.n	80026c4 <HAL_DMA_Abort_IT+0xfc>
 80026e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026ec:	e7ea      	b.n	80026c4 <HAL_DMA_Abort_IT+0xfc>
  HAL_StatusTypeDef status = HAL_OK;
 80026ee:	4618      	mov	r0, r3
 80026f0:	e772      	b.n	80025d8 <HAL_DMA_Abort_IT+0x10>
 80026f2:	bf00      	nop
 80026f4:	40020008 	.word	0x40020008
 80026f8:	40020080 	.word	0x40020080
 80026fc:	40020400 	.word	0x40020400
 8002700:	4002001c 	.word	0x4002001c
 8002704:	40020408 	.word	0x40020408
 8002708:	40020000 	.word	0x40020000

0800270c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800270c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002710:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8002712:	4616      	mov	r6, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002714:	4f6a      	ldr	r7, [pc, #424]	; (80028c0 <HAL_GPIO_Init+0x1b4>)
 8002716:	4b6b      	ldr	r3, [pc, #428]	; (80028c4 <HAL_GPIO_Init+0x1b8>)
        temp = AFIO->EXTICR[position >> 2u];
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002718:	f8df c1ac 	ldr.w	ip, [pc, #428]	; 80028c8 <HAL_GPIO_Init+0x1bc>
      switch (GPIO_Init->Mode)
 800271c:	f8df e1ac 	ldr.w	lr, [pc, #428]	; 80028cc <HAL_GPIO_Init+0x1c0>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002720:	680c      	ldr	r4, [r1, #0]
 8002722:	fa34 f506 	lsrs.w	r5, r4, r6
 8002726:	d102      	bne.n	800272e <HAL_GPIO_Init+0x22>
      }
    }

	position++;
  }
}
 8002728:	b003      	add	sp, #12
 800272a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 800272e:	f04f 0801 	mov.w	r8, #1
 8002732:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002736:	ea04 0508 	and.w	r5, r4, r8
    if (iocurrent == ioposition)
 800273a:	ea38 0404 	bics.w	r4, r8, r4
 800273e:	f040 8081 	bne.w	8002844 <HAL_GPIO_Init+0x138>
      switch (GPIO_Init->Mode)
 8002742:	684c      	ldr	r4, [r1, #4]
 8002744:	2c03      	cmp	r4, #3
 8002746:	d807      	bhi.n	8002758 <HAL_GPIO_Init+0x4c>
 8002748:	3c01      	subs	r4, #1
 800274a:	2c02      	cmp	r4, #2
 800274c:	f200 808c 	bhi.w	8002868 <HAL_GPIO_Init+0x15c>
 8002750:	e8df f004 	tbb	[pc, r4]
 8002754:	a29d      	.short	0xa29d
 8002756:	a8          	.byte	0xa8
 8002757:	00          	.byte	0x00
 8002758:	2c12      	cmp	r4, #18
 800275a:	f000 80a0 	beq.w	800289e <HAL_GPIO_Init+0x192>
 800275e:	d873      	bhi.n	8002848 <HAL_GPIO_Init+0x13c>
 8002760:	2c11      	cmp	r4, #17
 8002762:	f000 8096 	beq.w	8002892 <HAL_GPIO_Init+0x186>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002766:	2dff      	cmp	r5, #255	; 0xff
 8002768:	bf98      	it	ls
 800276a:	4682      	movls	sl, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800276c:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002770:	bf88      	it	hi
 8002772:	f100 0a04 	addhi.w	sl, r0, #4
 8002776:	ea4f 0486 	mov.w	r4, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800277a:	f8da 8000 	ldr.w	r8, [sl]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800277e:	bf88      	it	hi
 8002780:	3c20      	subhi	r4, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002782:	fa09 fb04 	lsl.w	fp, r9, r4
 8002786:	ea28 080b 	bic.w	r8, r8, fp
 800278a:	fa02 f404 	lsl.w	r4, r2, r4
 800278e:	ea48 0404 	orr.w	r4, r8, r4
 8002792:	f8ca 4000 	str.w	r4, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002796:	f8d1 a004 	ldr.w	sl, [r1, #4]
 800279a:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 800279e:	d051      	beq.n	8002844 <HAL_GPIO_Init+0x138>
        __HAL_RCC_AFIO_CLK_ENABLE();
 80027a0:	69bc      	ldr	r4, [r7, #24]
 80027a2:	f026 0803 	bic.w	r8, r6, #3
 80027a6:	f044 0401 	orr.w	r4, r4, #1
 80027aa:	61bc      	str	r4, [r7, #24]
 80027ac:	69bc      	ldr	r4, [r7, #24]
 80027ae:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 80027b2:	f004 0401 	and.w	r4, r4, #1
 80027b6:	9401      	str	r4, [sp, #4]
 80027b8:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80027bc:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80027c0:	9c01      	ldr	r4, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80027c2:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 80027c6:	f8d8 4008 	ldr.w	r4, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80027ca:	fa09 f90b 	lsl.w	r9, r9, fp
 80027ce:	ea24 0909 	bic.w	r9, r4, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80027d2:	4c3f      	ldr	r4, [pc, #252]	; (80028d0 <HAL_GPIO_Init+0x1c4>)
 80027d4:	42a0      	cmp	r0, r4
 80027d6:	d069      	beq.n	80028ac <HAL_GPIO_Init+0x1a0>
 80027d8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80027dc:	42a0      	cmp	r0, r4
 80027de:	d067      	beq.n	80028b0 <HAL_GPIO_Init+0x1a4>
 80027e0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80027e4:	42a0      	cmp	r0, r4
 80027e6:	d065      	beq.n	80028b4 <HAL_GPIO_Init+0x1a8>
 80027e8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80027ec:	42a0      	cmp	r0, r4
 80027ee:	d063      	beq.n	80028b8 <HAL_GPIO_Init+0x1ac>
 80027f0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80027f4:	42a0      	cmp	r0, r4
 80027f6:	d061      	beq.n	80028bc <HAL_GPIO_Init+0x1b0>
 80027f8:	4560      	cmp	r0, ip
 80027fa:	bf0c      	ite	eq
 80027fc:	2405      	moveq	r4, #5
 80027fe:	2406      	movne	r4, #6
 8002800:	fa04 f40b 	lsl.w	r4, r4, fp
 8002804:	ea44 0409 	orr.w	r4, r4, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8002808:	f8c8 4008 	str.w	r4, [r8, #8]
          SET_BIT(EXTI->RTSR, iocurrent);
 800280c:	689c      	ldr	r4, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800280e:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8002812:	bf14      	ite	ne
 8002814:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002816:	43ac      	biceq	r4, r5
 8002818:	609c      	str	r4, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 800281a:	68dc      	ldr	r4, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800281c:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8002820:	bf14      	ite	ne
 8002822:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002824:	43ac      	biceq	r4, r5
 8002826:	60dc      	str	r4, [r3, #12]
          SET_BIT(EXTI->EMR, iocurrent);
 8002828:	685c      	ldr	r4, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800282a:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 800282e:	bf14      	ite	ne
 8002830:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002832:	43ac      	biceq	r4, r5
 8002834:	605c      	str	r4, [r3, #4]
          SET_BIT(EXTI->IMR, iocurrent);
 8002836:	681c      	ldr	r4, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002838:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 800283c:	bf14      	ite	ne
 800283e:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002840:	43ac      	biceq	r4, r5
 8002842:	601c      	str	r4, [r3, #0]
	position++;
 8002844:	3601      	adds	r6, #1
 8002846:	e76b      	b.n	8002720 <HAL_GPIO_Init+0x14>
      switch (GPIO_Init->Mode)
 8002848:	4574      	cmp	r4, lr
 800284a:	d00d      	beq.n	8002868 <HAL_GPIO_Init+0x15c>
 800284c:	d818      	bhi.n	8002880 <HAL_GPIO_Init+0x174>
 800284e:	f8df 9084 	ldr.w	r9, [pc, #132]	; 80028d4 <HAL_GPIO_Init+0x1c8>
 8002852:	454c      	cmp	r4, r9
 8002854:	d008      	beq.n	8002868 <HAL_GPIO_Init+0x15c>
 8002856:	f509 2970 	add.w	r9, r9, #983040	; 0xf0000
 800285a:	454c      	cmp	r4, r9
 800285c:	d004      	beq.n	8002868 <HAL_GPIO_Init+0x15c>
 800285e:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8002862:	454c      	cmp	r4, r9
 8002864:	f47f af7f 	bne.w	8002766 <HAL_GPIO_Init+0x5a>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002868:	688a      	ldr	r2, [r1, #8]
 800286a:	b1ea      	cbz	r2, 80028a8 <HAL_GPIO_Init+0x19c>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800286c:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 800286e:	bf08      	it	eq
 8002870:	f8c0 8010 	streq.w	r8, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002874:	f04f 0208 	mov.w	r2, #8
            GPIOx->BRR = ioposition;
 8002878:	bf18      	it	ne
 800287a:	f8c0 8014 	strne.w	r8, [r0, #20]
 800287e:	e772      	b.n	8002766 <HAL_GPIO_Init+0x5a>
      switch (GPIO_Init->Mode)
 8002880:	f8df 9054 	ldr.w	r9, [pc, #84]	; 80028d8 <HAL_GPIO_Init+0x1cc>
 8002884:	454c      	cmp	r4, r9
 8002886:	d0ef      	beq.n	8002868 <HAL_GPIO_Init+0x15c>
 8002888:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 800288c:	e7e9      	b.n	8002862 <HAL_GPIO_Init+0x156>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800288e:	68ca      	ldr	r2, [r1, #12]
          break;
 8002890:	e769      	b.n	8002766 <HAL_GPIO_Init+0x5a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002892:	68ca      	ldr	r2, [r1, #12]
 8002894:	3204      	adds	r2, #4
          break;
 8002896:	e766      	b.n	8002766 <HAL_GPIO_Init+0x5a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002898:	68ca      	ldr	r2, [r1, #12]
 800289a:	3208      	adds	r2, #8
          break;
 800289c:	e763      	b.n	8002766 <HAL_GPIO_Init+0x5a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800289e:	68ca      	ldr	r2, [r1, #12]
 80028a0:	320c      	adds	r2, #12
          break;
 80028a2:	e760      	b.n	8002766 <HAL_GPIO_Init+0x5a>
      switch (GPIO_Init->Mode)
 80028a4:	2200      	movs	r2, #0
 80028a6:	e75e      	b.n	8002766 <HAL_GPIO_Init+0x5a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80028a8:	2204      	movs	r2, #4
 80028aa:	e75c      	b.n	8002766 <HAL_GPIO_Init+0x5a>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80028ac:	2400      	movs	r4, #0
 80028ae:	e7a7      	b.n	8002800 <HAL_GPIO_Init+0xf4>
 80028b0:	2401      	movs	r4, #1
 80028b2:	e7a5      	b.n	8002800 <HAL_GPIO_Init+0xf4>
 80028b4:	2402      	movs	r4, #2
 80028b6:	e7a3      	b.n	8002800 <HAL_GPIO_Init+0xf4>
 80028b8:	2403      	movs	r4, #3
 80028ba:	e7a1      	b.n	8002800 <HAL_GPIO_Init+0xf4>
 80028bc:	2404      	movs	r4, #4
 80028be:	e79f      	b.n	8002800 <HAL_GPIO_Init+0xf4>
 80028c0:	40021000 	.word	0x40021000
 80028c4:	40010400 	.word	0x40010400
 80028c8:	40011c00 	.word	0x40011c00
 80028cc:	10220000 	.word	0x10220000
 80028d0:	40010800 	.word	0x40010800
 80028d4:	10120000 	.word	0x10120000
 80028d8:	10310000 	.word	0x10310000

080028dc <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80028dc:	6883      	ldr	r3, [r0, #8]
 80028de:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80028e0:	bf14      	ite	ne
 80028e2:	2001      	movne	r0, #1
 80028e4:	2000      	moveq	r0, #0
 80028e6:	4770      	bx	lr

080028e8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80028e8:	b10a      	cbz	r2, 80028ee <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80028ea:	6101      	str	r1, [r0, #16]
  }
}
 80028ec:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80028ee:	0409      	lsls	r1, r1, #16
 80028f0:	e7fb      	b.n	80028ea <HAL_GPIO_WritePin+0x2>
	...

080028f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028f4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80028f8:	4605      	mov	r5, r0
 80028fa:	b338      	cbz	r0, 800294c <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028fc:	6803      	ldr	r3, [r0, #0]
 80028fe:	07db      	lsls	r3, r3, #31
 8002900:	d410      	bmi.n	8002924 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002902:	682b      	ldr	r3, [r5, #0]
 8002904:	079f      	lsls	r7, r3, #30
 8002906:	d45e      	bmi.n	80029c6 <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002908:	682b      	ldr	r3, [r5, #0]
 800290a:	0719      	lsls	r1, r3, #28
 800290c:	f100 8095 	bmi.w	8002a3a <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002910:	682b      	ldr	r3, [r5, #0]
 8002912:	075a      	lsls	r2, r3, #29
 8002914:	f100 80c1 	bmi.w	8002a9a <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002918:	69e8      	ldr	r0, [r5, #28]
 800291a:	2800      	cmp	r0, #0
 800291c:	f040 812c 	bne.w	8002b78 <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 8002920:	2000      	movs	r0, #0
 8002922:	e029      	b.n	8002978 <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002924:	4c90      	ldr	r4, [pc, #576]	; (8002b68 <HAL_RCC_OscConfig+0x274>)
 8002926:	6863      	ldr	r3, [r4, #4]
 8002928:	f003 030c 	and.w	r3, r3, #12
 800292c:	2b04      	cmp	r3, #4
 800292e:	d007      	beq.n	8002940 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002930:	6863      	ldr	r3, [r4, #4]
 8002932:	f003 030c 	and.w	r3, r3, #12
 8002936:	2b08      	cmp	r3, #8
 8002938:	d10a      	bne.n	8002950 <HAL_RCC_OscConfig+0x5c>
 800293a:	6863      	ldr	r3, [r4, #4]
 800293c:	03de      	lsls	r6, r3, #15
 800293e:	d507      	bpl.n	8002950 <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002940:	6823      	ldr	r3, [r4, #0]
 8002942:	039c      	lsls	r4, r3, #14
 8002944:	d5dd      	bpl.n	8002902 <HAL_RCC_OscConfig+0xe>
 8002946:	686b      	ldr	r3, [r5, #4]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d1da      	bne.n	8002902 <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 800294c:	2001      	movs	r0, #1
 800294e:	e013      	b.n	8002978 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002950:	686b      	ldr	r3, [r5, #4]
 8002952:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002956:	d112      	bne.n	800297e <HAL_RCC_OscConfig+0x8a>
 8002958:	6823      	ldr	r3, [r4, #0]
 800295a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800295e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002960:	f7ff fdb4 	bl	80024cc <HAL_GetTick>
 8002964:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002966:	6823      	ldr	r3, [r4, #0]
 8002968:	0398      	lsls	r0, r3, #14
 800296a:	d4ca      	bmi.n	8002902 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800296c:	f7ff fdae 	bl	80024cc <HAL_GetTick>
 8002970:	1b80      	subs	r0, r0, r6
 8002972:	2864      	cmp	r0, #100	; 0x64
 8002974:	d9f7      	bls.n	8002966 <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 8002976:	2003      	movs	r0, #3
}
 8002978:	b002      	add	sp, #8
 800297a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800297e:	b99b      	cbnz	r3, 80029a8 <HAL_RCC_OscConfig+0xb4>
 8002980:	6823      	ldr	r3, [r4, #0]
 8002982:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002986:	6023      	str	r3, [r4, #0]
 8002988:	6823      	ldr	r3, [r4, #0]
 800298a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800298e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002990:	f7ff fd9c 	bl	80024cc <HAL_GetTick>
 8002994:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002996:	6823      	ldr	r3, [r4, #0]
 8002998:	0399      	lsls	r1, r3, #14
 800299a:	d5b2      	bpl.n	8002902 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800299c:	f7ff fd96 	bl	80024cc <HAL_GetTick>
 80029a0:	1b80      	subs	r0, r0, r6
 80029a2:	2864      	cmp	r0, #100	; 0x64
 80029a4:	d9f7      	bls.n	8002996 <HAL_RCC_OscConfig+0xa2>
 80029a6:	e7e6      	b.n	8002976 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029ac:	6823      	ldr	r3, [r4, #0]
 80029ae:	d103      	bne.n	80029b8 <HAL_RCC_OscConfig+0xc4>
 80029b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029b4:	6023      	str	r3, [r4, #0]
 80029b6:	e7cf      	b.n	8002958 <HAL_RCC_OscConfig+0x64>
 80029b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029bc:	6023      	str	r3, [r4, #0]
 80029be:	6823      	ldr	r3, [r4, #0]
 80029c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029c4:	e7cb      	b.n	800295e <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80029c6:	4c68      	ldr	r4, [pc, #416]	; (8002b68 <HAL_RCC_OscConfig+0x274>)
 80029c8:	6863      	ldr	r3, [r4, #4]
 80029ca:	f013 0f0c 	tst.w	r3, #12
 80029ce:	d007      	beq.n	80029e0 <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80029d0:	6863      	ldr	r3, [r4, #4]
 80029d2:	f003 030c 	and.w	r3, r3, #12
 80029d6:	2b08      	cmp	r3, #8
 80029d8:	d110      	bne.n	80029fc <HAL_RCC_OscConfig+0x108>
 80029da:	6863      	ldr	r3, [r4, #4]
 80029dc:	03da      	lsls	r2, r3, #15
 80029de:	d40d      	bmi.n	80029fc <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029e0:	6823      	ldr	r3, [r4, #0]
 80029e2:	079b      	lsls	r3, r3, #30
 80029e4:	d502      	bpl.n	80029ec <HAL_RCC_OscConfig+0xf8>
 80029e6:	692b      	ldr	r3, [r5, #16]
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d1af      	bne.n	800294c <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029ec:	6823      	ldr	r3, [r4, #0]
 80029ee:	696a      	ldr	r2, [r5, #20]
 80029f0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80029f4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80029f8:	6023      	str	r3, [r4, #0]
 80029fa:	e785      	b.n	8002908 <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029fc:	692a      	ldr	r2, [r5, #16]
 80029fe:	4b5b      	ldr	r3, [pc, #364]	; (8002b6c <HAL_RCC_OscConfig+0x278>)
 8002a00:	b16a      	cbz	r2, 8002a1e <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 8002a02:	2201      	movs	r2, #1
 8002a04:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002a06:	f7ff fd61 	bl	80024cc <HAL_GetTick>
 8002a0a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a0c:	6823      	ldr	r3, [r4, #0]
 8002a0e:	079f      	lsls	r7, r3, #30
 8002a10:	d4ec      	bmi.n	80029ec <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a12:	f7ff fd5b 	bl	80024cc <HAL_GetTick>
 8002a16:	1b80      	subs	r0, r0, r6
 8002a18:	2802      	cmp	r0, #2
 8002a1a:	d9f7      	bls.n	8002a0c <HAL_RCC_OscConfig+0x118>
 8002a1c:	e7ab      	b.n	8002976 <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 8002a1e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002a20:	f7ff fd54 	bl	80024cc <HAL_GetTick>
 8002a24:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a26:	6823      	ldr	r3, [r4, #0]
 8002a28:	0798      	lsls	r0, r3, #30
 8002a2a:	f57f af6d 	bpl.w	8002908 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a2e:	f7ff fd4d 	bl	80024cc <HAL_GetTick>
 8002a32:	1b80      	subs	r0, r0, r6
 8002a34:	2802      	cmp	r0, #2
 8002a36:	d9f6      	bls.n	8002a26 <HAL_RCC_OscConfig+0x132>
 8002a38:	e79d      	b.n	8002976 <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a3a:	69aa      	ldr	r2, [r5, #24]
 8002a3c:	4e4a      	ldr	r6, [pc, #296]	; (8002b68 <HAL_RCC_OscConfig+0x274>)
 8002a3e:	4b4b      	ldr	r3, [pc, #300]	; (8002b6c <HAL_RCC_OscConfig+0x278>)
 8002a40:	b1e2      	cbz	r2, 8002a7c <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8002a42:	2201      	movs	r2, #1
 8002a44:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8002a48:	f7ff fd40 	bl	80024cc <HAL_GetTick>
 8002a4c:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a4e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8002a50:	079b      	lsls	r3, r3, #30
 8002a52:	d50d      	bpl.n	8002a70 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002a54:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8002a58:	4b45      	ldr	r3, [pc, #276]	; (8002b70 <HAL_RCC_OscConfig+0x27c>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002a60:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8002a62:	bf00      	nop
  }
  while (Delay --);
 8002a64:	9b01      	ldr	r3, [sp, #4]
 8002a66:	1e5a      	subs	r2, r3, #1
 8002a68:	9201      	str	r2, [sp, #4]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d1f9      	bne.n	8002a62 <HAL_RCC_OscConfig+0x16e>
 8002a6e:	e74f      	b.n	8002910 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a70:	f7ff fd2c 	bl	80024cc <HAL_GetTick>
 8002a74:	1b00      	subs	r0, r0, r4
 8002a76:	2802      	cmp	r0, #2
 8002a78:	d9e9      	bls.n	8002a4e <HAL_RCC_OscConfig+0x15a>
 8002a7a:	e77c      	b.n	8002976 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 8002a7c:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8002a80:	f7ff fd24 	bl	80024cc <HAL_GetTick>
 8002a84:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a86:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8002a88:	079f      	lsls	r7, r3, #30
 8002a8a:	f57f af41 	bpl.w	8002910 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a8e:	f7ff fd1d 	bl	80024cc <HAL_GetTick>
 8002a92:	1b00      	subs	r0, r0, r4
 8002a94:	2802      	cmp	r0, #2
 8002a96:	d9f6      	bls.n	8002a86 <HAL_RCC_OscConfig+0x192>
 8002a98:	e76d      	b.n	8002976 <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a9a:	4c33      	ldr	r4, [pc, #204]	; (8002b68 <HAL_RCC_OscConfig+0x274>)
 8002a9c:	69e3      	ldr	r3, [r4, #28]
 8002a9e:	00d8      	lsls	r0, r3, #3
 8002aa0:	d424      	bmi.n	8002aec <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 8002aa2:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8002aa4:	69e3      	ldr	r3, [r4, #28]
 8002aa6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002aaa:	61e3      	str	r3, [r4, #28]
 8002aac:	69e3      	ldr	r3, [r4, #28]
 8002aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ab2:	9300      	str	r3, [sp, #0]
 8002ab4:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ab6:	4e2f      	ldr	r6, [pc, #188]	; (8002b74 <HAL_RCC_OscConfig+0x280>)
 8002ab8:	6833      	ldr	r3, [r6, #0]
 8002aba:	05d9      	lsls	r1, r3, #23
 8002abc:	d518      	bpl.n	8002af0 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002abe:	68eb      	ldr	r3, [r5, #12]
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d126      	bne.n	8002b12 <HAL_RCC_OscConfig+0x21e>
 8002ac4:	6a23      	ldr	r3, [r4, #32]
 8002ac6:	f043 0301 	orr.w	r3, r3, #1
 8002aca:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8002acc:	f7ff fcfe 	bl	80024cc <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ad0:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002ad4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ad6:	6a23      	ldr	r3, [r4, #32]
 8002ad8:	079b      	lsls	r3, r3, #30
 8002ada:	d53f      	bpl.n	8002b5c <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 8002adc:	2f00      	cmp	r7, #0
 8002ade:	f43f af1b 	beq.w	8002918 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ae2:	69e3      	ldr	r3, [r4, #28]
 8002ae4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ae8:	61e3      	str	r3, [r4, #28]
 8002aea:	e715      	b.n	8002918 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8002aec:	2700      	movs	r7, #0
 8002aee:	e7e2      	b.n	8002ab6 <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002af0:	6833      	ldr	r3, [r6, #0]
 8002af2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002af6:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002af8:	f7ff fce8 	bl	80024cc <HAL_GetTick>
 8002afc:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002afe:	6833      	ldr	r3, [r6, #0]
 8002b00:	05da      	lsls	r2, r3, #23
 8002b02:	d4dc      	bmi.n	8002abe <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b04:	f7ff fce2 	bl	80024cc <HAL_GetTick>
 8002b08:	eba0 0008 	sub.w	r0, r0, r8
 8002b0c:	2864      	cmp	r0, #100	; 0x64
 8002b0e:	d9f6      	bls.n	8002afe <HAL_RCC_OscConfig+0x20a>
 8002b10:	e731      	b.n	8002976 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b12:	b9ab      	cbnz	r3, 8002b40 <HAL_RCC_OscConfig+0x24c>
 8002b14:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b16:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b1a:	f023 0301 	bic.w	r3, r3, #1
 8002b1e:	6223      	str	r3, [r4, #32]
 8002b20:	6a23      	ldr	r3, [r4, #32]
 8002b22:	f023 0304 	bic.w	r3, r3, #4
 8002b26:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8002b28:	f7ff fcd0 	bl	80024cc <HAL_GetTick>
 8002b2c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b2e:	6a23      	ldr	r3, [r4, #32]
 8002b30:	0798      	lsls	r0, r3, #30
 8002b32:	d5d3      	bpl.n	8002adc <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b34:	f7ff fcca 	bl	80024cc <HAL_GetTick>
 8002b38:	1b80      	subs	r0, r0, r6
 8002b3a:	4540      	cmp	r0, r8
 8002b3c:	d9f7      	bls.n	8002b2e <HAL_RCC_OscConfig+0x23a>
 8002b3e:	e71a      	b.n	8002976 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b40:	2b05      	cmp	r3, #5
 8002b42:	6a23      	ldr	r3, [r4, #32]
 8002b44:	d103      	bne.n	8002b4e <HAL_RCC_OscConfig+0x25a>
 8002b46:	f043 0304 	orr.w	r3, r3, #4
 8002b4a:	6223      	str	r3, [r4, #32]
 8002b4c:	e7ba      	b.n	8002ac4 <HAL_RCC_OscConfig+0x1d0>
 8002b4e:	f023 0301 	bic.w	r3, r3, #1
 8002b52:	6223      	str	r3, [r4, #32]
 8002b54:	6a23      	ldr	r3, [r4, #32]
 8002b56:	f023 0304 	bic.w	r3, r3, #4
 8002b5a:	e7b6      	b.n	8002aca <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b5c:	f7ff fcb6 	bl	80024cc <HAL_GetTick>
 8002b60:	1b80      	subs	r0, r0, r6
 8002b62:	4540      	cmp	r0, r8
 8002b64:	d9b7      	bls.n	8002ad6 <HAL_RCC_OscConfig+0x1e2>
 8002b66:	e706      	b.n	8002976 <HAL_RCC_OscConfig+0x82>
 8002b68:	40021000 	.word	0x40021000
 8002b6c:	42420000 	.word	0x42420000
 8002b70:	20000000 	.word	0x20000000
 8002b74:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b78:	4c2a      	ldr	r4, [pc, #168]	; (8002c24 <HAL_RCC_OscConfig+0x330>)
 8002b7a:	6863      	ldr	r3, [r4, #4]
 8002b7c:	f003 030c 	and.w	r3, r3, #12
 8002b80:	2b08      	cmp	r3, #8
 8002b82:	d03e      	beq.n	8002c02 <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b84:	2200      	movs	r2, #0
 8002b86:	4b28      	ldr	r3, [pc, #160]	; (8002c28 <HAL_RCC_OscConfig+0x334>)
 8002b88:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8002b8a:	661a      	str	r2, [r3, #96]	; 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b8c:	d12c      	bne.n	8002be8 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8002b8e:	f7ff fc9d 	bl	80024cc <HAL_GetTick>
 8002b92:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b94:	6823      	ldr	r3, [r4, #0]
 8002b96:	0199      	lsls	r1, r3, #6
 8002b98:	d420      	bmi.n	8002bdc <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002b9a:	6a2b      	ldr	r3, [r5, #32]
 8002b9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ba0:	d105      	bne.n	8002bae <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002ba2:	6862      	ldr	r2, [r4, #4]
 8002ba4:	68a9      	ldr	r1, [r5, #8]
 8002ba6:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002baa:	430a      	orrs	r2, r1
 8002bac:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bae:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8002bb0:	6862      	ldr	r2, [r4, #4]
 8002bb2:	430b      	orrs	r3, r1
 8002bb4:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8002bb8:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 8002bba:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bbc:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8002bbe:	4b1a      	ldr	r3, [pc, #104]	; (8002c28 <HAL_RCC_OscConfig+0x334>)
 8002bc0:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8002bc2:	f7ff fc83 	bl	80024cc <HAL_GetTick>
 8002bc6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002bc8:	6823      	ldr	r3, [r4, #0]
 8002bca:	019a      	lsls	r2, r3, #6
 8002bcc:	f53f aea8 	bmi.w	8002920 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bd0:	f7ff fc7c 	bl	80024cc <HAL_GetTick>
 8002bd4:	1b40      	subs	r0, r0, r5
 8002bd6:	2802      	cmp	r0, #2
 8002bd8:	d9f6      	bls.n	8002bc8 <HAL_RCC_OscConfig+0x2d4>
 8002bda:	e6cc      	b.n	8002976 <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bdc:	f7ff fc76 	bl	80024cc <HAL_GetTick>
 8002be0:	1b80      	subs	r0, r0, r6
 8002be2:	2802      	cmp	r0, #2
 8002be4:	d9d6      	bls.n	8002b94 <HAL_RCC_OscConfig+0x2a0>
 8002be6:	e6c6      	b.n	8002976 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8002be8:	f7ff fc70 	bl	80024cc <HAL_GetTick>
 8002bec:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bee:	6823      	ldr	r3, [r4, #0]
 8002bf0:	019b      	lsls	r3, r3, #6
 8002bf2:	f57f ae95 	bpl.w	8002920 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bf6:	f7ff fc69 	bl	80024cc <HAL_GetTick>
 8002bfa:	1b40      	subs	r0, r0, r5
 8002bfc:	2802      	cmp	r0, #2
 8002bfe:	d9f6      	bls.n	8002bee <HAL_RCC_OscConfig+0x2fa>
 8002c00:	e6b9      	b.n	8002976 <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c02:	2801      	cmp	r0, #1
 8002c04:	f43f aeb8 	beq.w	8002978 <HAL_RCC_OscConfig+0x84>
        pll_config = RCC->CFGR;
 8002c08:	6863      	ldr	r3, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c0a:	6a2a      	ldr	r2, [r5, #32]
 8002c0c:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8002c10:	4291      	cmp	r1, r2
 8002c12:	f47f ae9b 	bne.w	800294c <HAL_RCC_OscConfig+0x58>
 8002c16:	6a6a      	ldr	r2, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002c18:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	f43f ae7f 	beq.w	8002920 <HAL_RCC_OscConfig+0x2c>
 8002c22:	e693      	b.n	800294c <HAL_RCC_OscConfig+0x58>
 8002c24:	40021000 	.word	0x40021000
 8002c28:	42420000 	.word	0x42420000

08002c2c <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8002c2c:	4a0d      	ldr	r2, [pc, #52]	; (8002c64 <HAL_RCC_GetSysClockFreq+0x38>)
 8002c2e:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8002c30:	f003 010c 	and.w	r1, r3, #12
 8002c34:	2908      	cmp	r1, #8
 8002c36:	d112      	bne.n	8002c5e <HAL_RCC_GetSysClockFreq+0x32>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002c38:	480b      	ldr	r0, [pc, #44]	; (8002c68 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002c3a:	f3c3 4183 	ubfx	r1, r3, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c3e:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002c40:	5c40      	ldrb	r0, [r0, r1]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c42:	d509      	bpl.n	8002c58 <HAL_RCC_GetSysClockFreq+0x2c>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002c44:	6853      	ldr	r3, [r2, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002c46:	4a09      	ldr	r2, [pc, #36]	; (8002c6c <HAL_RCC_GetSysClockFreq+0x40>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002c48:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002c4c:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002c4e:	4a08      	ldr	r2, [pc, #32]	; (8002c70 <HAL_RCC_GetSysClockFreq+0x44>)
 8002c50:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002c52:	fbb0 f0f3 	udiv	r0, r0, r3
 8002c56:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002c58:	4b06      	ldr	r3, [pc, #24]	; (8002c74 <HAL_RCC_GetSysClockFreq+0x48>)
 8002c5a:	4358      	muls	r0, r3
 8002c5c:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8002c5e:	4803      	ldr	r0, [pc, #12]	; (8002c6c <HAL_RCC_GetSysClockFreq+0x40>)
}
 8002c60:	4770      	bx	lr
 8002c62:	bf00      	nop
 8002c64:	40021000 	.word	0x40021000
 8002c68:	0800625c 	.word	0x0800625c
 8002c6c:	007a1200 	.word	0x007a1200
 8002c70:	0800626c 	.word	0x0800626c
 8002c74:	003d0900 	.word	0x003d0900

08002c78 <HAL_RCC_ClockConfig>:
{
 8002c78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c7c:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8002c7e:	4604      	mov	r4, r0
 8002c80:	b910      	cbnz	r0, 8002c88 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8002c82:	2001      	movs	r0, #1
}
 8002c84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c88:	4a44      	ldr	r2, [pc, #272]	; (8002d9c <HAL_RCC_ClockConfig+0x124>)
 8002c8a:	6813      	ldr	r3, [r2, #0]
 8002c8c:	f003 0307 	and.w	r3, r3, #7
 8002c90:	428b      	cmp	r3, r1
 8002c92:	d328      	bcc.n	8002ce6 <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c94:	6821      	ldr	r1, [r4, #0]
 8002c96:	078e      	lsls	r6, r1, #30
 8002c98:	d430      	bmi.n	8002cfc <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c9a:	07ca      	lsls	r2, r1, #31
 8002c9c:	d443      	bmi.n	8002d26 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c9e:	4a3f      	ldr	r2, [pc, #252]	; (8002d9c <HAL_RCC_ClockConfig+0x124>)
 8002ca0:	6813      	ldr	r3, [r2, #0]
 8002ca2:	f003 0307 	and.w	r3, r3, #7
 8002ca6:	42ab      	cmp	r3, r5
 8002ca8:	d865      	bhi.n	8002d76 <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002caa:	6822      	ldr	r2, [r4, #0]
 8002cac:	4d3c      	ldr	r5, [pc, #240]	; (8002da0 <HAL_RCC_ClockConfig+0x128>)
 8002cae:	f012 0f04 	tst.w	r2, #4
 8002cb2:	d16c      	bne.n	8002d8e <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cb4:	0713      	lsls	r3, r2, #28
 8002cb6:	d506      	bpl.n	8002cc6 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002cb8:	686b      	ldr	r3, [r5, #4]
 8002cba:	6922      	ldr	r2, [r4, #16]
 8002cbc:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002cc0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002cc4:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002cc6:	f7ff ffb1 	bl	8002c2c <HAL_RCC_GetSysClockFreq>
 8002cca:	686b      	ldr	r3, [r5, #4]
 8002ccc:	4a35      	ldr	r2, [pc, #212]	; (8002da4 <HAL_RCC_ClockConfig+0x12c>)
 8002cce:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002cd2:	5cd3      	ldrb	r3, [r2, r3]
 8002cd4:	40d8      	lsrs	r0, r3
 8002cd6:	4b34      	ldr	r3, [pc, #208]	; (8002da8 <HAL_RCC_ClockConfig+0x130>)
 8002cd8:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8002cda:	4b34      	ldr	r3, [pc, #208]	; (8002dac <HAL_RCC_ClockConfig+0x134>)
 8002cdc:	6818      	ldr	r0, [r3, #0]
 8002cde:	f7ff fbb3 	bl	8002448 <HAL_InitTick>
  return HAL_OK;
 8002ce2:	2000      	movs	r0, #0
 8002ce4:	e7ce      	b.n	8002c84 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ce6:	6813      	ldr	r3, [r2, #0]
 8002ce8:	f023 0307 	bic.w	r3, r3, #7
 8002cec:	430b      	orrs	r3, r1
 8002cee:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cf0:	6813      	ldr	r3, [r2, #0]
 8002cf2:	f003 0307 	and.w	r3, r3, #7
 8002cf6:	428b      	cmp	r3, r1
 8002cf8:	d1c3      	bne.n	8002c82 <HAL_RCC_ClockConfig+0xa>
 8002cfa:	e7cb      	b.n	8002c94 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cfc:	4b28      	ldr	r3, [pc, #160]	; (8002da0 <HAL_RCC_ClockConfig+0x128>)
 8002cfe:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d02:	bf1e      	ittt	ne
 8002d04:	685a      	ldrne	r2, [r3, #4]
 8002d06:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8002d0a:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d0c:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d0e:	bf42      	ittt	mi
 8002d10:	685a      	ldrmi	r2, [r3, #4]
 8002d12:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8002d16:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d18:	685a      	ldr	r2, [r3, #4]
 8002d1a:	68a0      	ldr	r0, [r4, #8]
 8002d1c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002d20:	4302      	orrs	r2, r0
 8002d22:	605a      	str	r2, [r3, #4]
 8002d24:	e7b9      	b.n	8002c9a <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d26:	6862      	ldr	r2, [r4, #4]
 8002d28:	4e1d      	ldr	r6, [pc, #116]	; (8002da0 <HAL_RCC_ClockConfig+0x128>)
 8002d2a:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d2c:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d2e:	d11a      	bne.n	8002d66 <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d30:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d34:	d0a5      	beq.n	8002c82 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d36:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d38:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d3c:	f023 0303 	bic.w	r3, r3, #3
 8002d40:	4313      	orrs	r3, r2
 8002d42:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8002d44:	f7ff fbc2 	bl	80024cc <HAL_GetTick>
 8002d48:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d4a:	6873      	ldr	r3, [r6, #4]
 8002d4c:	6862      	ldr	r2, [r4, #4]
 8002d4e:	f003 030c 	and.w	r3, r3, #12
 8002d52:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002d56:	d0a2      	beq.n	8002c9e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d58:	f7ff fbb8 	bl	80024cc <HAL_GetTick>
 8002d5c:	1bc0      	subs	r0, r0, r7
 8002d5e:	4540      	cmp	r0, r8
 8002d60:	d9f3      	bls.n	8002d4a <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 8002d62:	2003      	movs	r0, #3
 8002d64:	e78e      	b.n	8002c84 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d66:	2a02      	cmp	r2, #2
 8002d68:	d102      	bne.n	8002d70 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d6a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002d6e:	e7e1      	b.n	8002d34 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d70:	f013 0f02 	tst.w	r3, #2
 8002d74:	e7de      	b.n	8002d34 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d76:	6813      	ldr	r3, [r2, #0]
 8002d78:	f023 0307 	bic.w	r3, r3, #7
 8002d7c:	432b      	orrs	r3, r5
 8002d7e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d80:	6813      	ldr	r3, [r2, #0]
 8002d82:	f003 0307 	and.w	r3, r3, #7
 8002d86:	42ab      	cmp	r3, r5
 8002d88:	f47f af7b 	bne.w	8002c82 <HAL_RCC_ClockConfig+0xa>
 8002d8c:	e78d      	b.n	8002caa <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d8e:	686b      	ldr	r3, [r5, #4]
 8002d90:	68e1      	ldr	r1, [r4, #12]
 8002d92:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002d96:	430b      	orrs	r3, r1
 8002d98:	606b      	str	r3, [r5, #4]
 8002d9a:	e78b      	b.n	8002cb4 <HAL_RCC_ClockConfig+0x3c>
 8002d9c:	40022000 	.word	0x40022000
 8002da0:	40021000 	.word	0x40021000
 8002da4:	08006244 	.word	0x08006244
 8002da8:	20000000 	.word	0x20000000
 8002dac:	20000008 	.word	0x20000008

08002db0 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002db0:	4b04      	ldr	r3, [pc, #16]	; (8002dc4 <HAL_RCC_GetPCLK1Freq+0x14>)
 8002db2:	4a05      	ldr	r2, [pc, #20]	; (8002dc8 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8002dba:	5cd3      	ldrb	r3, [r2, r3]
 8002dbc:	4a03      	ldr	r2, [pc, #12]	; (8002dcc <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002dbe:	6810      	ldr	r0, [r2, #0]
}
 8002dc0:	40d8      	lsrs	r0, r3
 8002dc2:	4770      	bx	lr
 8002dc4:	40021000 	.word	0x40021000
 8002dc8:	08006254 	.word	0x08006254
 8002dcc:	20000000 	.word	0x20000000

08002dd0 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002dd0:	4b04      	ldr	r3, [pc, #16]	; (8002de4 <HAL_RCC_GetPCLK2Freq+0x14>)
 8002dd2:	4a05      	ldr	r2, [pc, #20]	; (8002de8 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8002dda:	5cd3      	ldrb	r3, [r2, r3]
 8002ddc:	4a03      	ldr	r2, [pc, #12]	; (8002dec <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002dde:	6810      	ldr	r0, [r2, #0]
}
 8002de0:	40d8      	lsrs	r0, r3
 8002de2:	4770      	bx	lr
 8002de4:	40021000 	.word	0x40021000
 8002de8:	08006254 	.word	0x08006254
 8002dec:	20000000 	.word	0x20000000

08002df0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8002df0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002df2:	b089      	sub	sp, #36	; 0x24
 8002df4:	4605      	mov	r5, r0
 8002df6:	460e      	mov	r6, r1
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8002df8:	f7ff fb68 	bl	80024cc <HAL_GetTick>
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0U, 0U};
 8002dfc:	2300      	movs	r3, #0
  uint32_t tickstart = HAL_GetTick();
 8002dfe:	4607      	mov	r7, r0
  uint32_t *scr = pSCR;

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8002e00:	2108      	movs	r1, #8
 8002e02:	6828      	ldr	r0, [r5, #0]
  uint32_t tempscr[2U] = {0U, 0U};
 8002e04:	e9cd 3300 	strd	r3, r3, [sp]
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8002e08:	f001 f8d0 	bl	8003fac <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8002e0c:	4604      	mov	r4, r0
 8002e0e:	b9d8      	cbnz	r0, 8002e48 <SD_FindSCR+0x58>
  {
    return errorstate;
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8002e10:	6d29      	ldr	r1, [r5, #80]	; 0x50
 8002e12:	6828      	ldr	r0, [r5, #0]
 8002e14:	0409      	lsls	r1, r1, #16
 8002e16:	f001 f973 	bl	8004100 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 8002e1a:	4604      	mov	r4, r0
 8002e1c:	b9a0      	cbnz	r0, 8002e48 <SD_FindSCR+0x58>
  {
    return errorstate;
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
  config.DataLength    = 8U;
 8002e1e:	f04f 32ff 	mov.w	r2, #4294967295
 8002e22:	2308      	movs	r3, #8
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8002e24:	2130      	movs	r1, #48	; 0x30
  config.DataLength    = 8U;
 8002e26:	e9cd 2302 	strd	r2, r3, [sp, #8]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8002e2a:	2302      	movs	r3, #2
 8002e2c:	e9cd 1304 	strd	r1, r3, [sp, #16]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
  config.DPSM          = SDIO_DPSM_ENABLE;
 8002e30:	2301      	movs	r3, #1
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002e32:	9006      	str	r0, [sp, #24]
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8002e34:	a902      	add	r1, sp, #8
 8002e36:	6828      	ldr	r0, [r5, #0]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8002e38:	9307      	str	r3, [sp, #28]
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8002e3a:	f000 ffed 	bl	8003e18 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8002e3e:	6828      	ldr	r0, [r5, #0]
 8002e40:	f001 f98e 	bl	8004160 <SDMMC_CmdSendSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8002e44:	4604      	mov	r4, r0
 8002e46:	b190      	cbz	r0, 8002e6e <SD_FindSCR+0x7e>
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));

  }

  return HAL_SD_ERROR_NONE;
}
 8002e48:	4620      	mov	r0, r4
 8002e4a:	b009      	add	sp, #36	; 0x24
 8002e4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8002e4e:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8002e50:	0293      	lsls	r3, r2, #10
 8002e52:	d512      	bpl.n	8002e7a <SD_FindSCR+0x8a>
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8002e54:	f000 ffba 	bl	8003dcc <SDIO_ReadFIFO>
 8002e58:	ab08      	add	r3, sp, #32
 8002e5a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8002e5e:	f843 0c20 	str.w	r0, [r3, #-32]
      index++;
 8002e62:	3401      	adds	r4, #1
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8002e64:	f7ff fb32 	bl	80024cc <HAL_GetTick>
 8002e68:	1bc0      	subs	r0, r0, r7
 8002e6a:	3001      	adds	r0, #1
 8002e6c:	d023      	beq.n	8002eb6 <SD_FindSCR+0xc6>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8002e6e:	6828      	ldr	r0, [r5, #0]
 8002e70:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8002e72:	f012 0f2a 	tst.w	r2, #42	; 0x2a
 8002e76:	d0ea      	beq.n	8002e4e <SD_FindSCR+0x5e>
 8002e78:	e002      	b.n	8002e80 <SD_FindSCR+0x90>
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8002e7a:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8002e7c:	0491      	lsls	r1, r2, #18
 8002e7e:	d4f1      	bmi.n	8002e64 <SD_FindSCR+0x74>
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8002e80:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8002e82:	0712      	lsls	r2, r2, #28
 8002e84:	d502      	bpl.n	8002e8c <SD_FindSCR+0x9c>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8002e86:	2408      	movs	r4, #8
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8002e88:	6384      	str	r4, [r0, #56]	; 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 8002e8a:	e7dd      	b.n	8002e48 <SD_FindSCR+0x58>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8002e8c:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8002e8e:	0793      	lsls	r3, r2, #30
 8002e90:	d501      	bpl.n	8002e96 <SD_FindSCR+0xa6>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8002e92:	2402      	movs	r4, #2
 8002e94:	e7f8      	b.n	8002e88 <SD_FindSCR+0x98>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8002e96:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8002e98:	f014 0420 	ands.w	r4, r4, #32
 8002e9c:	d001      	beq.n	8002ea2 <SD_FindSCR+0xb2>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8002e9e:	2420      	movs	r4, #32
 8002ea0:	e7f2      	b.n	8002e88 <SD_FindSCR+0x98>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002ea2:	f240 523a 	movw	r2, #1338	; 0x53a
 8002ea6:	9b01      	ldr	r3, [sp, #4]
 8002ea8:	6382      	str	r2, [r0, #56]	; 0x38
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8002eaa:	ba1b      	rev	r3, r3
 8002eac:	6033      	str	r3, [r6, #0]
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8002eae:	9b00      	ldr	r3, [sp, #0]
 8002eb0:	ba1b      	rev	r3, r3
 8002eb2:	6073      	str	r3, [r6, #4]
  return HAL_SD_ERROR_NONE;
 8002eb4:	e7c8      	b.n	8002e48 <SD_FindSCR+0x58>
      return HAL_SD_ERROR_TIMEOUT;
 8002eb6:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8002eba:	e7c5      	b.n	8002e48 <SD_FindSCR+0x58>

08002ebc <HAL_SD_ReadBlocks>:
{
 8002ebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ec0:	b089      	sub	sp, #36	; 0x24
 8002ec2:	4604      	mov	r4, r0
 8002ec4:	460d      	mov	r5, r1
 8002ec6:	4616      	mov	r6, r2
 8002ec8:	469a      	mov	sl, r3
  uint32_t tickstart = HAL_GetTick();
 8002eca:	f7ff faff 	bl	80024cc <HAL_GetTick>
 8002ece:	4680      	mov	r8, r0
  if(NULL == pData)
 8002ed0:	b92d      	cbnz	r5, 8002ede <HAL_SD_ReadBlocks+0x22>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002ed2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002ed4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    return HAL_ERROR;
 8002ed8:	2701      	movs	r7, #1
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8002eda:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8002edc:	e010      	b.n	8002f00 <HAL_SD_ReadBlocks+0x44>
  if(hsd->State == HAL_SD_STATE_READY)
 8002ede:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	b2df      	uxtb	r7, r3
 8002ee6:	f040 80e6 	bne.w	80030b6 <HAL_SD_ReadBlocks+0x1fa>
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002eea:	2100      	movs	r1, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002eec:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002eee:	eb06 030a 	add.w	r3, r6, sl
 8002ef2:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002ef4:	63a1      	str	r1, [r4, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002ef6:	d907      	bls.n	8002f08 <HAL_SD_ReadBlocks+0x4c>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002ef8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002efa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002efe:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8002f00:	4638      	mov	r0, r7
 8002f02:	b009      	add	sp, #36	; 0x24
 8002f04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hsd->State = HAL_SD_STATE_BUSY;
 8002f08:	2303      	movs	r3, #3
 8002f0a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002f0e:	6c63      	ldr	r3, [r4, #68]	; 0x44
    config.DPSM          = SDIO_DPSM_ENABLE;
 8002f10:	2200      	movs	r2, #0
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002f12:	2b01      	cmp	r3, #1
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002f14:	f04f 33ff 	mov.w	r3, #4294967295
 8002f18:	9302      	str	r3, [sp, #8]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8002f1a:	ea4f 234a 	mov.w	r3, sl, lsl #9
    config.DPSM          = SDIO_DPSM_ENABLE;
 8002f1e:	f04f 0b01 	mov.w	fp, #1
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8002f22:	9303      	str	r3, [sp, #12]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8002f24:	f04f 0902 	mov.w	r9, #2
 8002f28:	f04f 0390 	mov.w	r3, #144	; 0x90
    hsd->Instance->DCTRL = 0U;
 8002f2c:	6820      	ldr	r0, [r4, #0]
      add *= 512U;
 8002f2e:	bf18      	it	ne
 8002f30:	0276      	lslne	r6, r6, #9
    hsd->Instance->DCTRL = 0U;
 8002f32:	62c1      	str	r1, [r0, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8002f34:	a902      	add	r1, sp, #8
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8002f36:	e9cd 3904 	strd	r3, r9, [sp, #16]
    config.DPSM          = SDIO_DPSM_ENABLE;
 8002f3a:	e9cd 2b06 	strd	r2, fp, [sp, #24]
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8002f3e:	f000 ff6b 	bl	8003e18 <SDIO_ConfigData>
    if(NumberOfBlocks > 1U)
 8002f42:	45da      	cmp	sl, fp
 8002f44:	d912      	bls.n	8002f6c <HAL_SD_ReadBlocks+0xb0>
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8002f46:	4631      	mov	r1, r6
 8002f48:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8002f4a:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8002f4e:	f001 f85d 	bl	800400c <SDMMC_CmdReadMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 8002f52:	b190      	cbz	r0, 8002f7a <HAL_SD_ReadBlocks+0xbe>
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002f54:	6823      	ldr	r3, [r4, #0]
 8002f56:	4a5a      	ldr	r2, [pc, #360]	; (80030c0 <HAL_SD_ReadBlocks+0x204>)
 8002f58:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8002f5a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002f5c:	4318      	orrs	r0, r3
 8002f5e:	63a0      	str	r0, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8002f60:	2301      	movs	r3, #1
 8002f62:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002f66:	2300      	movs	r3, #0
 8002f68:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_ERROR;
 8002f6a:	e7c9      	b.n	8002f00 <HAL_SD_ReadBlocks+0x44>
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8002f6c:	4631      	mov	r1, r6
 8002f6e:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8002f70:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8002f74:	f001 f832 	bl	8003fdc <SDMMC_CmdReadSingleBlock>
 8002f78:	e7eb      	b.n	8002f52 <HAL_SD_ReadBlocks+0x96>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8002f7a:	f240 3b2a 	movw	fp, #810	; 0x32a
    dataremaining = config.DataLength;
 8002f7e:	9e03      	ldr	r6, [sp, #12]
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8002f80:	6820      	ldr	r0, [r4, #0]
 8002f82:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002f84:	ea13 0f0b 	tst.w	r3, fp
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8002f88:	6b43      	ldr	r3, [r0, #52]	; 0x34
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8002f8a:	d017      	beq.n	8002fbc <HAL_SD_ReadBlocks+0x100>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8002f8c:	05db      	lsls	r3, r3, #23
 8002f8e:	d509      	bpl.n	8002fa4 <HAL_SD_ReadBlocks+0xe8>
 8002f90:	f1ba 0f01 	cmp.w	sl, #1
 8002f94:	d906      	bls.n	8002fa4 <HAL_SD_ReadBlocks+0xe8>
      if(hsd->SdCard.CardType != CARD_SECURED)
 8002f96:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002f98:	2b03      	cmp	r3, #3
 8002f9a:	d003      	beq.n	8002fa4 <HAL_SD_ReadBlocks+0xe8>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002f9c:	f001 f87e 	bl	800409c <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8002fa0:	2800      	cmp	r0, #0
 8002fa2:	d1d7      	bne.n	8002f54 <HAL_SD_ReadBlocks+0x98>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8002fa4:	6823      	ldr	r3, [r4, #0]
 8002fa6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002fa8:	f011 0108 	ands.w	r1, r1, #8
 8002fac:	d038      	beq.n	8003020 <HAL_SD_ReadBlocks+0x164>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002fae:	4a44      	ldr	r2, [pc, #272]	; (80030c0 <HAL_SD_ReadBlocks+0x204>)
 8002fb0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002fb2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002fb4:	f043 0308 	orr.w	r3, r3, #8
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8002fb8:	63a3      	str	r3, [r4, #56]	; 0x38
 8002fba:	e7d1      	b.n	8002f60 <HAL_SD_ReadBlocks+0xa4>
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8002fbc:	041a      	lsls	r2, r3, #16
 8002fbe:	d51a      	bpl.n	8002ff6 <HAL_SD_ReadBlocks+0x13a>
 8002fc0:	b1ce      	cbz	r6, 8002ff6 <HAL_SD_ReadBlocks+0x13a>
 8002fc2:	f105 0904 	add.w	r9, r5, #4
 8002fc6:	f105 0224 	add.w	r2, r5, #36	; 0x24
          data = SDIO_ReadFIFO(hsd->Instance);
 8002fca:	6820      	ldr	r0, [r4, #0]
 8002fcc:	9201      	str	r2, [sp, #4]
 8002fce:	f000 fefd 	bl	8003dcc <SDIO_ReadFIFO>
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8002fd2:	0a01      	lsrs	r1, r0, #8
          *tempbuff = (uint8_t)(data & 0xFFU);
 8002fd4:	f809 0c04 	strb.w	r0, [r9, #-4]
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8002fd8:	f809 1c03 	strb.w	r1, [r9, #-3]
        for(count = 0U; count < 8U; count++)
 8002fdc:	9a01      	ldr	r2, [sp, #4]
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8002fde:	0c01      	lsrs	r1, r0, #16
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8002fe0:	0e00      	lsrs	r0, r0, #24
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8002fe2:	f809 1c02 	strb.w	r1, [r9, #-2]
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8002fe6:	f809 0c01 	strb.w	r0, [r9, #-1]
        for(count = 0U; count < 8U; count++)
 8002fea:	f109 0904 	add.w	r9, r9, #4
 8002fee:	454a      	cmp	r2, r9
 8002ff0:	d1eb      	bne.n	8002fca <HAL_SD_ReadBlocks+0x10e>
          tempbuff++;
 8002ff2:	3520      	adds	r5, #32
          dataremaining--;
 8002ff4:	3e20      	subs	r6, #32
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8002ff6:	f7ff fa69 	bl	80024cc <HAL_GetTick>
 8002ffa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002ffc:	eba0 0008 	sub.w	r0, r0, r8
 8003000:	4298      	cmp	r0, r3
 8003002:	d3bd      	bcc.n	8002f80 <HAL_SD_ReadBlocks+0xc4>
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003004:	6823      	ldr	r3, [r4, #0]
 8003006:	4a2e      	ldr	r2, [pc, #184]	; (80030c0 <HAL_SD_ReadBlocks+0x204>)
        return HAL_TIMEOUT;
 8003008:	2703      	movs	r7, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800300a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800300c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800300e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003012:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8003014:	2301      	movs	r3, #1
 8003016:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800301a:	2300      	movs	r3, #0
 800301c:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_TIMEOUT;
 800301e:	e76f      	b.n	8002f00 <HAL_SD_ReadBlocks+0x44>
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8003020:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003022:	f012 0202 	ands.w	r2, r2, #2
 8003026:	d00a      	beq.n	800303e <HAL_SD_ReadBlocks+0x182>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003028:	4a25      	ldr	r2, [pc, #148]	; (80030c0 <HAL_SD_ReadBlocks+0x204>)
 800302a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800302c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800302e:	f043 0302 	orr.w	r3, r3, #2
 8003032:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003034:	2301      	movs	r3, #1
 8003036:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800303a:	6321      	str	r1, [r4, #48]	; 0x30
      return HAL_ERROR;
 800303c:	e760      	b.n	8002f00 <HAL_SD_ReadBlocks+0x44>
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800303e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003040:	0689      	lsls	r1, r1, #26
 8003042:	d529      	bpl.n	8003098 <HAL_SD_ReadBlocks+0x1dc>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003044:	491e      	ldr	r1, [pc, #120]	; (80030c0 <HAL_SD_ReadBlocks+0x204>)
 8003046:	6399      	str	r1, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003048:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800304a:	f043 0320 	orr.w	r3, r3, #32
 800304e:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003050:	2301      	movs	r3, #1
 8003052:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003056:	6322      	str	r2, [r4, #48]	; 0x30
      return HAL_ERROR;
 8003058:	e752      	b.n	8002f00 <HAL_SD_ReadBlocks+0x44>
      data = SDIO_ReadFIFO(hsd->Instance);
 800305a:	f000 feb7 	bl	8003dcc <SDIO_ReadFIFO>
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800305e:	0a03      	lsrs	r3, r0, #8
 8003060:	f805 3c03 	strb.w	r3, [r5, #-3]
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8003064:	0c03      	lsrs	r3, r0, #16
 8003066:	f805 3c02 	strb.w	r3, [r5, #-2]
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800306a:	0e03      	lsrs	r3, r0, #24
 800306c:	f805 3c01 	strb.w	r3, [r5, #-1]
      *tempbuff = (uint8_t)(data & 0xFFU);
 8003070:	f805 0c04 	strb.w	r0, [r5, #-4]
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003074:	f7ff fa2a 	bl	80024cc <HAL_GetTick>
 8003078:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800307a:	eba0 0008 	sub.w	r0, r0, r8
 800307e:	4298      	cmp	r0, r3
      dataremaining--;
 8003080:	f1a6 0604 	sub.w	r6, r6, #4
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003084:	f105 0504 	add.w	r5, r5, #4
 8003088:	d307      	bcc.n	800309a <HAL_SD_ReadBlocks+0x1de>
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800308a:	6823      	ldr	r3, [r4, #0]
 800308c:	4a0c      	ldr	r2, [pc, #48]	; (80030c0 <HAL_SD_ReadBlocks+0x204>)
 800308e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8003090:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003092:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003096:	e78f      	b.n	8002fb8 <HAL_SD_ReadBlocks+0xfc>
 8003098:	3504      	adds	r5, #4
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 800309a:	6820      	ldr	r0, [r4, #0]
 800309c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800309e:	029b      	lsls	r3, r3, #10
 80030a0:	d501      	bpl.n	80030a6 <HAL_SD_ReadBlocks+0x1ea>
 80030a2:	2e00      	cmp	r6, #0
 80030a4:	d1d9      	bne.n	800305a <HAL_SD_ReadBlocks+0x19e>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80030a6:	f240 533a 	movw	r3, #1338	; 0x53a
 80030aa:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80030ac:	2301      	movs	r3, #1
    return HAL_OK;
 80030ae:	2700      	movs	r7, #0
    hsd->State = HAL_SD_STATE_READY;
 80030b0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_OK;
 80030b4:	e724      	b.n	8002f00 <HAL_SD_ReadBlocks+0x44>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80030b6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80030b8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80030bc:	e70c      	b.n	8002ed8 <HAL_SD_ReadBlocks+0x1c>
 80030be:	bf00      	nop
 80030c0:	004005ff 	.word	0x004005ff

080030c4 <HAL_SD_WriteBlocks>:
{
 80030c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030c8:	b089      	sub	sp, #36	; 0x24
 80030ca:	4604      	mov	r4, r0
 80030cc:	460d      	mov	r5, r1
 80030ce:	4692      	mov	sl, r2
 80030d0:	461f      	mov	r7, r3
  uint32_t tickstart = HAL_GetTick();
 80030d2:	f7ff f9fb 	bl	80024cc <HAL_GetTick>
 80030d6:	4681      	mov	r9, r0
  if(NULL == pData)
 80030d8:	b935      	cbnz	r5, 80030e8 <HAL_SD_WriteBlocks+0x24>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80030da:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80030dc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    return HAL_ERROR;
 80030e0:	f04f 0801 	mov.w	r8, #1
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80030e4:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 80030e6:	e011      	b.n	800310c <HAL_SD_WriteBlocks+0x48>
  if(hsd->State == HAL_SD_STATE_READY)
 80030e8:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	fa5f f883 	uxtb.w	r8, r3
 80030f2:	f040 80b1 	bne.w	8003258 <HAL_SD_WriteBlocks+0x194>
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80030f6:	2100      	movs	r1, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80030f8:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80030fa:	eb0a 0307 	add.w	r3, sl, r7
 80030fe:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003100:	63a1      	str	r1, [r4, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003102:	d907      	bls.n	8003114 <HAL_SD_WriteBlocks+0x50>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003104:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003106:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800310a:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800310c:	4640      	mov	r0, r8
 800310e:	b009      	add	sp, #36	; 0x24
 8003110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hsd->State = HAL_SD_STATE_BUSY;
 8003114:	2303      	movs	r3, #3
 8003116:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800311a:	6c63      	ldr	r3, [r4, #68]	; 0x44
    hsd->Instance->DCTRL = 0U;
 800311c:	6820      	ldr	r0, [r4, #0]
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800311e:	2b01      	cmp	r3, #1
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003120:	f04f 33ff 	mov.w	r3, #4294967295
 8003124:	9302      	str	r3, [sp, #8]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8003126:	ea4f 2347 	mov.w	r3, r7, lsl #9
    hsd->Instance->DCTRL = 0U;
 800312a:	62c1      	str	r1, [r0, #44]	; 0x2c
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800312c:	9303      	str	r3, [sp, #12]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800312e:	f04f 0190 	mov.w	r1, #144	; 0x90
 8003132:	f04f 0300 	mov.w	r3, #0
 8003136:	e9cd 1304 	strd	r1, r3, [sp, #16]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800313a:	9306      	str	r3, [sp, #24]
    config.DPSM          = SDIO_DPSM_ENABLE;
 800313c:	f04f 0301 	mov.w	r3, #1
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8003140:	a902      	add	r1, sp, #8
      add *= 512U;
 8003142:	bf18      	it	ne
 8003144:	ea4f 2a4a 	movne.w	sl, sl, lsl #9
    config.DPSM          = SDIO_DPSM_ENABLE;
 8003148:	9307      	str	r3, [sp, #28]
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800314a:	f000 fe65 	bl	8003e18 <SDIO_ConfigData>
    if(NumberOfBlocks > 1U)
 800314e:	2f01      	cmp	r7, #1
 8003150:	d912      	bls.n	8003178 <HAL_SD_WriteBlocks+0xb4>
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8003152:	2320      	movs	r3, #32
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8003154:	4651      	mov	r1, sl
 8003156:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8003158:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800315a:	f000 ff87 	bl	800406c <SDMMC_CmdWriteMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 800315e:	b190      	cbz	r0, 8003186 <HAL_SD_WriteBlocks+0xc2>
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003160:	6823      	ldr	r3, [r4, #0]
 8003162:	4a3f      	ldr	r2, [pc, #252]	; (8003260 <HAL_SD_WriteBlocks+0x19c>)
 8003164:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8003166:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003168:	4318      	orrs	r0, r3
 800316a:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800316c:	2301      	movs	r3, #1
 800316e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003172:	2300      	movs	r3, #0
 8003174:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8003176:	e7c9      	b.n	800310c <HAL_SD_WriteBlocks+0x48>
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8003178:	2310      	movs	r3, #16
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800317a:	4651      	mov	r1, sl
 800317c:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800317e:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8003180:	f000 ff5c 	bl	800403c <SDMMC_CmdWriteSingleBlock>
 8003184:	e7eb      	b.n	800315e <HAL_SD_WriteBlocks+0x9a>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8003186:	f240 3a1a 	movw	sl, #794	; 0x31a
    dataremaining = config.DataLength;
 800318a:	9e03      	ldr	r6, [sp, #12]
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800318c:	6820      	ldr	r0, [r4, #0]
 800318e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003190:	ea13 0f0a 	tst.w	r3, sl
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8003194:	6b43      	ldr	r3, [r0, #52]	; 0x34
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8003196:	d016      	beq.n	80031c6 <HAL_SD_WriteBlocks+0x102>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003198:	05db      	lsls	r3, r3, #23
 800319a:	d508      	bpl.n	80031ae <HAL_SD_WriteBlocks+0xea>
 800319c:	2f01      	cmp	r7, #1
 800319e:	d906      	bls.n	80031ae <HAL_SD_WriteBlocks+0xea>
      if(hsd->SdCard.CardType != CARD_SECURED)
 80031a0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80031a2:	2b03      	cmp	r3, #3
 80031a4:	d003      	beq.n	80031ae <HAL_SD_WriteBlocks+0xea>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80031a6:	f000 ff79 	bl	800409c <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 80031aa:	2800      	cmp	r0, #0
 80031ac:	d1d8      	bne.n	8003160 <HAL_SD_WriteBlocks+0x9c>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80031ae:	6823      	ldr	r3, [r4, #0]
 80031b0:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80031b2:	f010 0008 	ands.w	r0, r0, #8
 80031b6:	d029      	beq.n	800320c <HAL_SD_WriteBlocks+0x148>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80031b8:	4a29      	ldr	r2, [pc, #164]	; (8003260 <HAL_SD_WriteBlocks+0x19c>)
 80031ba:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80031bc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80031be:	f043 0308 	orr.w	r3, r3, #8
 80031c2:	63a3      	str	r3, [r4, #56]	; 0x38
 80031c4:	e7d2      	b.n	800316c <HAL_SD_WriteBlocks+0xa8>
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 80031c6:	045a      	lsls	r2, r3, #17
 80031c8:	d50c      	bpl.n	80031e4 <HAL_SD_WriteBlocks+0x120>
 80031ca:	b15e      	cbz	r6, 80031e4 <HAL_SD_WriteBlocks+0x120>
 80031cc:	f105 0b20 	add.w	fp, r5, #32
          data |= ((uint32_t)(*tempbuff) << 24U);
 80031d0:	f855 2b04 	ldr.w	r2, [r5], #4
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80031d4:	6820      	ldr	r0, [r4, #0]
 80031d6:	a901      	add	r1, sp, #4
          data |= ((uint32_t)(*tempbuff) << 24U);
 80031d8:	9201      	str	r2, [sp, #4]
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80031da:	f000 fdfa 	bl	8003dd2 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80031de:	45ab      	cmp	fp, r5
 80031e0:	d1f6      	bne.n	80031d0 <HAL_SD_WriteBlocks+0x10c>
          dataremaining--;
 80031e2:	3e20      	subs	r6, #32
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80031e4:	f7ff f972 	bl	80024cc <HAL_GetTick>
 80031e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80031ea:	eba0 0009 	sub.w	r0, r0, r9
 80031ee:	4298      	cmp	r0, r3
 80031f0:	d3cc      	bcc.n	800318c <HAL_SD_WriteBlocks+0xc8>
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80031f2:	6823      	ldr	r3, [r4, #0]
 80031f4:	4a1a      	ldr	r2, [pc, #104]	; (8003260 <HAL_SD_WriteBlocks+0x19c>)
        return HAL_TIMEOUT;
 80031f6:	f04f 0803 	mov.w	r8, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80031fa:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80031fc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80031fe:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003200:	2301      	movs	r3, #1
 8003202:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003206:	2300      	movs	r3, #0
 8003208:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_TIMEOUT;
 800320a:	e77f      	b.n	800310c <HAL_SD_WriteBlocks+0x48>
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800320c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800320e:	f011 0102 	ands.w	r1, r1, #2
 8003212:	d00a      	beq.n	800322a <HAL_SD_WriteBlocks+0x166>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003214:	4a12      	ldr	r2, [pc, #72]	; (8003260 <HAL_SD_WriteBlocks+0x19c>)
 8003216:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003218:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800321a:	f043 0302 	orr.w	r3, r3, #2
 800321e:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003220:	2301      	movs	r3, #1
 8003222:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003226:	6320      	str	r0, [r4, #48]	; 0x30
      return HAL_ERROR;
 8003228:	e770      	b.n	800310c <HAL_SD_WriteBlocks+0x48>
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 800322a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800322c:	f012 0210 	ands.w	r2, r2, #16
 8003230:	d00a      	beq.n	8003248 <HAL_SD_WriteBlocks+0x184>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003232:	4a0b      	ldr	r2, [pc, #44]	; (8003260 <HAL_SD_WriteBlocks+0x19c>)
 8003234:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003236:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003238:	f043 0310 	orr.w	r3, r3, #16
 800323c:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800323e:	2301      	movs	r3, #1
 8003240:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003244:	6321      	str	r1, [r4, #48]	; 0x30
      return HAL_ERROR;
 8003246:	e761      	b.n	800310c <HAL_SD_WriteBlocks+0x48>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003248:	f240 513a 	movw	r1, #1338	; 0x53a
 800324c:	6399      	str	r1, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800324e:	2301      	movs	r3, #1
    return HAL_OK;
 8003250:	4690      	mov	r8, r2
    hsd->State = HAL_SD_STATE_READY;
 8003252:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_OK;
 8003256:	e759      	b.n	800310c <HAL_SD_WriteBlocks+0x48>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003258:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800325a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800325e:	e73f      	b.n	80030e0 <HAL_SD_WriteBlocks+0x1c>
 8003260:	004005ff 	.word	0x004005ff

08003264 <HAL_SD_ErrorCallback>:
 8003264:	4770      	bx	lr
	...

08003268 <HAL_SD_GetCardCSD>:
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8003268:	6e43      	ldr	r3, [r0, #100]	; 0x64
{
 800326a:	b510      	push	{r4, lr}
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800326c:	0f9a      	lsrs	r2, r3, #30
 800326e:	700a      	strb	r2, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8003270:	f3c3 6283 	ubfx	r2, r3, #26, #4
 8003274:	704a      	strb	r2, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8003276:	f3c3 6201 	ubfx	r2, r3, #24, #2
 800327a:	708a      	strb	r2, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800327c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8003280:	70ca      	strb	r2, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8003282:	f3c3 2207 	ubfx	r2, r3, #8, #8
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8003286:	b2db      	uxtb	r3, r3
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8003288:	710a      	strb	r2, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800328a:	714b      	strb	r3, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800328c:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800328e:	0d1a      	lsrs	r2, r3, #20
 8003290:	80ca      	strh	r2, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8003292:	f3c3 4203 	ubfx	r2, r3, #16, #4
 8003296:	720a      	strb	r2, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8003298:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 800329c:	724a      	strb	r2, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800329e:	f3c3 3280 	ubfx	r2, r3, #14, #1
 80032a2:	728a      	strb	r2, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80032a4:	f3c3 3240 	ubfx	r2, r3, #13, #1
 80032a8:	72ca      	strb	r2, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80032aa:	f3c3 3200 	ubfx	r2, r3, #12, #1
 80032ae:	730a      	strb	r2, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 80032b0:	2200      	movs	r2, #0
 80032b2:	734a      	strb	r2, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 80032b4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80032b6:	2a00      	cmp	r2, #0
 80032b8:	d16c      	bne.n	8003394 <HAL_SD_GetCardCSD+0x12c>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80032ba:	f640 74fc 	movw	r4, #4092	; 0xffc
 80032be:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 80032c0:	ea04 0383 	and.w	r3, r4, r3, lsl #2
 80032c4:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
 80032c8:	610b      	str	r3, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80032ca:	f3c2 63c2 	ubfx	r3, r2, #27, #3
 80032ce:	750b      	strb	r3, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80032d0:	f3c2 6302 	ubfx	r3, r2, #24, #3
 80032d4:	754b      	strb	r3, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80032d6:	f3c2 5342 	ubfx	r3, r2, #21, #3
 80032da:	758b      	strb	r3, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80032dc:	f3c2 4382 	ubfx	r3, r2, #18, #3
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80032e0:	f3c2 32c2 	ubfx	r2, r2, #15, #3
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80032e4:	75cb      	strb	r3, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80032e6:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80032e8:	690b      	ldr	r3, [r1, #16]
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80032ea:	7e0a      	ldrb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80032ec:	3301      	adds	r3, #1
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80032ee:	f002 0207 	and.w	r2, r2, #7
 80032f2:	3202      	adds	r2, #2
 80032f4:	fa03 f202 	lsl.w	r2, r3, r2
 80032f8:	6542      	str	r2, [r0, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80032fa:	7a0b      	ldrb	r3, [r1, #8]
 80032fc:	f003 040f 	and.w	r4, r3, #15
 8003300:	2301      	movs	r3, #1
 8003302:	40a3      	lsls	r3, r4
 8003304:	6583      	str	r3, [r0, #88]	; 0x58
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8003306:	0a5b      	lsrs	r3, r3, #9
 8003308:	4353      	muls	r3, r2
 800330a:	65c3      	str	r3, [r0, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800330c:	f44f 7300 	mov.w	r3, #512	; 0x200
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8003310:	6603      	str	r3, [r0, #96]	; 0x60
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8003312:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8003314:	f3c3 3280 	ubfx	r2, r3, #14, #1
 8003318:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800331a:	f3c3 12c6 	ubfx	r2, r3, #7, #7
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800331e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8003322:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8003324:	76cb      	strb	r3, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8003326:	6f03      	ldr	r3, [r0, #112]	; 0x70
  pCSD->Reserved3 = 0;
 8003328:	2000      	movs	r0, #0
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800332a:	0fda      	lsrs	r2, r3, #31
 800332c:	770a      	strb	r2, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800332e:	f3c3 7241 	ubfx	r2, r3, #29, #2
 8003332:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8003334:	f3c3 6282 	ubfx	r2, r3, #26, #3
 8003338:	778a      	strb	r2, [r1, #30]
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800333a:	f3c3 5283 	ubfx	r2, r3, #22, #4
 800333e:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8003340:	f3c3 5240 	ubfx	r2, r3, #21, #1
 8003344:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8003348:	f3c3 4200 	ubfx	r2, r3, #16, #1
  pCSD->Reserved3 = 0;
 800334c:	f881 0021 	strb.w	r0, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8003350:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8003354:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 8003358:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800335c:	f3c3 3280 	ubfx	r2, r3, #14, #1
 8003360:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8003364:	f3c3 3240 	ubfx	r2, r3, #13, #1
 8003368:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800336c:	f3c3 3200 	ubfx	r2, r3, #12, #1
 8003370:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8003374:	f3c3 2281 	ubfx	r2, r3, #10, #2
 8003378:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800337c:	f3c3 2201 	ubfx	r2, r3, #8, #2
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8003380:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8003384:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8003388:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 800338c:	2301      	movs	r3, #1
 800338e:	f881 302a 	strb.w	r3, [r1, #42]	; 0x2a
}
 8003392:	bd10      	pop	{r4, pc}
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8003394:	2a01      	cmp	r2, #1
 8003396:	d10f      	bne.n	80033b8 <HAL_SD_GetCardCSD+0x150>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8003398:	f8b0 206e 	ldrh.w	r2, [r0, #110]	; 0x6e
 800339c:	041b      	lsls	r3, r3, #16
 800339e:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 80033a2:	4313      	orrs	r3, r2
 80033a4:	610b      	str	r3, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80033a6:	690b      	ldr	r3, [r1, #16]
 80033a8:	3301      	adds	r3, #1
 80033aa:	029b      	lsls	r3, r3, #10
 80033ac:	6543      	str	r3, [r0, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80033ae:	65c3      	str	r3, [r0, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80033b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80033b4:	6583      	str	r3, [r0, #88]	; 0x58
 80033b6:	e7ab      	b.n	8003310 <HAL_SD_GetCardCSD+0xa8>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80033b8:	6803      	ldr	r3, [r0, #0]
 80033ba:	4a05      	ldr	r2, [pc, #20]	; (80033d0 <HAL_SD_GetCardCSD+0x168>)
 80033bc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80033be:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80033c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033c4:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80033c6:	2301      	movs	r3, #1
 80033c8:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    return HAL_ERROR;
 80033cc:	4618      	mov	r0, r3
 80033ce:	e7e0      	b.n	8003392 <HAL_SD_GetCardCSD+0x12a>
 80033d0:	004005ff 	.word	0x004005ff

080033d4 <HAL_SD_InitCard>:
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80033d4:	2300      	movs	r3, #0
{
 80033d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80033da:	b098      	sub	sp, #96	; 0x60
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80033dc:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80033e0:	e9cd 3307 	strd	r3, r3, [sp, #28]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80033e4:	930b      	str	r3, [sp, #44]	; 0x2c
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80033e6:	2376      	movs	r3, #118	; 0x76
{
 80033e8:	4604      	mov	r4, r0
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80033ea:	930c      	str	r3, [sp, #48]	; 0x30
  status = SDIO_Init(hsd->Instance, Init);
 80033ec:	ab0a      	add	r3, sp, #40	; 0x28
 80033ee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80033f2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80033f6:	ab07      	add	r3, sp, #28
 80033f8:	6820      	ldr	r0, [r4, #0]
 80033fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80033fc:	f000 fcca 	bl	8003d94 <SDIO_Init>
  if(status != HAL_OK)
 8003400:	4605      	mov	r5, r0
 8003402:	2800      	cmp	r0, #0
 8003404:	f040 80e6 	bne.w	80035d4 <HAL_SD_InitCard+0x200>
  __HAL_SD_ENABLE(hsd);
 8003408:	2601      	movs	r6, #1
  __HAL_SD_DISABLE(hsd);
 800340a:	4f73      	ldr	r7, [pc, #460]	; (80035d8 <HAL_SD_InitCard+0x204>)
 800340c:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
  (void)SDIO_PowerState_ON(hsd->Instance);
 8003410:	6820      	ldr	r0, [r4, #0]
 8003412:	f000 fce3 	bl	8003ddc <SDIO_PowerState_ON>
  HAL_Delay(2);
 8003416:	2002      	movs	r0, #2
  __HAL_SD_ENABLE(hsd);
 8003418:	f8c7 60a0 	str.w	r6, [r7, #160]	; 0xa0
  HAL_Delay(2);
 800341c:	f7ff f85c 	bl	80024d8 <HAL_Delay>
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003420:	6820      	ldr	r0, [r4, #0]
  __IO uint32_t count = 0U;
 8003422:	9506      	str	r5, [sp, #24]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003424:	f000 fd0c 	bl	8003e40 <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 8003428:	4605      	mov	r5, r0
 800342a:	b940      	cbnz	r0, 800343e <HAL_SD_InitCard+0x6a>
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800342c:	6820      	ldr	r0, [r4, #0]
 800342e:	f000 ffd5 	bl	80043dc <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 8003432:	b170      	cbz	r0, 8003452 <HAL_SD_InitCard+0x7e>
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003434:	6820      	ldr	r0, [r4, #0]
    hsd->SdCard.CardVersion = CARD_V1_X;
 8003436:	64a5      	str	r5, [r4, #72]	; 0x48
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003438:	f000 fd02 	bl	8003e40 <SDMMC_CmdGoIdleState>
    if(errorstate != HAL_SD_ERROR_NONE)
 800343c:	b190      	cbz	r0, 8003464 <HAL_SD_InitCard+0x90>
    hsd->State = HAL_SD_STATE_READY;
 800343e:	2501      	movs	r5, #1
 8003440:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003444:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003446:	4303      	orrs	r3, r0
 8003448:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800344a:	4628      	mov	r0, r5
 800344c:	b018      	add	sp, #96	; 0x60
 800344e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hsd->SdCard.CardVersion = CARD_V2_X;
 8003452:	64a6      	str	r6, [r4, #72]	; 0x48
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003454:	2100      	movs	r1, #0
 8003456:	6820      	ldr	r0, [r4, #0]
 8003458:	f000 fe52 	bl	8004100 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800345c:	b128      	cbz	r0, 800346a <HAL_SD_InitCard+0x96>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800345e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8003462:	e7ec      	b.n	800343e <HAL_SD_InitCard+0x6a>
  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8003464:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003466:	2b01      	cmp	r3, #1
 8003468:	d0f4      	beq.n	8003454 <HAL_SD_InitCard+0x80>
{
 800346a:	2600      	movs	r6, #0
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800346c:	f64f 77fe 	movw	r7, #65534	; 0xfffe
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8003470:	f8df 8168 	ldr.w	r8, [pc, #360]	; 80035dc <HAL_SD_InitCard+0x208>
 8003474:	e014      	b.n	80034a0 <HAL_SD_InitCard+0xcc>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003476:	4631      	mov	r1, r6
 8003478:	6820      	ldr	r0, [r4, #0]
 800347a:	f000 fe41 	bl	8004100 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800347e:	2800      	cmp	r0, #0
 8003480:	d1dd      	bne.n	800343e <HAL_SD_InitCard+0x6a>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8003482:	4641      	mov	r1, r8
 8003484:	6820      	ldr	r0, [r4, #0]
 8003486:	f000 ff0b 	bl	80042a0 <SDMMC_CmdAppOperCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800348a:	2800      	cmp	r0, #0
 800348c:	d1e7      	bne.n	800345e <HAL_SD_InitCard+0x8a>
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800348e:	4631      	mov	r1, r6
 8003490:	6820      	ldr	r0, [r4, #0]
 8003492:	f000 fcbe 	bl	8003e12 <SDIO_GetResponse>
 8003496:	4605      	mov	r5, r0
    count++;
 8003498:	9b06      	ldr	r3, [sp, #24]
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800349a:	0fc6      	lsrs	r6, r0, #31
    count++;
 800349c:	3301      	adds	r3, #1
 800349e:	9306      	str	r3, [sp, #24]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80034a0:	9b06      	ldr	r3, [sp, #24]
 80034a2:	42bb      	cmp	r3, r7
 80034a4:	d801      	bhi.n	80034aa <HAL_SD_InitCard+0xd6>
 80034a6:	2e00      	cmp	r6, #0
 80034a8:	d0e5      	beq.n	8003476 <HAL_SD_InitCard+0xa2>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80034aa:	9b06      	ldr	r3, [sp, #24]
 80034ac:	42bb      	cmp	r3, r7
 80034ae:	d80c      	bhi.n	80034ca <HAL_SD_InitCard+0xf6>
  uint16_t sd_rca = 1U;
 80034b0:	2301      	movs	r3, #1
  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80034b2:	f3c5 7580 	ubfx	r5, r5, #30, #1
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80034b6:	6820      	ldr	r0, [r4, #0]
 80034b8:	6465      	str	r5, [r4, #68]	; 0x44
  uint16_t sd_rca = 1U;
 80034ba:	f8ad 3016 	strh.w	r3, [sp, #22]
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80034be:	f000 fc91 	bl	8003de4 <SDIO_GetPowerState>
 80034c2:	b928      	cbnz	r0, 80034d0 <HAL_SD_InitCard+0xfc>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80034c4:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 80034c8:	e07d      	b.n	80035c6 <HAL_SD_InitCard+0x1f2>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80034ca:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 80034ce:	e7b6      	b.n	800343e <HAL_SD_InitCard+0x6a>
  if(hsd->SdCard.CardType != CARD_SECURED)
 80034d0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80034d2:	2b03      	cmp	r3, #3
 80034d4:	d044      	beq.n	8003560 <HAL_SD_InitCard+0x18c>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80034d6:	6820      	ldr	r0, [r4, #0]
 80034d8:	f000 fe98 	bl	800420c <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 80034dc:	4601      	mov	r1, r0
 80034de:	2800      	cmp	r0, #0
 80034e0:	d171      	bne.n	80035c6 <HAL_SD_InitCard+0x1f2>
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80034e2:	6820      	ldr	r0, [r4, #0]
 80034e4:	f000 fc95 	bl	8003e12 <SDIO_GetResponse>
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80034e8:	2104      	movs	r1, #4
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80034ea:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80034ec:	6820      	ldr	r0, [r4, #0]
 80034ee:	f000 fc90 	bl	8003e12 <SDIO_GetResponse>
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80034f2:	2108      	movs	r1, #8
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80034f4:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80034f6:	6820      	ldr	r0, [r4, #0]
 80034f8:	f000 fc8b 	bl	8003e12 <SDIO_GetResponse>
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80034fc:	210c      	movs	r1, #12
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80034fe:	67e0      	str	r0, [r4, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003500:	6820      	ldr	r0, [r4, #0]
 8003502:	f000 fc86 	bl	8003e12 <SDIO_GetResponse>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8003506:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003508:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  if(hsd->SdCard.CardType != CARD_SECURED)
 800350c:	2b03      	cmp	r3, #3
 800350e:	d027      	beq.n	8003560 <HAL_SD_InitCard+0x18c>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8003510:	f10d 0116 	add.w	r1, sp, #22
 8003514:	6820      	ldr	r0, [r4, #0]
 8003516:	f000 ff1f 	bl	8004358 <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 800351a:	4601      	mov	r1, r0
 800351c:	2800      	cmp	r0, #0
 800351e:	d152      	bne.n	80035c6 <HAL_SD_InitCard+0x1f2>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8003520:	6c63      	ldr	r3, [r4, #68]	; 0x44
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003522:	6820      	ldr	r0, [r4, #0]
  if(hsd->SdCard.CardType != CARD_SECURED)
 8003524:	2b03      	cmp	r3, #3
 8003526:	d01b      	beq.n	8003560 <HAL_SD_InitCard+0x18c>
    hsd->SdCard.RelCardAdd = sd_rca;
 8003528:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 800352c:	6521      	str	r1, [r4, #80]	; 0x50
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800352e:	0409      	lsls	r1, r1, #16
 8003530:	f000 fe81 	bl	8004236 <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003534:	4601      	mov	r1, r0
 8003536:	2800      	cmp	r0, #0
 8003538:	d145      	bne.n	80035c6 <HAL_SD_InitCard+0x1f2>
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800353a:	6820      	ldr	r0, [r4, #0]
 800353c:	f000 fc69 	bl	8003e12 <SDIO_GetResponse>
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003540:	2104      	movs	r1, #4
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003542:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003544:	6820      	ldr	r0, [r4, #0]
 8003546:	f000 fc64 	bl	8003e12 <SDIO_GetResponse>
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800354a:	2108      	movs	r1, #8
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800354c:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800354e:	6820      	ldr	r0, [r4, #0]
 8003550:	f000 fc5f 	bl	8003e12 <SDIO_GetResponse>
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003554:	210c      	movs	r1, #12
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003556:	66e0      	str	r0, [r4, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003558:	6820      	ldr	r0, [r4, #0]
 800355a:	f000 fc5a 	bl	8003e12 <SDIO_GetResponse>
 800355e:	6720      	str	r0, [r4, #112]	; 0x70
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8003560:	2104      	movs	r1, #4
 8003562:	6820      	ldr	r0, [r4, #0]
 8003564:	f000 fc55 	bl	8003e12 <SDIO_GetResponse>
 8003568:	0d00      	lsrs	r0, r0, #20
 800356a:	64e0      	str	r0, [r4, #76]	; 0x4c
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800356c:	a90d      	add	r1, sp, #52	; 0x34
 800356e:	4620      	mov	r0, r4
 8003570:	f7ff fe7a 	bl	8003268 <HAL_SD_GetCardCSD>
 8003574:	4605      	mov	r5, r0
 8003576:	bb20      	cbnz	r0, 80035c2 <HAL_SD_InitCard+0x1ee>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8003578:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800357a:	4603      	mov	r3, r0
 800357c:	0412      	lsls	r2, r2, #16
 800357e:	6820      	ldr	r0, [r4, #0]
 8003580:	f000 fda6 	bl	80040d0 <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 8003584:	4601      	mov	r1, r0
 8003586:	b9f0      	cbnz	r0, 80035c6 <HAL_SD_InitCard+0x1f2>
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8003588:	f104 0310 	add.w	r3, r4, #16
 800358c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003590:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8003594:	1d23      	adds	r3, r4, #4
 8003596:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003598:	6820      	ldr	r0, [r4, #0]
 800359a:	f000 fbfb 	bl	8003d94 <SDIO_Init>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800359e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80035a2:	6820      	ldr	r0, [r4, #0]
 80035a4:	f000 fd02 	bl	8003fac <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 80035a8:	2800      	cmp	r0, #0
 80035aa:	f43f af4e 	beq.w	800344a <HAL_SD_InitCard+0x76>
    hsd->State = HAL_SD_STATE_READY;
 80035ae:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80035b0:	6823      	ldr	r3, [r4, #0]
 80035b2:	4a0b      	ldr	r2, [pc, #44]	; (80035e0 <HAL_SD_InitCard+0x20c>)
 80035b4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80035b6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80035b8:	4318      	orrs	r0, r3
 80035ba:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80035bc:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    return HAL_ERROR;
 80035c0:	e743      	b.n	800344a <HAL_SD_InitCard+0x76>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80035c2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    hsd->State = HAL_SD_STATE_READY;
 80035c6:	2501      	movs	r5, #1
 80035c8:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80035cc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80035ce:	4319      	orrs	r1, r3
 80035d0:	63a1      	str	r1, [r4, #56]	; 0x38
    return HAL_ERROR;
 80035d2:	e73a      	b.n	800344a <HAL_SD_InitCard+0x76>
    return HAL_ERROR;
 80035d4:	2501      	movs	r5, #1
 80035d6:	e738      	b.n	800344a <HAL_SD_InitCard+0x76>
 80035d8:	42300000 	.word	0x42300000
 80035dc:	c1100000 	.word	0xc1100000
 80035e0:	004005ff 	.word	0x004005ff

080035e4 <HAL_SD_Init>:
{
 80035e4:	b510      	push	{r4, lr}
  if(hsd == NULL)
 80035e6:	4604      	mov	r4, r0
 80035e8:	b908      	cbnz	r0, 80035ee <HAL_SD_Init+0xa>
    return HAL_ERROR;
 80035ea:	2001      	movs	r0, #1
}
 80035ec:	bd10      	pop	{r4, pc}
  if(hsd->State == HAL_SD_STATE_RESET)
 80035ee:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 80035f2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80035f6:	b913      	cbnz	r3, 80035fe <HAL_SD_Init+0x1a>
    hsd->Lock = HAL_UNLOCKED;
 80035f8:	7702      	strb	r2, [r0, #28]
    HAL_SD_MspInit(hsd);
 80035fa:	f7fe fe31 	bl	8002260 <HAL_SD_MspInit>
  hsd->State = HAL_SD_STATE_BUSY;
 80035fe:	2303      	movs	r3, #3
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8003600:	4620      	mov	r0, r4
  hsd->State = HAL_SD_STATE_BUSY;
 8003602:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8003606:	f7ff fee5 	bl	80033d4 <HAL_SD_InitCard>
 800360a:	2800      	cmp	r0, #0
 800360c:	d1ed      	bne.n	80035ea <HAL_SD_Init+0x6>
  hsd->State = HAL_SD_STATE_READY;
 800360e:	2301      	movs	r3, #1
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003610:	63a0      	str	r0, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 8003612:	6320      	str	r0, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 8003614:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 8003618:	e7e8      	b.n	80035ec <HAL_SD_Init+0x8>

0800361a <HAL_SD_GetCardInfo>:
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800361a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800361c:	600b      	str	r3, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800361e:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8003620:	604b      	str	r3, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8003622:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8003624:	608b      	str	r3, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8003626:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8003628:	60cb      	str	r3, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800362a:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800362c:	610b      	str	r3, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800362e:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8003630:	614b      	str	r3, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8003632:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8003634:	618b      	str	r3, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8003636:	6e03      	ldr	r3, [r0, #96]	; 0x60
}
 8003638:	2000      	movs	r0, #0
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800363a:	61cb      	str	r3, [r1, #28]
}
 800363c:	4770      	bx	lr
	...

08003640 <HAL_SD_ConfigWideBusOperation>:
  hsd->State = HAL_SD_STATE_BUSY;
 8003640:	2303      	movs	r3, #3
{
 8003642:	b5f0      	push	{r4, r5, r6, r7, lr}
  hsd->State = HAL_SD_STATE_BUSY;
 8003644:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  if(hsd->SdCard.CardType != CARD_SECURED)
 8003648:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
 800364a:	4604      	mov	r4, r0
  if(hsd->SdCard.CardType != CARD_SECURED)
 800364c:	2b03      	cmp	r3, #3
{
 800364e:	460d      	mov	r5, r1
 8003650:	b08b      	sub	sp, #44	; 0x2c
  if(hsd->SdCard.CardType != CARD_SECURED)
 8003652:	d002      	beq.n	800365a <HAL_SD_ConfigWideBusOperation+0x1a>
    if(WideMode == SDIO_BUS_WIDE_8B)
 8003654:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8003658:	d103      	bne.n	8003662 <HAL_SD_ConfigWideBusOperation+0x22>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800365a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800365c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003660:	e067      	b.n	8003732 <HAL_SD_ConfigWideBusOperation+0xf2>
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8003662:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003666:	6800      	ldr	r0, [r0, #0]
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8003668:	d13c      	bne.n	80036e4 <HAL_SD_ConfigWideBusOperation+0xa4>
  uint32_t scr[2U] = {0U, 0U};
 800366a:	2100      	movs	r1, #0
 800366c:	e9cd 1104 	strd	r1, r1, [sp, #16]
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003670:	f000 fbcf 	bl	8003e12 <SDIO_GetResponse>
 8003674:	0180      	lsls	r0, r0, #6
 8003676:	d430      	bmi.n	80036da <HAL_SD_ConfigWideBusOperation+0x9a>
  errorstate = SD_FindSCR(hsd, scr);
 8003678:	4620      	mov	r0, r4
 800367a:	a904      	add	r1, sp, #16
 800367c:	f7ff fbb8 	bl	8002df0 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8003680:	b960      	cbnz	r0, 800369c <HAL_SD_ConfigWideBusOperation+0x5c>
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8003682:	9b05      	ldr	r3, [sp, #20]
 8003684:	0359      	lsls	r1, r3, #13
 8003686:	d52a      	bpl.n	80036de <HAL_SD_ConfigWideBusOperation+0x9e>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003688:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800368a:	6820      	ldr	r0, [r4, #0]
 800368c:	0409      	lsls	r1, r1, #16
 800368e:	f000 fd37 	bl	8004100 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003692:	b918      	cbnz	r0, 800369c <HAL_SD_ConfigWideBusOperation+0x5c>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8003694:	2102      	movs	r1, #2
 8003696:	6820      	ldr	r0, [r4, #0]
 8003698:	f000 fd4a 	bl	8004130 <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 800369c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800369e:	4318      	orrs	r0, r3
      hsd->ErrorCode |= errorstate;
 80036a0:	63a0      	str	r0, [r4, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80036a2:	6ba6      	ldr	r6, [r4, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80036a4:	6827      	ldr	r7, [r4, #0]
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80036a6:	2e00      	cmp	r6, #0
 80036a8:	d045      	beq.n	8003736 <HAL_SD_ConfigWideBusOperation+0xf6>
    hsd->State = HAL_SD_STATE_READY;
 80036aa:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80036ac:	4b2d      	ldr	r3, [pc, #180]	; (8003764 <HAL_SD_ConfigWideBusOperation+0x124>)
 80036ae:	63bb      	str	r3, [r7, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80036b0:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80036b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80036b8:	6820      	ldr	r0, [r4, #0]
 80036ba:	f000 fc77 	bl	8003fac <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 80036be:	b130      	cbz	r0, 80036ce <HAL_SD_ConfigWideBusOperation+0x8e>
    status = HAL_ERROR;
 80036c0:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80036c2:	6823      	ldr	r3, [r4, #0]
 80036c4:	4a27      	ldr	r2, [pc, #156]	; (8003764 <HAL_SD_ConfigWideBusOperation+0x124>)
 80036c6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80036c8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80036ca:	4318      	orrs	r0, r3
 80036cc:	63a0      	str	r0, [r4, #56]	; 0x38
  hsd->State = HAL_SD_STATE_READY;
 80036ce:	2301      	movs	r3, #1
}
 80036d0:	4628      	mov	r0, r5
  hsd->State = HAL_SD_STATE_READY;
 80036d2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 80036d6:	b00b      	add	sp, #44	; 0x2c
 80036d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80036da:	4628      	mov	r0, r5
 80036dc:	e7de      	b.n	800369c <HAL_SD_ConfigWideBusOperation+0x5c>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80036de:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80036e2:	e7db      	b.n	800369c <HAL_SD_ConfigWideBusOperation+0x5c>
    else if(WideMode == SDIO_BUS_WIDE_1B)
 80036e4:	bb11      	cbnz	r1, 800372c <HAL_SD_ConfigWideBusOperation+0xec>
  uint32_t scr[2U] = {0U, 0U};
 80036e6:	e9cd 1104 	strd	r1, r1, [sp, #16]
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80036ea:	f000 fb92 	bl	8003e12 <SDIO_GetResponse>
 80036ee:	0182      	lsls	r2, r0, #6
 80036f0:	d416      	bmi.n	8003720 <HAL_SD_ConfigWideBusOperation+0xe0>
  errorstate = SD_FindSCR(hsd, scr);
 80036f2:	a904      	add	r1, sp, #16
 80036f4:	4620      	mov	r0, r4
 80036f6:	f7ff fb7b 	bl	8002df0 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 80036fa:	4601      	mov	r1, r0
 80036fc:	b968      	cbnz	r0, 800371a <HAL_SD_ConfigWideBusOperation+0xda>
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80036fe:	9b05      	ldr	r3, [sp, #20]
 8003700:	03db      	lsls	r3, r3, #15
 8003702:	d510      	bpl.n	8003726 <HAL_SD_ConfigWideBusOperation+0xe6>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003704:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8003706:	6820      	ldr	r0, [r4, #0]
 8003708:	0409      	lsls	r1, r1, #16
 800370a:	f000 fcf9 	bl	8004100 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800370e:	4601      	mov	r1, r0
 8003710:	b918      	cbnz	r0, 800371a <HAL_SD_ConfigWideBusOperation+0xda>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8003712:	6820      	ldr	r0, [r4, #0]
 8003714:	f000 fd0c 	bl	8004130 <SDMMC_CmdBusWidth>
 8003718:	4601      	mov	r1, r0
      hsd->ErrorCode |= errorstate;
 800371a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800371c:	4308      	orrs	r0, r1
 800371e:	e7bf      	b.n	80036a0 <HAL_SD_ConfigWideBusOperation+0x60>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8003720:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003724:	e7f9      	b.n	800371a <HAL_SD_ConfigWideBusOperation+0xda>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003726:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 800372a:	e7f6      	b.n	800371a <HAL_SD_ConfigWideBusOperation+0xda>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800372c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800372e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003732:	63a3      	str	r3, [r4, #56]	; 0x38
 8003734:	e7b5      	b.n	80036a2 <HAL_SD_ConfigWideBusOperation+0x62>
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8003736:	6863      	ldr	r3, [r4, #4]
 8003738:	9304      	str	r3, [sp, #16]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800373a:	68a3      	ldr	r3, [r4, #8]
 800373c:	9305      	str	r3, [sp, #20]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800373e:	68e3      	ldr	r3, [r4, #12]
    Init.BusWide             = WideMode;
 8003740:	e9cd 3506 	strd	r3, r5, [sp, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8003744:	6963      	ldr	r3, [r4, #20]
  HAL_StatusTypeDef status = HAL_OK;
 8003746:	4635      	mov	r5, r6
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8003748:	9308      	str	r3, [sp, #32]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800374a:	69a3      	ldr	r3, [r4, #24]
 800374c:	9309      	str	r3, [sp, #36]	; 0x24
    (void)SDIO_Init(hsd->Instance, Init);
 800374e:	ab0a      	add	r3, sp, #40	; 0x28
 8003750:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8003754:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8003758:	ab04      	add	r3, sp, #16
 800375a:	4638      	mov	r0, r7
 800375c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800375e:	f000 fb19 	bl	8003d94 <SDIO_Init>
 8003762:	e7a7      	b.n	80036b4 <HAL_SD_ConfigWideBusOperation+0x74>
 8003764:	004005ff 	.word	0x004005ff

08003768 <HAL_SD_GetCardState>:
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003768:	6d01      	ldr	r1, [r0, #80]	; 0x50
{
 800376a:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800376c:	0409      	lsls	r1, r1, #16
{
 800376e:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003770:	6800      	ldr	r0, [r0, #0]
 8003772:	f000 fd0d 	bl	8004190 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 8003776:	4601      	mov	r1, r0
 8003778:	b928      	cbnz	r0, 8003786 <HAL_SD_GetCardState+0x1e>
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800377a:	6820      	ldr	r0, [r4, #0]
 800377c:	f000 fb49 	bl	8003e12 <SDIO_GetResponse>
}
 8003780:	f3c0 2043 	ubfx	r0, r0, #9, #4
 8003784:	bd10      	pop	{r4, pc}
    hsd->ErrorCode |= errorstate;
 8003786:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003788:	4308      	orrs	r0, r1
 800378a:	63a0      	str	r0, [r4, #56]	; 0x38
  uint32_t resp1 = 0;
 800378c:	2000      	movs	r0, #0
 800378e:	e7f7      	b.n	8003780 <HAL_SD_GetCardState+0x18>

08003790 <SD_DMATxAbort>:
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003790:	f240 523a 	movw	r2, #1338	; 0x53a
{
 8003794:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003796:	6a44      	ldr	r4, [r0, #36]	; 0x24
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003798:	6823      	ldr	r3, [r4, #0]
  CardState = HAL_SD_GetCardState(hsd);
 800379a:	4620      	mov	r0, r4
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800379c:	639a      	str	r2, [r3, #56]	; 0x38
  CardState = HAL_SD_GetCardState(hsd);
 800379e:	f7ff ffe3 	bl	8003768 <HAL_SD_GetCardState>
  hsd->State = HAL_SD_STATE_READY;
 80037a2:	2301      	movs	r3, #1
 80037a4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80037a8:	2300      	movs	r3, #0
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80037aa:	3805      	subs	r0, #5
 80037ac:	2801      	cmp	r0, #1
  hsd->Context = SD_CONTEXT_NONE;
 80037ae:	6323      	str	r3, [r4, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80037b0:	d805      	bhi.n	80037be <SD_DMATxAbort+0x2e>
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80037b2:	6820      	ldr	r0, [r4, #0]
 80037b4:	f000 fc72 	bl	800409c <SDMMC_CmdStopTransfer>
 80037b8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80037ba:	4303      	orrs	r3, r0
 80037bc:	63a3      	str	r3, [r4, #56]	; 0x38
  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80037be:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    HAL_SD_AbortCallback(hsd);
 80037c0:	4620      	mov	r0, r4
  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80037c2:	b913      	cbnz	r3, 80037ca <SD_DMATxAbort+0x3a>
    HAL_SD_AbortCallback(hsd);
 80037c4:	f000 fe61 	bl	800448a <HAL_SD_AbortCallback>
}
 80037c8:	bd10      	pop	{r4, pc}
    HAL_SD_ErrorCallback(hsd);
 80037ca:	f7ff fd4b 	bl	8003264 <HAL_SD_ErrorCallback>
}
 80037ce:	e7fb      	b.n	80037c8 <SD_DMATxAbort+0x38>

080037d0 <HAL_SD_IRQHandler>:
{
 80037d0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t context = hsd->Context;
 80037d4:	6b05      	ldr	r5, [r0, #48]	; 0x30
{
 80037d6:	4604      	mov	r4, r0
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80037d8:	6800      	ldr	r0, [r0, #0]
 80037da:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80037dc:	041f      	lsls	r7, r3, #16
 80037de:	d51f      	bpl.n	8003820 <HAL_SD_IRQHandler+0x50>
 80037e0:	072e      	lsls	r6, r5, #28
 80037e2:	d51d      	bpl.n	8003820 <HAL_SD_IRQHandler+0x50>
{
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
  dataremaining = hsd->RxXferSize;
 80037e4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c

  if (dataremaining > 0U)
 80037e6:	b1c7      	cbz	r7, 800381a <HAL_SD_IRQHandler+0x4a>
  tmp = hsd->pRxBuffPtr;
 80037e8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80037ea:	1d35      	adds	r5, r6, #4
 80037ec:	f106 0824 	add.w	r8, r6, #36	; 0x24
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80037f0:	6820      	ldr	r0, [r4, #0]
 80037f2:	f000 faeb 	bl	8003dcc <SDIO_ReadFIFO>
      *tmp = (uint8_t)(data & 0xFFU);
      tmp++;
      dataremaining--;
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80037f6:	0a03      	lsrs	r3, r0, #8
      *tmp = (uint8_t)(data & 0xFFU);
 80037f8:	f805 0c04 	strb.w	r0, [r5, #-4]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80037fc:	f805 3c03 	strb.w	r3, [r5, #-3]
      tmp++;
      dataremaining--;
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8003800:	0c03      	lsrs	r3, r0, #16
      tmp++;
      dataremaining--;
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8003802:	0e00      	lsrs	r0, r0, #24
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8003804:	f805 3c02 	strb.w	r3, [r5, #-2]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8003808:	f805 0c01 	strb.w	r0, [r5, #-1]
    for(count = 0U; count < 8U; count++)
 800380c:	3504      	adds	r5, #4
 800380e:	4545      	cmp	r5, r8
 8003810:	d1ee      	bne.n	80037f0 <HAL_SD_IRQHandler+0x20>
      tmp++;
 8003812:	3620      	adds	r6, #32
      dataremaining--;
 8003814:	3f20      	subs	r7, #32
    }

    hsd->pRxBuffPtr = tmp;
 8003816:	62a6      	str	r6, [r4, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8003818:	62e7      	str	r7, [r4, #44]	; 0x2c
}
 800381a:	b002      	add	sp, #8
 800381c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8003820:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003822:	05d9      	lsls	r1, r3, #23
 8003824:	d544      	bpl.n	80038b0 <HAL_SD_IRQHandler+0xe0>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8003826:	f44f 7380 	mov.w	r3, #256	; 0x100
 800382a:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800382c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    if((context & SD_CONTEXT_IT) != 0U)
 800382e:	072a      	lsls	r2, r5, #28
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8003830:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 8003834:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8003838:	63c3      	str	r3, [r0, #60]	; 0x3c
    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800383a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800383c:	f023 0301 	bic.w	r3, r3, #1
 8003840:	62c3      	str	r3, [r0, #44]	; 0x2c
    if((context & SD_CONTEXT_IT) != 0U)
 8003842:	d51a      	bpl.n	800387a <HAL_SD_IRQHandler+0xaa>
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8003844:	f015 0f22 	tst.w	r5, #34	; 0x22
 8003848:	d008      	beq.n	800385c <HAL_SD_IRQHandler+0x8c>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800384a:	f000 fc27 	bl	800409c <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 800384e:	b128      	cbz	r0, 800385c <HAL_SD_IRQHandler+0x8c>
          hsd->ErrorCode |= errorstate;
 8003850:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003852:	4318      	orrs	r0, r3
 8003854:	63a0      	str	r0, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8003856:	4620      	mov	r0, r4
 8003858:	f7ff fd04 	bl	8003264 <HAL_SD_ErrorCallback>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800385c:	f240 523a 	movw	r2, #1338	; 0x53a
 8003860:	6823      	ldr	r3, [r4, #0]
        HAL_SD_RxCpltCallback(hsd);
 8003862:	4620      	mov	r0, r4
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003864:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003866:	2301      	movs	r3, #1
 8003868:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800386c:	2300      	movs	r3, #0
 800386e:	6323      	str	r3, [r4, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003870:	07ab      	lsls	r3, r5, #30
 8003872:	d01a      	beq.n	80038aa <HAL_SD_IRQHandler+0xda>
        HAL_SD_RxCpltCallback(hsd);
 8003874:	f000 fe13 	bl	800449e <HAL_SD_RxCpltCallback>
 8003878:	e7cf      	b.n	800381a <HAL_SD_IRQHandler+0x4a>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800387a:	062f      	lsls	r7, r5, #24
 800387c:	d5cd      	bpl.n	800381a <HAL_SD_IRQHandler+0x4a>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800387e:	06ae      	lsls	r6, r5, #26
 8003880:	d508      	bpl.n	8003894 <HAL_SD_IRQHandler+0xc4>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003882:	f000 fc0b 	bl	800409c <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8003886:	b128      	cbz	r0, 8003894 <HAL_SD_IRQHandler+0xc4>
          hsd->ErrorCode |= errorstate;
 8003888:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800388a:	4318      	orrs	r0, r3
 800388c:	63a0      	str	r0, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800388e:	4620      	mov	r0, r4
 8003890:	f7ff fce8 	bl	8003264 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8003894:	07a8      	lsls	r0, r5, #30
 8003896:	d1c0      	bne.n	800381a <HAL_SD_IRQHandler+0x4a>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8003898:	6822      	ldr	r2, [r4, #0]
        HAL_SD_TxCpltCallback(hsd);
 800389a:	4620      	mov	r0, r4
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800389c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800389e:	f023 0308 	bic.w	r3, r3, #8
 80038a2:	62d3      	str	r3, [r2, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 80038a4:	2301      	movs	r3, #1
 80038a6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 80038aa:	f000 fdf3 	bl	8004494 <HAL_SD_TxCpltCallback>
 80038ae:	e7b4      	b.n	800381a <HAL_SD_IRQHandler+0x4a>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80038b0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80038b2:	0459      	lsls	r1, r3, #17
 80038b4:	d526      	bpl.n	8003904 <HAL_SD_IRQHandler+0x134>
 80038b6:	072a      	lsls	r2, r5, #28
 80038b8:	d524      	bpl.n	8003904 <HAL_SD_IRQHandler+0x134>
{
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
  dataremaining = hsd->TxXferSize;
 80038ba:	6a67      	ldr	r7, [r4, #36]	; 0x24

  if (dataremaining > 0U)
 80038bc:	2f00      	cmp	r7, #0
 80038be:	d0ac      	beq.n	800381a <HAL_SD_IRQHandler+0x4a>
  tmp = hsd->pTxBuffPtr;
 80038c0:	6a26      	ldr	r6, [r4, #32]
 80038c2:	1d35      	adds	r5, r6, #4
 80038c4:	f106 0824 	add.w	r8, r6, #36	; 0x24
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
    {
      data = (uint32_t)(*tmp);
 80038c8:	f815 3c04 	ldrb.w	r3, [r5, #-4]
      tmp++;
      dataremaining--;
      data |= ((uint32_t)(*tmp) << 24U);
      tmp++;
      dataremaining--;
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80038cc:	6820      	ldr	r0, [r4, #0]
      data = (uint32_t)(*tmp);
 80038ce:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 8U);
 80038d0:	f815 2c03 	ldrb.w	r2, [r5, #-3]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80038d4:	a901      	add	r1, sp, #4
      data |= ((uint32_t)(*tmp) << 8U);
 80038d6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80038da:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 16U);
 80038dc:	f815 2c02 	ldrb.w	r2, [r5, #-2]
    for(count = 0U; count < 8U; count++)
 80038e0:	3504      	adds	r5, #4
      data |= ((uint32_t)(*tmp) << 16U);
 80038e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80038e6:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 24U);
 80038e8:	f815 2c05 	ldrb.w	r2, [r5, #-5]
 80038ec:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80038f0:	9301      	str	r3, [sp, #4]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80038f2:	f000 fa6e 	bl	8003dd2 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80038f6:	4545      	cmp	r5, r8
 80038f8:	d1e6      	bne.n	80038c8 <HAL_SD_IRQHandler+0xf8>
      tmp++;
 80038fa:	3620      	adds	r6, #32
      dataremaining--;
 80038fc:	3f20      	subs	r7, #32
    }

    hsd->pTxBuffPtr = tmp;
 80038fe:	6226      	str	r6, [r4, #32]
    hsd->TxXferSize = dataremaining;
 8003900:	6267      	str	r7, [r4, #36]	; 0x24
  }
}
 8003902:	e78a      	b.n	800381a <HAL_SD_IRQHandler+0x4a>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 8003904:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003906:	f013 0f3a 	tst.w	r3, #58	; 0x3a
 800390a:	d086      	beq.n	800381a <HAL_SD_IRQHandler+0x4a>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800390c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800390e:	079b      	lsls	r3, r3, #30
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003910:	bf42      	ittt	mi
 8003912:	6ba3      	ldrmi	r3, [r4, #56]	; 0x38
 8003914:	f043 0302 	orrmi.w	r3, r3, #2
 8003918:	63a3      	strmi	r3, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800391a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800391c:	071f      	lsls	r7, r3, #28
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800391e:	bf42      	ittt	mi
 8003920:	6ba3      	ldrmi	r3, [r4, #56]	; 0x38
 8003922:	f043 0308 	orrmi.w	r3, r3, #8
 8003926:	63a3      	strmi	r3, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8003928:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800392a:	069e      	lsls	r6, r3, #26
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800392c:	bf42      	ittt	mi
 800392e:	6ba3      	ldrmi	r3, [r4, #56]	; 0x38
 8003930:	f043 0320 	orrmi.w	r3, r3, #32
 8003934:	63a3      	strmi	r3, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8003936:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003938:	06d9      	lsls	r1, r3, #27
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800393a:	bf42      	ittt	mi
 800393c:	6ba3      	ldrmi	r3, [r4, #56]	; 0x38
 800393e:	f043 0310 	orrmi.w	r3, r3, #16
 8003942:	63a3      	strmi	r3, [r4, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8003944:	f240 733a 	movw	r3, #1850	; 0x73a
 8003948:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800394a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800394c:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8003950:	f023 0302 	bic.w	r3, r3, #2
 8003954:	63c3      	str	r3, [r0, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003956:	f000 fba1 	bl	800409c <SDMMC_CmdStopTransfer>
 800395a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800395c:	072a      	lsls	r2, r5, #28
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800395e:	ea43 0300 	orr.w	r3, r3, r0
 8003962:	63a3      	str	r3, [r4, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8003964:	d508      	bpl.n	8003978 <HAL_SD_IRQHandler+0x1a8>
      hsd->State = HAL_SD_STATE_READY;
 8003966:	2301      	movs	r3, #1
 8003968:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800396c:	2300      	movs	r3, #0
      HAL_SD_ErrorCallback(hsd);
 800396e:	4620      	mov	r0, r4
      hsd->Context = SD_CONTEXT_NONE;
 8003970:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8003972:	f7ff fc77 	bl	8003264 <HAL_SD_ErrorCallback>
 8003976:	e750      	b.n	800381a <HAL_SD_IRQHandler+0x4a>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8003978:	062b      	lsls	r3, r5, #24
 800397a:	f57f af4e 	bpl.w	800381a <HAL_SD_IRQHandler+0x4a>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800397e:	f015 0f30 	tst.w	r5, #48	; 0x30
 8003982:	d00d      	beq.n	80039a0 <HAL_SD_IRQHandler+0x1d0>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8003984:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8003986:	4b11      	ldr	r3, [pc, #68]	; (80039cc <HAL_SD_IRQHandler+0x1fc>)
 8003988:	6343      	str	r3, [r0, #52]	; 0x34
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800398a:	f7fe fe1d 	bl	80025c8 <HAL_DMA_Abort_IT>
 800398e:	2800      	cmp	r0, #0
 8003990:	f43f af43 	beq.w	800381a <HAL_SD_IRQHandler+0x4a>
          SD_DMATxAbort(hsd->hdmatx);
 8003994:	6be0      	ldr	r0, [r4, #60]	; 0x3c
}
 8003996:	b002      	add	sp, #8
 8003998:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
          SD_DMARxAbort(hsd->hdmarx);
 800399c:	f7ff bef8 	b.w	8003790 <SD_DMATxAbort>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80039a0:	f015 0503 	ands.w	r5, r5, #3
 80039a4:	d009      	beq.n	80039ba <HAL_SD_IRQHandler+0x1ea>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80039a6:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80039a8:	4b09      	ldr	r3, [pc, #36]	; (80039d0 <HAL_SD_IRQHandler+0x200>)
 80039aa:	6343      	str	r3, [r0, #52]	; 0x34
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80039ac:	f7fe fe0c 	bl	80025c8 <HAL_DMA_Abort_IT>
 80039b0:	2800      	cmp	r0, #0
 80039b2:	f43f af32 	beq.w	800381a <HAL_SD_IRQHandler+0x4a>
          SD_DMARxAbort(hsd->hdmarx);
 80039b6:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80039b8:	e7ed      	b.n	8003996 <HAL_SD_IRQHandler+0x1c6>
        hsd->State = HAL_SD_STATE_READY;
 80039ba:	2301      	movs	r3, #1
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80039bc:	63a5      	str	r5, [r4, #56]	; 0x38
        HAL_SD_AbortCallback(hsd);
 80039be:	4620      	mov	r0, r4
        hsd->State = HAL_SD_STATE_READY;
 80039c0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80039c4:	6325      	str	r5, [r4, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 80039c6:	f000 fd60 	bl	800448a <HAL_SD_AbortCallback>
}
 80039ca:	e726      	b.n	800381a <HAL_SD_IRQHandler+0x4a>
 80039cc:	08003791 	.word	0x08003791
 80039d0:	080039d5 	.word	0x080039d5

080039d4 <SD_DMARxAbort>:
 80039d4:	f7ff bedc 	b.w	8003790 <SD_DMATxAbort>

080039d8 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 80039d8:	b570      	push	{r4, r5, r6, lr}
 80039da:	460e      	mov	r6, r1
 80039dc:	4615      	mov	r5, r2
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 80039de:	4604      	mov	r4, r0
 80039e0:	b348      	cbz	r0, 8003a36 <HAL_SRAM_Init+0x5e>
 80039e2:	6983      	ldr	r3, [r0, #24]
 80039e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039e8:	d025      	beq.n	8003a36 <HAL_SRAM_Init+0x5e>
  {
    return HAL_ERROR;
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 80039ea:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80039ee:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80039f2:	b91b      	cbnz	r3, 80039fc <HAL_SRAM_Init+0x24>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80039f4:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80039f8:	f7fe fcbc 	bl	8002374 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80039fc:	f104 0108 	add.w	r1, r4, #8
 8003a00:	6820      	ldr	r0, [r4, #0]
 8003a02:	f000 f959 	bl	8003cb8 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8003a06:	4631      	mov	r1, r6
 8003a08:	68a2      	ldr	r2, [r4, #8]
 8003a0a:	6820      	ldr	r0, [r4, #0]
 8003a0c:	f000 f986 	bl	8003d1c <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8003a10:	4629      	mov	r1, r5
 8003a12:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003a14:	68a2      	ldr	r2, [r4, #8]
 8003a16:	6860      	ldr	r0, [r4, #4]
 8003a18:	f000 f99e 	bl	8003d58 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8003a1c:	6822      	ldr	r2, [r4, #0]
 8003a1e:	68a1      	ldr	r1, [r4, #8]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;

  return HAL_OK;
 8003a20:	2000      	movs	r0, #0
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8003a22:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003a26:	f043 0301 	orr.w	r3, r3, #1
 8003a2a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  hsram->State = HAL_SRAM_STATE_READY;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
}
 8003a34:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8003a36:	2001      	movs	r0, #1
 8003a38:	e7fc      	b.n	8003a34 <HAL_SRAM_Init+0x5c>
	...

08003a3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a3c:	b510      	push	{r4, lr}
 8003a3e:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a40:	6803      	ldr	r3, [r0, #0]
 8003a42:	68c1      	ldr	r1, [r0, #12]
 8003a44:	691a      	ldr	r2, [r3, #16]
 8003a46:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8003a4a:	430a      	orrs	r2, r1
 8003a4c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003a4e:	6882      	ldr	r2, [r0, #8]
 8003a50:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8003a52:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003a54:	4302      	orrs	r2, r0
 8003a56:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8003a58:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 8003a5c:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003a60:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8003a62:	430a      	orrs	r2, r1
 8003a64:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a66:	695a      	ldr	r2, [r3, #20]
 8003a68:	69a1      	ldr	r1, [r4, #24]
 8003a6a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003a6e:	430a      	orrs	r2, r1
 8003a70:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003a72:	4a0e      	ldr	r2, [pc, #56]	; (8003aac <UART_SetConfig+0x70>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d115      	bne.n	8003aa4 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003a78:	f7ff f9aa 	bl	8002dd0 <HAL_RCC_GetPCLK2Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a7c:	2319      	movs	r3, #25
 8003a7e:	4343      	muls	r3, r0
 8003a80:	6862      	ldr	r2, [r4, #4]
 8003a82:	6820      	ldr	r0, [r4, #0]
 8003a84:	0092      	lsls	r2, r2, #2
 8003a86:	fbb3 f3f2 	udiv	r3, r3, r2
 8003a8a:	2264      	movs	r2, #100	; 0x64
 8003a8c:	fbb3 f1f2 	udiv	r1, r3, r2
 8003a90:	fb02 3311 	mls	r3, r2, r1, r3
 8003a94:	011b      	lsls	r3, r3, #4
 8003a96:	3332      	adds	r3, #50	; 0x32
 8003a98:	fbb3 f3f2 	udiv	r3, r3, r2
 8003a9c:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8003aa0:	6083      	str	r3, [r0, #8]
#endif /* USART_CR1_OVER8 */
}
 8003aa2:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8003aa4:	f7ff f984 	bl	8002db0 <HAL_RCC_GetPCLK1Freq>
 8003aa8:	e7e8      	b.n	8003a7c <UART_SetConfig+0x40>
 8003aaa:	bf00      	nop
 8003aac:	40013800 	.word	0x40013800

08003ab0 <UART_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
 8003ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ab2:	4604      	mov	r4, r0
 8003ab4:	460e      	mov	r6, r1
 8003ab6:	4617      	mov	r7, r2
 8003ab8:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003aba:	6822      	ldr	r2, [r4, #0]
 8003abc:	6813      	ldr	r3, [r2, #0]
 8003abe:	ea36 0303 	bics.w	r3, r6, r3
 8003ac2:	d101      	bne.n	8003ac8 <UART_WaitOnFlagUntilTimeout.constprop.0+0x18>
  return HAL_OK;
 8003ac4:	2000      	movs	r0, #0
 8003ac6:	e028      	b.n	8003b1a <UART_WaitOnFlagUntilTimeout.constprop.0+0x6a>
    if (Timeout != HAL_MAX_DELAY)
 8003ac8:	1c6b      	adds	r3, r5, #1
 8003aca:	d0f7      	beq.n	8003abc <UART_WaitOnFlagUntilTimeout.constprop.0+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003acc:	b125      	cbz	r5, 8003ad8 <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
 8003ace:	f7fe fcfd 	bl	80024cc <HAL_GetTick>
 8003ad2:	1bc0      	subs	r0, r0, r7
 8003ad4:	4285      	cmp	r5, r0
 8003ad6:	d2f0      	bcs.n	8003aba <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ad8:	6822      	ldr	r2, [r4, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ada:	f102 030c 	add.w	r3, r2, #12
 8003ade:	e853 3f00 	ldrex	r3, [r3]
 8003ae2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ae6:	320c      	adds	r2, #12
 8003ae8:	e842 3000 	strex	r0, r3, [r2]
   return(result);
 8003aec:	6821      	ldr	r1, [r4, #0]
 8003aee:	2800      	cmp	r0, #0
 8003af0:	d1f2      	bne.n	8003ad8 <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003af2:	f101 0314 	add.w	r3, r1, #20
 8003af6:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003afa:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003afe:	f101 0014 	add.w	r0, r1, #20
 8003b02:	e840 3200 	strex	r2, r3, [r0]
 8003b06:	2a00      	cmp	r2, #0
 8003b08:	d1f3      	bne.n	8003af2 <UART_WaitOnFlagUntilTimeout.constprop.0+0x42>
        huart->gState  = HAL_UART_STATE_READY;
 8003b0a:	2320      	movs	r3, #32
        __HAL_UNLOCK(huart);
 8003b0c:	2003      	movs	r0, #3
        huart->gState  = HAL_UART_STATE_READY;
 8003b0e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        __HAL_UNLOCK(huart);
 8003b12:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        huart->RxState = HAL_UART_STATE_READY;
 8003b16:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
}
 8003b1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003b1c <HAL_UART_Init>:
{
 8003b1c:	b510      	push	{r4, lr}
  if (huart == NULL)
 8003b1e:	4604      	mov	r4, r0
 8003b20:	b348      	cbz	r0, 8003b76 <HAL_UART_Init+0x5a>
  if (huart->gState == HAL_UART_STATE_RESET)
 8003b22:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003b26:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003b2a:	b91b      	cbnz	r3, 8003b34 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8003b2c:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_UART_MspInit(huart);
 8003b30:	f7fe fbe4 	bl	80022fc <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8003b34:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8003b36:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003b38:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UART_DISABLE(huart);
 8003b3c:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8003b3e:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8003b40:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b44:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8003b46:	f7ff ff79 	bl	8003a3c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b4a:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b4c:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b4e:	691a      	ldr	r2, [r3, #16]
 8003b50:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b56:	695a      	ldr	r2, [r3, #20]
 8003b58:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b5c:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8003b5e:	68da      	ldr	r2, [r3, #12]
 8003b60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b64:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8003b66:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b68:	6460      	str	r0, [r4, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003b6a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003b6e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b72:	6360      	str	r0, [r4, #52]	; 0x34
}
 8003b74:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003b76:	2001      	movs	r0, #1
 8003b78:	e7fc      	b.n	8003b74 <HAL_UART_Init+0x58>

08003b7a <HAL_UART_Transmit>:
{
 8003b7a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b7e:	4699      	mov	r9, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8003b80:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8003b84:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8003b86:	2b20      	cmp	r3, #32
{
 8003b88:	460e      	mov	r6, r1
 8003b8a:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8003b8c:	d13c      	bne.n	8003c08 <HAL_UART_Transmit+0x8e>
    if ((pData == NULL) || (Size == 0U))
 8003b8e:	2900      	cmp	r1, #0
 8003b90:	d03c      	beq.n	8003c0c <HAL_UART_Transmit+0x92>
 8003b92:	2a00      	cmp	r2, #0
 8003b94:	d03a      	beq.n	8003c0c <HAL_UART_Transmit+0x92>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b96:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b98:	2500      	movs	r5, #0
 8003b9a:	6445      	str	r5, [r0, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b9c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    tickstart = HAL_GetTick();
 8003ba0:	f7fe fc94 	bl	80024cc <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ba4:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8003ba6:	4680      	mov	r8, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ba8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferSize = Size;
 8003bac:	84a7      	strh	r7, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8003bae:	84e7      	strh	r7, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bb0:	d103      	bne.n	8003bba <HAL_UART_Transmit+0x40>
 8003bb2:	6923      	ldr	r3, [r4, #16]
 8003bb4:	b90b      	cbnz	r3, 8003bba <HAL_UART_Transmit+0x40>
 8003bb6:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8003bb8:	461e      	mov	r6, r3
    while (huart->TxXferCount > 0U)
 8003bba:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	b953      	cbnz	r3, 8003bd6 <HAL_UART_Transmit+0x5c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003bc0:	464b      	mov	r3, r9
 8003bc2:	4642      	mov	r2, r8
 8003bc4:	2140      	movs	r1, #64	; 0x40
 8003bc6:	4620      	mov	r0, r4
 8003bc8:	f7ff ff72 	bl	8003ab0 <UART_WaitOnFlagUntilTimeout.constprop.0>
 8003bcc:	b950      	cbnz	r0, 8003be4 <HAL_UART_Transmit+0x6a>
    huart->gState = HAL_UART_STATE_READY;
 8003bce:	2320      	movs	r3, #32
 8003bd0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    return HAL_OK;
 8003bd4:	e007      	b.n	8003be6 <HAL_UART_Transmit+0x6c>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003bd6:	464b      	mov	r3, r9
 8003bd8:	4642      	mov	r2, r8
 8003bda:	2180      	movs	r1, #128	; 0x80
 8003bdc:	4620      	mov	r0, r4
 8003bde:	f7ff ff67 	bl	8003ab0 <UART_WaitOnFlagUntilTimeout.constprop.0>
 8003be2:	b110      	cbz	r0, 8003bea <HAL_UART_Transmit+0x70>
        return HAL_TIMEOUT;
 8003be4:	2003      	movs	r0, #3
}
 8003be6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003bea:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8003bec:	b94e      	cbnz	r6, 8003c02 <HAL_UART_Transmit+0x88>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003bee:	f835 3b02 	ldrh.w	r3, [r5], #2
 8003bf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003bf6:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8003bf8:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 8003bfa:	3901      	subs	r1, #1
 8003bfc:	b289      	uxth	r1, r1
 8003bfe:	84e1      	strh	r1, [r4, #38]	; 0x26
 8003c00:	e7db      	b.n	8003bba <HAL_UART_Transmit+0x40>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c02:	f816 3b01 	ldrb.w	r3, [r6], #1
 8003c06:	e7f6      	b.n	8003bf6 <HAL_UART_Transmit+0x7c>
    return HAL_BUSY;
 8003c08:	2002      	movs	r0, #2
 8003c0a:	e7ec      	b.n	8003be6 <HAL_UART_Transmit+0x6c>
      return  HAL_ERROR;
 8003c0c:	2001      	movs	r0, #1
 8003c0e:	e7ea      	b.n	8003be6 <HAL_UART_Transmit+0x6c>

08003c10 <HAL_UART_Receive>:
{
 8003c10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c14:	461f      	mov	r7, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 8003c16:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
{
 8003c1a:	4604      	mov	r4, r0
  if (huart->RxState == HAL_UART_STATE_READY)
 8003c1c:	2b20      	cmp	r3, #32
{
 8003c1e:	460e      	mov	r6, r1
 8003c20:	4691      	mov	r9, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 8003c22:	d143      	bne.n	8003cac <HAL_UART_Receive+0x9c>
    if ((pData == NULL) || (Size == 0U))
 8003c24:	2900      	cmp	r1, #0
 8003c26:	d043      	beq.n	8003cb0 <HAL_UART_Receive+0xa0>
 8003c28:	2a00      	cmp	r2, #0
 8003c2a:	d041      	beq.n	8003cb0 <HAL_UART_Receive+0xa0>
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003c2c:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c2e:	2500      	movs	r5, #0
 8003c30:	6445      	str	r5, [r0, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003c32:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c36:	6305      	str	r5, [r0, #48]	; 0x30
    tickstart = HAL_GetTick();
 8003c38:	f7fe fc48 	bl	80024cc <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c3c:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8003c3e:	4680      	mov	r8, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->RxXferSize = Size;
 8003c44:	f8a4 902c 	strh.w	r9, [r4, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003c48:	f8a4 902e 	strh.w	r9, [r4, #46]	; 0x2e
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c4c:	d103      	bne.n	8003c56 <HAL_UART_Receive+0x46>
 8003c4e:	6923      	ldr	r3, [r4, #16]
 8003c50:	b90b      	cbnz	r3, 8003c56 <HAL_UART_Receive+0x46>
 8003c52:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8003c54:	461e      	mov	r6, r3
    while (huart->RxXferCount > 0U)
 8003c56:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
 8003c58:	b280      	uxth	r0, r0
 8003c5a:	b920      	cbnz	r0, 8003c66 <HAL_UART_Receive+0x56>
    huart->RxState = HAL_UART_STATE_READY;
 8003c5c:	2320      	movs	r3, #32
 8003c5e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
}
 8003c62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003c66:	463b      	mov	r3, r7
 8003c68:	4642      	mov	r2, r8
 8003c6a:	2120      	movs	r1, #32
 8003c6c:	4620      	mov	r0, r4
 8003c6e:	f7ff ff1f 	bl	8003ab0 <UART_WaitOnFlagUntilTimeout.constprop.0>
 8003c72:	b9f8      	cbnz	r0, 8003cb4 <HAL_UART_Receive+0xa4>
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003c74:	6823      	ldr	r3, [r4, #0]
      if (pdata8bits == NULL)
 8003c76:	b94e      	cbnz	r6, 8003c8c <HAL_UART_Receive+0x7c>
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c7e:	f825 3b02 	strh.w	r3, [r5], #2
      huart->RxXferCount--;
 8003c82:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8003c84:	3b01      	subs	r3, #1
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	85e3      	strh	r3, [r4, #46]	; 0x2e
 8003c8a:	e7e4      	b.n	8003c56 <HAL_UART_Receive+0x46>
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003c8c:	68a2      	ldr	r2, [r4, #8]
 8003c8e:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8003c92:	d002      	beq.n	8003c9a <HAL_UART_Receive+0x8a>
 8003c94:	b932      	cbnz	r2, 8003ca4 <HAL_UART_Receive+0x94>
 8003c96:	6922      	ldr	r2, [r4, #16]
 8003c98:	b922      	cbnz	r2, 8003ca4 <HAL_UART_Receive+0x94>
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003c9a:	6859      	ldr	r1, [r3, #4]
 8003c9c:	b2c9      	uxtb	r1, r1
 8003c9e:	f806 1b01 	strb.w	r1, [r6], #1
        pdata8bits++;
 8003ca2:	e7ee      	b.n	8003c82 <HAL_UART_Receive+0x72>
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003ca4:	6859      	ldr	r1, [r3, #4]
 8003ca6:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8003caa:	e7f8      	b.n	8003c9e <HAL_UART_Receive+0x8e>
    return HAL_BUSY;
 8003cac:	2002      	movs	r0, #2
 8003cae:	e7d8      	b.n	8003c62 <HAL_UART_Receive+0x52>
      return  HAL_ERROR;
 8003cb0:	2001      	movs	r0, #1
 8003cb2:	e7d6      	b.n	8003c62 <HAL_UART_Receive+0x52>
        return HAL_TIMEOUT;
 8003cb4:	2003      	movs	r0, #3
 8003cb6:	e7d4      	b.n	8003c62 <HAL_UART_Receive+0x52>

08003cb8 <FSMC_NORSRAM_Init>:
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8003cb8:	680a      	ldr	r2, [r1, #0]
{
 8003cba:	b570      	push	{r4, r5, r6, lr}
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8003cbc:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
          FSMC_BCRx_CBURSTRW);

  mask |= FSMC_BCRx_WRAPMOD;
  mask |= 0x00070000U; /* CPSIZE to be defined in CMSIS file */

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8003cc0:	684e      	ldr	r6, [r1, #4]
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8003cc2:	f023 0301 	bic.w	r3, r3, #1
 8003cc6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8003cca:	688b      	ldr	r3, [r1, #8]
  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8003ccc:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8003cd0:	2b08      	cmp	r3, #8
 8003cd2:	bf0c      	ite	eq
 8003cd4:	2440      	moveq	r4, #64	; 0x40
 8003cd6:	2400      	movne	r4, #0
  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8003cd8:	4333      	orrs	r3, r6
 8003cda:	68ce      	ldr	r6, [r1, #12]
 8003cdc:	4333      	orrs	r3, r6
 8003cde:	690e      	ldr	r6, [r1, #16]
 8003ce0:	4333      	orrs	r3, r6
 8003ce2:	694e      	ldr	r6, [r1, #20]
 8003ce4:	4333      	orrs	r3, r6
 8003ce6:	69ce      	ldr	r6, [r1, #28]
 8003ce8:	4333      	orrs	r3, r6
 8003cea:	6a0e      	ldr	r6, [r1, #32]
 8003cec:	4333      	orrs	r3, r6
 8003cee:	6a4e      	ldr	r6, [r1, #36]	; 0x24
 8003cf0:	4333      	orrs	r3, r6
 8003cf2:	6a8e      	ldr	r6, [r1, #40]	; 0x28
 8003cf4:	4333      	orrs	r3, r6
 8003cf6:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 8003cf8:	4333      	orrs	r3, r6
 8003cfa:	6b0e      	ldr	r6, [r1, #48]	; 0x30
 8003cfc:	4333      	orrs	r3, r6
 8003cfe:	698e      	ldr	r6, [r1, #24]
 8003d00:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8003d02:	4333      	orrs	r3, r6
 8003d04:	430b      	orrs	r3, r1
 8003d06:	4904      	ldr	r1, [pc, #16]	; (8003d18 <FSMC_NORSRAM_Init+0x60>)
 8003d08:	4029      	ands	r1, r5
 8003d0a:	430b      	orrs	r3, r1
 8003d0c:	4323      	orrs	r3, r4
 8003d0e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]


  return HAL_OK;
}
 8003d12:	2000      	movs	r0, #0
 8003d14:	bd70      	pop	{r4, r5, r6, pc}
 8003d16:	bf00      	nop
 8003d18:	fff00080 	.word	0xfff00080

08003d1c <FSMC_NORSRAM_Timing_Init>:
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8003d1c:	680b      	ldr	r3, [r1, #0]
{
 8003d1e:	b510      	push	{r4, lr}
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8003d20:	698c      	ldr	r4, [r1, #24]
 8003d22:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003d26:	4323      	orrs	r3, r4
 8003d28:	684c      	ldr	r4, [r1, #4]
 8003d2a:	6850      	ldr	r0, [r2, #4]
 8003d2c:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 8003d30:	688c      	ldr	r4, [r1, #8]
 8003d32:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8003d36:	68cc      	ldr	r4, [r1, #12]
 8003d38:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8003d3c:	690c      	ldr	r4, [r1, #16]
 8003d3e:	6949      	ldr	r1, [r1, #20]
 8003d40:	3c01      	subs	r4, #1
 8003d42:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
 8003d46:	3902      	subs	r1, #2
 8003d48:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003d4c:	f000 4140 	and.w	r1, r0, #3221225472	; 0xc0000000
 8003d50:	430b      	orrs	r3, r1
                                                       (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  return HAL_OK;
}
 8003d52:	2000      	movs	r0, #0
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8003d54:	6053      	str	r3, [r2, #4]
}
 8003d56:	bd10      	pop	{r4, pc}

08003d58 <FSMC_NORSRAM_Extended_Timing_Init>:
{
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8003d58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
{
 8003d5c:	b530      	push	{r4, r5, lr}
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8003d5e:	d114      	bne.n	8003d8a <FSMC_NORSRAM_Extended_Timing_Init+0x32>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FSMC_BWTRx_BUSTURN)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8003d60:	698d      	ldr	r5, [r1, #24]
 8003d62:	680b      	ldr	r3, [r1, #0]
 8003d64:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
 8003d68:	432b      	orrs	r3, r5
 8003d6a:	684d      	ldr	r5, [r1, #4]
 8003d6c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 8003d70:	688d      	ldr	r5, [r1, #8]
 8003d72:	68c9      	ldr	r1, [r1, #12]
 8003d74:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8003d78:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8003d7c:	4904      	ldr	r1, [pc, #16]	; (8003d90 <FSMC_NORSRAM_Extended_Timing_Init+0x38>)
 8003d7e:	4021      	ands	r1, r4
 8003d80:	430b      	orrs	r3, r1
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* FSMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8003d82:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 8003d86:	2000      	movs	r0, #0
 8003d88:	bd30      	pop	{r4, r5, pc}
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8003d8a:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8003d8e:	e7f8      	b.n	8003d82 <FSMC_NORSRAM_Extended_Timing_Init+0x2a>
 8003d90:	cff00000 	.word	0xcff00000

08003d94 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8003d94:	b084      	sub	sp, #16
 8003d96:	b510      	push	{r4, lr}
 8003d98:	ac03      	add	r4, sp, #12
 8003d9a:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8003d9e:	460b      	mov	r3, r1
 8003da0:	9904      	ldr	r1, [sp, #16]
             Init.HardwareFlowControl |\
             Init.ClockDiv
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8003da2:	6842      	ldr	r2, [r0, #4]
  tmpreg |= (Init.ClockEdge           |\
 8003da4:	430b      	orrs	r3, r1
             Init.ClockBypass         |\
 8003da6:	9905      	ldr	r1, [sp, #20]
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8003da8:	f422 42fd 	bic.w	r2, r2, #32384	; 0x7e80
             Init.ClockBypass         |\
 8003dac:	430b      	orrs	r3, r1
             Init.ClockPowerSave      |\
 8003dae:	9906      	ldr	r1, [sp, #24]
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8003db0:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
             Init.ClockPowerSave      |\
 8003db4:	430b      	orrs	r3, r1
             Init.BusWide             |\
 8003db6:	9907      	ldr	r1, [sp, #28]
 8003db8:	430b      	orrs	r3, r1
             Init.HardwareFlowControl |\
 8003dba:	9908      	ldr	r1, [sp, #32]

  return HAL_OK;
}
 8003dbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
             Init.HardwareFlowControl |\
 8003dc0:	430b      	orrs	r3, r1
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	6043      	str	r3, [r0, #4]
}
 8003dc6:	b004      	add	sp, #16
 8003dc8:	2000      	movs	r0, #0
 8003dca:	4770      	bx	lr

08003dcc <SDIO_ReadFIFO>:
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8003dcc:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 8003dd0:	4770      	bx	lr

08003dd2 <SDIO_WriteFIFO>:
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8003dd2:	680b      	ldr	r3, [r1, #0]
 8003dd4:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80

  return HAL_OK;
}
 8003dd8:	2000      	movs	r0, #0
 8003dda:	4770      	bx	lr

08003ddc <SDIO_PowerState_ON>:
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8003ddc:	2303      	movs	r3, #3
 8003dde:	6003      	str	r3, [r0, #0]

  return HAL_OK;
}
 8003de0:	2000      	movs	r0, #0
 8003de2:	4770      	bx	lr

08003de4 <SDIO_GetPowerState>:
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8003de4:	6800      	ldr	r0, [r0, #0]
}
 8003de6:	f000 0003 	and.w	r0, r0, #3
 8003dea:	4770      	bx	lr

08003dec <SDIO_SendCommand>:
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8003dec:	680b      	ldr	r3, [r1, #0]
{
 8003dee:	b510      	push	{r4, lr}
  SDIOx->ARG = Command->Argument;
 8003df0:	6083      	str	r3, [r0, #8]
                       Command->Response         |\
                       Command->WaitForInterrupt |\
                       Command->CPSM);
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003df2:	68c2      	ldr	r2, [r0, #12]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003df4:	e9d1 3401 	ldrd	r3, r4, [r1, #4]
 8003df8:	4323      	orrs	r3, r4
                       Command->Response         |\
 8003dfa:	68cc      	ldr	r4, [r1, #12]
                       Command->WaitForInterrupt |\
 8003dfc:	6909      	ldr	r1, [r1, #16]
                       Command->Response         |\
 8003dfe:	4323      	orrs	r3, r4
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003e00:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
                       Command->WaitForInterrupt |\
 8003e04:	430b      	orrs	r3, r1
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003e06:	f022 020f 	bic.w	r2, r2, #15
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	60c3      	str	r3, [r0, #12]
  
  return HAL_OK;  
}
 8003e0e:	2000      	movs	r0, #0
 8003e10:	bd10      	pop	{r4, pc}

08003e12 <SDIO_GetResponse>:

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8003e12:	3014      	adds	r0, #20
  
  return (*(__IO uint32_t *) tmp);
 8003e14:	5840      	ldr	r0, [r0, r1]
}  
 8003e16:	4770      	bx	lr

08003e18 <SDIO_ConfigData>:
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8003e18:	680b      	ldr	r3, [r1, #0]
{
 8003e1a:	b510      	push	{r4, lr}
  SDIOx->DTIMER = Data->DataTimeOut;
 8003e1c:	6243      	str	r3, [r0, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8003e1e:	684b      	ldr	r3, [r1, #4]
 8003e20:	6283      	str	r3, [r0, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003e22:	e9d1 3402 	ldrd	r3, r4, [r1, #8]
 8003e26:	4323      	orrs	r3, r4
                       Data->TransferDir   |\
 8003e28:	690c      	ldr	r4, [r1, #16]
                       Data->TransferMode  |\
                       Data->DPSM);
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8003e2a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
                       Data->TransferMode  |\
 8003e2c:	6949      	ldr	r1, [r1, #20]
                       Data->TransferDir   |\
 8003e2e:	4323      	orrs	r3, r4
                       Data->TransferMode  |\
 8003e30:	430b      	orrs	r3, r1
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8003e32:	f022 02f7 	bic.w	r2, r2, #247	; 0xf7
 8003e36:	4313      	orrs	r3, r2
 8003e38:	62c3      	str	r3, [r0, #44]	; 0x2c

  return HAL_OK;

}
 8003e3a:	2000      	movs	r0, #0
 8003e3c:	bd10      	pop	{r4, pc}
	...

08003e40 <SDMMC_CmdGoIdleState>:
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8003e40:	2300      	movs	r3, #0
{
 8003e42:	b510      	push	{r4, lr}
 8003e44:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8003e46:	e9cd 3301 	strd	r3, r3, [sp, #4]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003e4a:	e9cd 3303 	strd	r3, r3, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003e4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003e52:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003e54:	9305      	str	r3, [sp, #20]
{
 8003e56:	4604      	mov	r4, r0
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003e58:	f7ff ffc8 	bl	8003dec <SDIO_SendCommand>
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003e5c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8003e60:	4b09      	ldr	r3, [pc, #36]	; (8003e88 <SDMMC_CmdGoIdleState+0x48>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	fbb3 f3f2 	udiv	r3, r3, r2
 8003e68:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e6c:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0U)
 8003e6e:	3b01      	subs	r3, #1
 8003e70:	d307      	bcc.n	8003e82 <SDMMC_CmdGoIdleState+0x42>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8003e72:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8003e74:	0612      	lsls	r2, r2, #24
 8003e76:	d5fa      	bpl.n	8003e6e <SDMMC_CmdGoIdleState+0x2e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8003e78:	23c5      	movs	r3, #197	; 0xc5
  
  return SDMMC_ERROR_NONE;
 8003e7a:	2000      	movs	r0, #0
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8003e7c:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8003e7e:	b006      	add	sp, #24
 8003e80:	bd10      	pop	{r4, pc}
      return SDMMC_ERROR_TIMEOUT;
 8003e82:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  return errorstate;
 8003e86:	e7fa      	b.n	8003e7e <SDMMC_CmdGoIdleState+0x3e>
 8003e88:	20000000 	.word	0x20000000

08003e8c <SDMMC_GetCmdResp1>:
{
 8003e8c:	b510      	push	{r4, lr}
 8003e8e:	4604      	mov	r4, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003e90:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8003e94:	4b43      	ldr	r3, [pc, #268]	; (8003fa4 <SDMMC_GetCmdResp1+0x118>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	fbb3 f3f0 	udiv	r3, r3, r0
 8003e9c:	435a      	muls	r2, r3
    if (count-- == 0U)
 8003e9e:	2a00      	cmp	r2, #0
 8003ea0:	d049      	beq.n	8003f36 <SDMMC_GetCmdResp1+0xaa>
    sta_reg = SDIOx->STA;
 8003ea2:	6b63      	ldr	r3, [r4, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8003ea4:	f013 0f45 	tst.w	r3, #69	; 0x45
 8003ea8:	d007      	beq.n	8003eba <SDMMC_GetCmdResp1+0x2e>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003eaa:	051b      	lsls	r3, r3, #20
 8003eac:	d405      	bmi.n	8003eba <SDMMC_GetCmdResp1+0x2e>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003eae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003eb0:	0758      	lsls	r0, r3, #29
 8003eb2:	d504      	bpl.n	8003ebe <SDMMC_GetCmdResp1+0x32>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003eb4:	2004      	movs	r0, #4
 8003eb6:	63a0      	str	r0, [r4, #56]	; 0x38
}
 8003eb8:	bd10      	pop	{r4, pc}
 8003eba:	3a01      	subs	r2, #1
 8003ebc:	e7ef      	b.n	8003e9e <SDMMC_GetCmdResp1+0x12>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8003ebe:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8003ec0:	f010 0001 	ands.w	r0, r0, #1
 8003ec4:	d002      	beq.n	8003ecc <SDMMC_GetCmdResp1+0x40>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	63a3      	str	r3, [r4, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003eca:	e7f5      	b.n	8003eb8 <SDMMC_GetCmdResp1+0x2c>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8003ecc:	23c5      	movs	r3, #197	; 0xc5
 8003ece:	63a3      	str	r3, [r4, #56]	; 0x38
  return (uint8_t)(SDIOx->RESPCMD);
 8003ed0:	6923      	ldr	r3, [r4, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8003ed2:	b2db      	uxtb	r3, r3
 8003ed4:	4299      	cmp	r1, r3
 8003ed6:	d131      	bne.n	8003f3c <SDMMC_GetCmdResp1+0xb0>
  return (*(__IO uint32_t *) tmp);
 8003ed8:	6963      	ldr	r3, [r4, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8003eda:	4833      	ldr	r0, [pc, #204]	; (8003fa8 <SDMMC_GetCmdResp1+0x11c>)
 8003edc:	4018      	ands	r0, r3
 8003ede:	2800      	cmp	r0, #0
 8003ee0:	d0ea      	beq.n	8003eb8 <SDMMC_GetCmdResp1+0x2c>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	db2c      	blt.n	8003f40 <SDMMC_GetCmdResp1+0xb4>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8003ee6:	005a      	lsls	r2, r3, #1
 8003ee8:	d42d      	bmi.n	8003f46 <SDMMC_GetCmdResp1+0xba>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8003eea:	009c      	lsls	r4, r3, #2
 8003eec:	d42d      	bmi.n	8003f4a <SDMMC_GetCmdResp1+0xbe>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8003eee:	00d9      	lsls	r1, r3, #3
 8003ef0:	d42d      	bmi.n	8003f4e <SDMMC_GetCmdResp1+0xc2>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8003ef2:	011a      	lsls	r2, r3, #4
 8003ef4:	d42e      	bmi.n	8003f54 <SDMMC_GetCmdResp1+0xc8>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8003ef6:	015c      	lsls	r4, r3, #5
 8003ef8:	d42f      	bmi.n	8003f5a <SDMMC_GetCmdResp1+0xce>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8003efa:	01d9      	lsls	r1, r3, #7
 8003efc:	d430      	bmi.n	8003f60 <SDMMC_GetCmdResp1+0xd4>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8003efe:	021a      	lsls	r2, r3, #8
 8003f00:	d431      	bmi.n	8003f66 <SDMMC_GetCmdResp1+0xda>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8003f02:	025c      	lsls	r4, r3, #9
 8003f04:	d432      	bmi.n	8003f6c <SDMMC_GetCmdResp1+0xe0>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8003f06:	0299      	lsls	r1, r3, #10
 8003f08:	d433      	bmi.n	8003f72 <SDMMC_GetCmdResp1+0xe6>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8003f0a:	02da      	lsls	r2, r3, #11
 8003f0c:	d434      	bmi.n	8003f78 <SDMMC_GetCmdResp1+0xec>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8003f0e:	035c      	lsls	r4, r3, #13
 8003f10:	d435      	bmi.n	8003f7e <SDMMC_GetCmdResp1+0xf2>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8003f12:	0399      	lsls	r1, r3, #14
 8003f14:	d436      	bmi.n	8003f84 <SDMMC_GetCmdResp1+0xf8>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8003f16:	03da      	lsls	r2, r3, #15
 8003f18:	d437      	bmi.n	8003f8a <SDMMC_GetCmdResp1+0xfe>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8003f1a:	041c      	lsls	r4, r3, #16
 8003f1c:	d438      	bmi.n	8003f90 <SDMMC_GetCmdResp1+0x104>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8003f1e:	0459      	lsls	r1, r3, #17
 8003f20:	d439      	bmi.n	8003f96 <SDMMC_GetCmdResp1+0x10a>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8003f22:	049a      	lsls	r2, r3, #18
 8003f24:	d43a      	bmi.n	8003f9c <SDMMC_GetCmdResp1+0x110>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8003f26:	f013 0f08 	tst.w	r3, #8
 8003f2a:	bf14      	ite	ne
 8003f2c:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 8003f30:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8003f34:	e7c0      	b.n	8003eb8 <SDMMC_GetCmdResp1+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 8003f36:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8003f3a:	e7bd      	b.n	8003eb8 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003f3c:	2001      	movs	r0, #1
 8003f3e:	e7bb      	b.n	8003eb8 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8003f40:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8003f44:	e7b8      	b.n	8003eb8 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8003f46:	2040      	movs	r0, #64	; 0x40
 8003f48:	e7b6      	b.n	8003eb8 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8003f4a:	2080      	movs	r0, #128	; 0x80
 8003f4c:	e7b4      	b.n	8003eb8 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8003f4e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003f52:	e7b1      	b.n	8003eb8 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8003f54:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003f58:	e7ae      	b.n	8003eb8 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8003f5a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003f5e:	e7ab      	b.n	8003eb8 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8003f60:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003f64:	e7a8      	b.n	8003eb8 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8003f66:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003f6a:	e7a5      	b.n	8003eb8 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8003f6c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003f70:	e7a2      	b.n	8003eb8 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8003f72:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003f76:	e79f      	b.n	8003eb8 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CC_ERR;
 8003f78:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003f7c:	e79c      	b.n	8003eb8 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8003f7e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8003f82:	e799      	b.n	8003eb8 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8003f84:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8003f88:	e796      	b.n	8003eb8 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8003f8a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003f8e:	e793      	b.n	8003eb8 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8003f90:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003f94:	e790      	b.n	8003eb8 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8003f96:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8003f9a:	e78d      	b.n	8003eb8 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ERASE_RESET;
 8003f9c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8003fa0:	e78a      	b.n	8003eb8 <SDMMC_GetCmdResp1+0x2c>
 8003fa2:	bf00      	nop
 8003fa4:	20000000 	.word	0x20000000
 8003fa8:	fdffe008 	.word	0xfdffe008

08003fac <SDMMC_CmdBlockLength>:
{
 8003fac:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003fae:	2340      	movs	r3, #64	; 0x40
 8003fb0:	2510      	movs	r5, #16
{
 8003fb2:	b087      	sub	sp, #28
 8003fb4:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003fb6:	2200      	movs	r2, #0
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003fb8:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003fbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8003fc0:	9101      	str	r1, [sp, #4]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003fc2:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003fc4:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003fc8:	f7ff ff10 	bl	8003dec <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8003fcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fd0:	4629      	mov	r1, r5
 8003fd2:	4620      	mov	r0, r4
 8003fd4:	f7ff ff5a 	bl	8003e8c <SDMMC_GetCmdResp1>
}
 8003fd8:	b007      	add	sp, #28
 8003fda:	bd30      	pop	{r4, r5, pc}

08003fdc <SDMMC_CmdReadSingleBlock>:
{
 8003fdc:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003fde:	2340      	movs	r3, #64	; 0x40
 8003fe0:	2511      	movs	r5, #17
{
 8003fe2:	b087      	sub	sp, #28
 8003fe4:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003fe6:	2200      	movs	r2, #0
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003fe8:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003fec:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8003ff0:	9101      	str	r1, [sp, #4]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003ff2:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003ff4:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003ff8:	f7ff fef8 	bl	8003dec <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8003ffc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004000:	4629      	mov	r1, r5
 8004002:	4620      	mov	r0, r4
 8004004:	f7ff ff42 	bl	8003e8c <SDMMC_GetCmdResp1>
}
 8004008:	b007      	add	sp, #28
 800400a:	bd30      	pop	{r4, r5, pc}

0800400c <SDMMC_CmdReadMultiBlock>:
{
 800400c:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800400e:	2340      	movs	r3, #64	; 0x40
 8004010:	2512      	movs	r5, #18
{
 8004012:	b087      	sub	sp, #28
 8004014:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004016:	2200      	movs	r2, #0
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004018:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800401c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004020:	9101      	str	r1, [sp, #4]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004022:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004024:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004028:	f7ff fee0 	bl	8003dec <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800402c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004030:	4629      	mov	r1, r5
 8004032:	4620      	mov	r0, r4
 8004034:	f7ff ff2a 	bl	8003e8c <SDMMC_GetCmdResp1>
}
 8004038:	b007      	add	sp, #28
 800403a:	bd30      	pop	{r4, r5, pc}

0800403c <SDMMC_CmdWriteSingleBlock>:
{
 800403c:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800403e:	2340      	movs	r3, #64	; 0x40
 8004040:	2518      	movs	r5, #24
{
 8004042:	b087      	sub	sp, #28
 8004044:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004046:	2200      	movs	r2, #0
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004048:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800404c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004050:	9101      	str	r1, [sp, #4]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004052:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004054:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004058:	f7ff fec8 	bl	8003dec <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800405c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004060:	4629      	mov	r1, r5
 8004062:	4620      	mov	r0, r4
 8004064:	f7ff ff12 	bl	8003e8c <SDMMC_GetCmdResp1>
}
 8004068:	b007      	add	sp, #28
 800406a:	bd30      	pop	{r4, r5, pc}

0800406c <SDMMC_CmdWriteMultiBlock>:
{
 800406c:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800406e:	2340      	movs	r3, #64	; 0x40
 8004070:	2519      	movs	r5, #25
{
 8004072:	b087      	sub	sp, #28
 8004074:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004076:	2200      	movs	r2, #0
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004078:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800407c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004080:	9101      	str	r1, [sp, #4]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004082:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004084:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004088:	f7ff feb0 	bl	8003dec <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800408c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004090:	4629      	mov	r1, r5
 8004092:	4620      	mov	r0, r4
 8004094:	f7ff fefa 	bl	8003e8c <SDMMC_GetCmdResp1>
}
 8004098:	b007      	add	sp, #28
 800409a:	bd30      	pop	{r4, r5, pc}

0800409c <SDMMC_CmdStopTransfer>:
{
 800409c:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800409e:	2300      	movs	r3, #0
 80040a0:	250c      	movs	r5, #12
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80040a2:	2240      	movs	r2, #64	; 0x40
{
 80040a4:	b087      	sub	sp, #28
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80040a6:	e9cd 2303 	strd	r2, r3, [sp, #12]
{
 80040aa:	4604      	mov	r4, r0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80040ac:	e9cd 3501 	strd	r3, r5, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80040b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80040b4:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80040b6:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80040b8:	f7ff fe98 	bl	8003dec <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80040bc:	4629      	mov	r1, r5
 80040be:	4620      	mov	r0, r4
 80040c0:	4a02      	ldr	r2, [pc, #8]	; (80040cc <SDMMC_CmdStopTransfer+0x30>)
 80040c2:	f7ff fee3 	bl	8003e8c <SDMMC_GetCmdResp1>
}
 80040c6:	b007      	add	sp, #28
 80040c8:	bd30      	pop	{r4, r5, pc}
 80040ca:	bf00      	nop
 80040cc:	05f5e100 	.word	0x05f5e100

080040d0 <SDMMC_CmdSelDesel>:
{
 80040d0:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80040d2:	2340      	movs	r3, #64	; 0x40
 80040d4:	2507      	movs	r5, #7
{
 80040d6:	b087      	sub	sp, #28
 80040d8:	4604      	mov	r4, r0
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80040da:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80040de:	9201      	str	r2, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80040e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80040e4:	2200      	movs	r2, #0
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80040e6:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80040e8:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80040ec:	f7ff fe7e 	bl	8003dec <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80040f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80040f4:	4629      	mov	r1, r5
 80040f6:	4620      	mov	r0, r4
 80040f8:	f7ff fec8 	bl	8003e8c <SDMMC_GetCmdResp1>
}
 80040fc:	b007      	add	sp, #28
 80040fe:	bd30      	pop	{r4, r5, pc}

08004100 <SDMMC_CmdAppCommand>:
{
 8004100:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004102:	2340      	movs	r3, #64	; 0x40
 8004104:	2537      	movs	r5, #55	; 0x37
{
 8004106:	b087      	sub	sp, #28
 8004108:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800410a:	2200      	movs	r2, #0
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800410c:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004110:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8004114:	9101      	str	r1, [sp, #4]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004116:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004118:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800411c:	f7ff fe66 	bl	8003dec <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8004120:	f241 3288 	movw	r2, #5000	; 0x1388
 8004124:	4629      	mov	r1, r5
 8004126:	4620      	mov	r0, r4
 8004128:	f7ff feb0 	bl	8003e8c <SDMMC_GetCmdResp1>
}
 800412c:	b007      	add	sp, #28
 800412e:	bd30      	pop	{r4, r5, pc}

08004130 <SDMMC_CmdBusWidth>:
{
 8004130:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004132:	2340      	movs	r3, #64	; 0x40
 8004134:	2506      	movs	r5, #6
{
 8004136:	b087      	sub	sp, #28
 8004138:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800413a:	2200      	movs	r2, #0
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800413c:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004140:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8004144:	9101      	str	r1, [sp, #4]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004146:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004148:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800414c:	f7ff fe4e 	bl	8003dec <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8004150:	f241 3288 	movw	r2, #5000	; 0x1388
 8004154:	4629      	mov	r1, r5
 8004156:	4620      	mov	r0, r4
 8004158:	f7ff fe98 	bl	8003e8c <SDMMC_GetCmdResp1>
}
 800415c:	b007      	add	sp, #28
 800415e:	bd30      	pop	{r4, r5, pc}

08004160 <SDMMC_CmdSendSCR>:
{
 8004160:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8004162:	2300      	movs	r3, #0
 8004164:	2533      	movs	r5, #51	; 0x33
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004166:	2240      	movs	r2, #64	; 0x40
{
 8004168:	b087      	sub	sp, #28
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800416a:	e9cd 2303 	strd	r2, r3, [sp, #12]
{
 800416e:	4604      	mov	r4, r0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8004170:	e9cd 3501 	strd	r3, r5, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004174:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004178:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800417a:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800417c:	f7ff fe36 	bl	8003dec <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8004180:	f241 3288 	movw	r2, #5000	; 0x1388
 8004184:	4629      	mov	r1, r5
 8004186:	4620      	mov	r0, r4
 8004188:	f7ff fe80 	bl	8003e8c <SDMMC_GetCmdResp1>
}
 800418c:	b007      	add	sp, #28
 800418e:	bd30      	pop	{r4, r5, pc}

08004190 <SDMMC_CmdSendStatus>:
{
 8004190:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004192:	2340      	movs	r3, #64	; 0x40
 8004194:	250d      	movs	r5, #13
{
 8004196:	b087      	sub	sp, #28
 8004198:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800419a:	2200      	movs	r2, #0
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800419c:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80041a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.Argument         = Argument;
 80041a4:	9101      	str	r1, [sp, #4]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80041a6:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80041a8:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80041ac:	f7ff fe1e 	bl	8003dec <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80041b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80041b4:	4629      	mov	r1, r5
 80041b6:	4620      	mov	r0, r4
 80041b8:	f7ff fe68 	bl	8003e8c <SDMMC_GetCmdResp1>
}
 80041bc:	b007      	add	sp, #28
 80041be:	bd30      	pop	{r4, r5, pc}

080041c0 <SDMMC_GetCmdResp2>:
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80041c0:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 80041c4:	4b10      	ldr	r3, [pc, #64]	; (8004208 <SDMMC_GetCmdResp2+0x48>)
{
 80041c6:	4602      	mov	r2, r0
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80041ce:	f241 3188 	movw	r1, #5000	; 0x1388
 80041d2:	434b      	muls	r3, r1
    if (count-- == 0U)
 80041d4:	3b01      	subs	r3, #1
 80041d6:	d313      	bcc.n	8004200 <SDMMC_GetCmdResp2+0x40>
    sta_reg = SDIOx->STA;
 80041d8:	6b51      	ldr	r1, [r2, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80041da:	f011 0f45 	tst.w	r1, #69	; 0x45
 80041de:	d0f9      	beq.n	80041d4 <SDMMC_GetCmdResp2+0x14>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80041e0:	0509      	lsls	r1, r1, #20
 80041e2:	d4f7      	bmi.n	80041d4 <SDMMC_GetCmdResp2+0x14>
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80041e4:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80041e6:	075b      	lsls	r3, r3, #29
 80041e8:	d502      	bpl.n	80041f0 <SDMMC_GetCmdResp2+0x30>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80041ea:	2004      	movs	r0, #4
 80041ec:	6390      	str	r0, [r2, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80041ee:	4770      	bx	lr
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80041f0:	6b50      	ldr	r0, [r2, #52]	; 0x34
 80041f2:	f010 0001 	ands.w	r0, r0, #1
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80041f6:	bf14      	ite	ne
 80041f8:	2301      	movne	r3, #1
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80041fa:	23c5      	moveq	r3, #197	; 0xc5
 80041fc:	6393      	str	r3, [r2, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 80041fe:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8004200:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8004204:	4770      	bx	lr
 8004206:	bf00      	nop
 8004208:	20000000 	.word	0x20000000

0800420c <SDMMC_CmdSendCID>:
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800420c:	2300      	movs	r3, #0
 800420e:	2202      	movs	r2, #2
{
 8004210:	b510      	push	{r4, lr}
 8004212:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8004214:	e9cd 3201 	strd	r3, r2, [sp, #4]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004218:	22c0      	movs	r2, #192	; 0xc0
{
 800421a:	4604      	mov	r4, r0
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800421c:	e9cd 2303 	strd	r2, r3, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004220:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004224:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004226:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004228:	f7ff fde0 	bl	8003dec <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800422c:	4620      	mov	r0, r4
 800422e:	f7ff ffc7 	bl	80041c0 <SDMMC_GetCmdResp2>
}
 8004232:	b006      	add	sp, #24
 8004234:	bd10      	pop	{r4, pc}

08004236 <SDMMC_CmdSendCSD>:
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004236:	2209      	movs	r2, #9
 8004238:	23c0      	movs	r3, #192	; 0xc0
{
 800423a:	b510      	push	{r4, lr}
 800423c:	b086      	sub	sp, #24
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800423e:	e9cd 2302 	strd	r2, r3, [sp, #8]
  sdmmc_cmdinit.Argument         = Argument;
 8004242:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004244:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004248:	2100      	movs	r1, #0
{
 800424a:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800424c:	e9cd 1304 	strd	r1, r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004250:	a901      	add	r1, sp, #4
 8004252:	f7ff fdcb 	bl	8003dec <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8004256:	4620      	mov	r0, r4
 8004258:	f7ff ffb2 	bl	80041c0 <SDMMC_GetCmdResp2>
}
 800425c:	b006      	add	sp, #24
 800425e:	bd10      	pop	{r4, pc}

08004260 <SDMMC_GetCmdResp3>:
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004260:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8004264:	4b0d      	ldr	r3, [pc, #52]	; (800429c <SDMMC_GetCmdResp3+0x3c>)
{
 8004266:	4602      	mov	r2, r0
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	fbb3 f3f1 	udiv	r3, r3, r1
 800426e:	f241 3188 	movw	r1, #5000	; 0x1388
 8004272:	434b      	muls	r3, r1
    if (count-- == 0U)
 8004274:	3b01      	subs	r3, #1
 8004276:	d30e      	bcc.n	8004296 <SDMMC_GetCmdResp3+0x36>
    sta_reg = SDIOx->STA;
 8004278:	6b51      	ldr	r1, [r2, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800427a:	f011 0f45 	tst.w	r1, #69	; 0x45
 800427e:	d0f9      	beq.n	8004274 <SDMMC_GetCmdResp3+0x14>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004280:	0509      	lsls	r1, r1, #20
 8004282:	d4f7      	bmi.n	8004274 <SDMMC_GetCmdResp3+0x14>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004284:	6b50      	ldr	r0, [r2, #52]	; 0x34
 8004286:	f010 0004 	ands.w	r0, r0, #4
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800428a:	bf15      	itete	ne
 800428c:	2004      	movne	r0, #4
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800428e:	23c5      	moveq	r3, #197	; 0xc5
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004290:	6390      	strne	r0, [r2, #56]	; 0x38
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004292:	6393      	streq	r3, [r2, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 8004294:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8004296:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800429a:	4770      	bx	lr
 800429c:	20000000 	.word	0x20000000

080042a0 <SDMMC_CmdAppOperCommand>:
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80042a0:	2229      	movs	r2, #41	; 0x29
 80042a2:	2340      	movs	r3, #64	; 0x40
{
 80042a4:	b510      	push	{r4, lr}
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80042a6:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
{
 80042aa:	b086      	sub	sp, #24
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80042ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80042b0:	e9cd 2302 	strd	r2, r3, [sp, #8]
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80042b4:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80042b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80042ba:	2100      	movs	r1, #0
{
 80042bc:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80042be:	e9cd 1304 	strd	r1, r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80042c2:	a901      	add	r1, sp, #4
 80042c4:	f7ff fd92 	bl	8003dec <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80042c8:	4620      	mov	r0, r4
 80042ca:	f7ff ffc9 	bl	8004260 <SDMMC_GetCmdResp3>
}
 80042ce:	b006      	add	sp, #24
 80042d0:	bd10      	pop	{r4, pc}
	...

080042d4 <SDMMC_GetCmdResp6>:
{
 80042d4:	b510      	push	{r4, lr}
 80042d6:	4604      	mov	r4, r0
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80042d8:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80042dc:	4b1d      	ldr	r3, [pc, #116]	; (8004354 <SDMMC_GetCmdResp6+0x80>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	fbb3 f3f0 	udiv	r3, r3, r0
 80042e4:	f241 3088 	movw	r0, #5000	; 0x1388
 80042e8:	4343      	muls	r3, r0
    if (count-- == 0U)
 80042ea:	3b01      	subs	r3, #1
 80042ec:	d329      	bcc.n	8004342 <SDMMC_GetCmdResp6+0x6e>
    sta_reg = SDIOx->STA;
 80042ee:	6b60      	ldr	r0, [r4, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80042f0:	f010 0f45 	tst.w	r0, #69	; 0x45
 80042f4:	d0f9      	beq.n	80042ea <SDMMC_GetCmdResp6+0x16>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80042f6:	0500      	lsls	r0, r0, #20
 80042f8:	d4f7      	bmi.n	80042ea <SDMMC_GetCmdResp6+0x16>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80042fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80042fc:	0758      	lsls	r0, r3, #29
 80042fe:	d502      	bpl.n	8004306 <SDMMC_GetCmdResp6+0x32>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004300:	2004      	movs	r0, #4
 8004302:	63a0      	str	r0, [r4, #56]	; 0x38
}
 8004304:	bd10      	pop	{r4, pc}
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004306:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8004308:	f010 0001 	ands.w	r0, r0, #1
 800430c:	d002      	beq.n	8004314 <SDMMC_GetCmdResp6+0x40>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800430e:	2301      	movs	r3, #1
 8004310:	63a3      	str	r3, [r4, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004312:	e7f7      	b.n	8004304 <SDMMC_GetCmdResp6+0x30>
  return (uint8_t)(SDIOx->RESPCMD);
 8004314:	6923      	ldr	r3, [r4, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8004316:	b2db      	uxtb	r3, r3
 8004318:	4299      	cmp	r1, r3
 800431a:	d115      	bne.n	8004348 <SDMMC_GetCmdResp6+0x74>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800431c:	23c5      	movs	r3, #197	; 0xc5
 800431e:	63a3      	str	r3, [r4, #56]	; 0x38
  return (*(__IO uint32_t *) tmp);
 8004320:	6963      	ldr	r3, [r4, #20]
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8004322:	f413 4060 	ands.w	r0, r3, #57344	; 0xe000
 8004326:	d102      	bne.n	800432e <SDMMC_GetCmdResp6+0x5a>
    *pRCA = (uint16_t) (response_r1 >> 16);
 8004328:	0c1b      	lsrs	r3, r3, #16
 800432a:	8013      	strh	r3, [r2, #0]
    return SDMMC_ERROR_NONE;
 800432c:	e7ea      	b.n	8004304 <SDMMC_GetCmdResp6+0x30>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800432e:	045a      	lsls	r2, r3, #17
 8004330:	d40c      	bmi.n	800434c <SDMMC_GetCmdResp6+0x78>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004332:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8004336:	bf14      	ite	ne
 8004338:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 800433c:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8004340:	e7e0      	b.n	8004304 <SDMMC_GetCmdResp6+0x30>
      return SDMMC_ERROR_TIMEOUT;
 8004342:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8004346:	e7dd      	b.n	8004304 <SDMMC_GetCmdResp6+0x30>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004348:	2001      	movs	r0, #1
 800434a:	e7db      	b.n	8004304 <SDMMC_GetCmdResp6+0x30>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800434c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004350:	e7d8      	b.n	8004304 <SDMMC_GetCmdResp6+0x30>
 8004352:	bf00      	nop
 8004354:	20000000 	.word	0x20000000

08004358 <SDMMC_CmdSetRelAdd>:
{
 8004358:	b570      	push	{r4, r5, r6, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800435a:	2300      	movs	r3, #0
 800435c:	2603      	movs	r6, #3
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800435e:	2240      	movs	r2, #64	; 0x40
{
 8004360:	b086      	sub	sp, #24
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004362:	e9cd 2303 	strd	r2, r3, [sp, #12]
{
 8004366:	4604      	mov	r4, r0
 8004368:	460d      	mov	r5, r1
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800436a:	e9cd 3601 	strd	r3, r6, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800436e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004372:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004374:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004376:	f7ff fd39 	bl	8003dec <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800437a:	462a      	mov	r2, r5
 800437c:	4631      	mov	r1, r6
 800437e:	4620      	mov	r0, r4
 8004380:	f7ff ffa8 	bl	80042d4 <SDMMC_GetCmdResp6>
}
 8004384:	b006      	add	sp, #24
 8004386:	bd70      	pop	{r4, r5, r6, pc}

08004388 <SDMMC_GetCmdResp7>:
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004388:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 800438c:	4b12      	ldr	r3, [pc, #72]	; (80043d8 <SDMMC_GetCmdResp7+0x50>)
{
 800438e:	4602      	mov	r2, r0
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	fbb3 f3f1 	udiv	r3, r3, r1
 8004396:	f241 3188 	movw	r1, #5000	; 0x1388
 800439a:	434b      	muls	r3, r1
    if (count-- == 0U)
 800439c:	3b01      	subs	r3, #1
 800439e:	d317      	bcc.n	80043d0 <SDMMC_GetCmdResp7+0x48>
    sta_reg = SDIOx->STA;
 80043a0:	6b51      	ldr	r1, [r2, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80043a2:	f011 0f45 	tst.w	r1, #69	; 0x45
 80043a6:	d0f9      	beq.n	800439c <SDMMC_GetCmdResp7+0x14>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80043a8:	0508      	lsls	r0, r1, #20
 80043aa:	d4f7      	bmi.n	800439c <SDMMC_GetCmdResp7+0x14>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80043ac:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80043ae:	0759      	lsls	r1, r3, #29
 80043b0:	d502      	bpl.n	80043b8 <SDMMC_GetCmdResp7+0x30>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80043b2:	2004      	movs	r0, #4
 80043b4:	6390      	str	r0, [r2, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80043b6:	4770      	bx	lr
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80043b8:	6b50      	ldr	r0, [r2, #52]	; 0x34
 80043ba:	f010 0001 	ands.w	r0, r0, #1
 80043be:	d002      	beq.n	80043c6 <SDMMC_GetCmdResp7+0x3e>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80043c0:	2301      	movs	r3, #1
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80043c2:	6393      	str	r3, [r2, #56]	; 0x38
 80043c4:	4770      	bx	lr
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80043c6:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80043c8:	065b      	lsls	r3, r3, #25
 80043ca:	d503      	bpl.n	80043d4 <SDMMC_GetCmdResp7+0x4c>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80043cc:	2340      	movs	r3, #64	; 0x40
 80043ce:	e7f8      	b.n	80043c2 <SDMMC_GetCmdResp7+0x3a>
      return SDMMC_ERROR_TIMEOUT;
 80043d0:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80043d4:	4770      	bx	lr
 80043d6:	bf00      	nop
 80043d8:	20000000 	.word	0x20000000

080043dc <SDMMC_CmdOperCond>:
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80043dc:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 80043e0:	2308      	movs	r3, #8
{
 80043e2:	b510      	push	{r4, lr}
 80043e4:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80043e6:	e9cd 2301 	strd	r2, r3, [sp, #4]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80043ea:	2140      	movs	r1, #64	; 0x40
 80043ec:	2300      	movs	r3, #0
{
 80043ee:	4604      	mov	r4, r0
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80043f0:	e9cd 1303 	strd	r1, r3, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80043f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80043f8:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80043fa:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80043fc:	f7ff fcf6 	bl	8003dec <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8004400:	4620      	mov	r0, r4
 8004402:	f7ff ffc1 	bl	8004388 <SDMMC_GetCmdResp7>
}
 8004406:	b006      	add	sp, #24
 8004408:	bd10      	pop	{r4, pc}
	...

0800440c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800440c:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800440e:	4903      	ldr	r1, [pc, #12]	; (800441c <MX_FATFS_Init+0x10>)
 8004410:	4803      	ldr	r0, [pc, #12]	; (8004420 <MX_FATFS_Init+0x14>)
 8004412:	f000 f89b 	bl	800454c <FATFS_LinkDriver>
 8004416:	4b03      	ldr	r3, [pc, #12]	; (8004424 <MX_FATFS_Init+0x18>)
 8004418:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800441a:	bd08      	pop	{r3, pc}
 800441c:	20008170 	.word	0x20008170
 8004420:	08006270 	.word	0x08006270
 8004424:	20008174 	.word	0x20008174

08004428 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8004428:	b507      	push	{r0, r1, r2, lr}
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800442a:	9300      	str	r3, [sp, #0]
 800442c:	4613      	mov	r3, r2
 800442e:	460a      	mov	r2, r1
 8004430:	4601      	mov	r1, r0
 8004432:	4804      	ldr	r0, [pc, #16]	; (8004444 <BSP_SD_ReadBlocks+0x1c>)
 8004434:	f7fe fd42 	bl	8002ebc <HAL_SD_ReadBlocks>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
 8004438:	3800      	subs	r0, #0
 800443a:	bf18      	it	ne
 800443c:	2001      	movne	r0, #1
 800443e:	b003      	add	sp, #12
 8004440:	f85d fb04 	ldr.w	pc, [sp], #4
 8004444:	20008030 	.word	0x20008030

08004448 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8004448:	b507      	push	{r0, r1, r2, lr}
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800444a:	9300      	str	r3, [sp, #0]
 800444c:	4613      	mov	r3, r2
 800444e:	460a      	mov	r2, r1
 8004450:	4601      	mov	r1, r0
 8004452:	4804      	ldr	r0, [pc, #16]	; (8004464 <BSP_SD_WriteBlocks+0x1c>)
 8004454:	f7fe fe36 	bl	80030c4 <HAL_SD_WriteBlocks>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
 8004458:	3800      	subs	r0, #0
 800445a:	bf18      	it	ne
 800445c:	2001      	movne	r0, #1
 800445e:	b003      	add	sp, #12
 8004460:	f85d fb04 	ldr.w	pc, [sp], #4
 8004464:	20008030 	.word	0x20008030

08004468 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8004468:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800446a:	4803      	ldr	r0, [pc, #12]	; (8004478 <BSP_SD_GetCardState+0x10>)
 800446c:	f7ff f97c 	bl	8003768 <HAL_SD_GetCardState>
}
 8004470:	3804      	subs	r0, #4
 8004472:	bf18      	it	ne
 8004474:	2001      	movne	r0, #1
 8004476:	bd08      	pop	{r3, pc}
 8004478:	20008030 	.word	0x20008030

0800447c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800447c:	4601      	mov	r1, r0
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800447e:	4801      	ldr	r0, [pc, #4]	; (8004484 <BSP_SD_GetCardInfo+0x8>)
 8004480:	f7ff b8cb 	b.w	800361a <HAL_SD_GetCardInfo>
 8004484:	20008030 	.word	0x20008030

08004488 <BSP_SD_AbortCallback>:
 8004488:	4770      	bx	lr

0800448a <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800448a:	b508      	push	{r3, lr}
  BSP_SD_AbortCallback();
 800448c:	f7ff fffc 	bl	8004488 <BSP_SD_AbortCallback>
}
 8004490:	bd08      	pop	{r3, pc}

08004492 <BSP_SD_WriteCpltCallback>:
 8004492:	4770      	bx	lr

08004494 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8004494:	b508      	push	{r3, lr}
  BSP_SD_WriteCpltCallback();
 8004496:	f7ff fffc 	bl	8004492 <BSP_SD_WriteCpltCallback>
}
 800449a:	bd08      	pop	{r3, pc}

0800449c <BSP_SD_ReadCpltCallback>:
 800449c:	4770      	bx	lr

0800449e <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800449e:	b508      	push	{r3, lr}
  BSP_SD_ReadCpltCallback();
 80044a0:	f7ff fffc 	bl	800449c <BSP_SD_ReadCpltCallback>
}
 80044a4:	bd08      	pop	{r3, pc}

080044a6 <BSP_SD_IsDetected>:
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
  __IO uint8_t status = SD_PRESENT;
 80044a6:	2301      	movs	r3, #1
{
 80044a8:	b507      	push	{r0, r1, r2, lr}
  __IO uint8_t status = SD_PRESENT;
 80044aa:	f88d 3007 	strb.w	r3, [sp, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80044ae:	f000 f81f 	bl	80044f0 <BSP_PlatformIsDetected>
 80044b2:	b908      	cbnz	r0, 80044b8 <BSP_SD_IsDetected+0x12>
  {
    status = SD_NOT_PRESENT;
 80044b4:	f88d 0007 	strb.w	r0, [sp, #7]
  }

  return status;
 80044b8:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 80044bc:	b003      	add	sp, #12
 80044be:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080044c4 <BSP_SD_Init>:
{
 80044c4:	b508      	push	{r3, lr}
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80044c6:	f7ff ffee 	bl	80044a6 <BSP_SD_IsDetected>
 80044ca:	2801      	cmp	r0, #1
 80044cc:	d10c      	bne.n	80044e8 <BSP_SD_Init+0x24>
  sd_state = HAL_SD_Init(&hsd);
 80044ce:	4807      	ldr	r0, [pc, #28]	; (80044ec <BSP_SD_Init+0x28>)
 80044d0:	f7ff f888 	bl	80035e4 <HAL_SD_Init>
  if (sd_state == MSD_OK)
 80044d4:	b938      	cbnz	r0, 80044e6 <BSP_SD_Init+0x22>
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 80044d6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80044da:	4804      	ldr	r0, [pc, #16]	; (80044ec <BSP_SD_Init+0x28>)
 80044dc:	f7ff f8b0 	bl	8003640 <HAL_SD_ConfigWideBusOperation>
    return MSD_ERROR;
 80044e0:	3800      	subs	r0, #0
 80044e2:	bf18      	it	ne
 80044e4:	2001      	movne	r0, #1
}
 80044e6:	bd08      	pop	{r3, pc}
    return MSD_ERROR;
 80044e8:	2001      	movs	r0, #1
 80044ea:	e7fc      	b.n	80044e6 <BSP_SD_Init+0x22>
 80044ec:	20008030 	.word	0x20008030

080044f0 <BSP_PlatformIsDetected>:
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
    uint8_t status = SD_PRESENT;
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80044f0:	f44f 7180 	mov.w	r1, #256	; 0x100
uint8_t	BSP_PlatformIsDetected(void) {
 80044f4:	b508      	push	{r3, lr}
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80044f6:	4803      	ldr	r0, [pc, #12]	; (8004504 <BSP_PlatformIsDetected+0x14>)
 80044f8:	f7fe f9f0 	bl	80028dc <HAL_GPIO_ReadPin>
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
}
 80044fc:	fab0 f080 	clz	r0, r0
 8004500:	0940      	lsrs	r0, r0, #5
 8004502:	bd08      	pop	{r3, pc}
 8004504:	40010c00 	.word	0x40010c00

08004508 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8004508:	b530      	push	{r4, r5, lr}
  uint8_t ret = 1;
  uint8_t DiskNum = 0;
  
  if(disk.nbr <= _VOLUMES)
 800450a:	4b0f      	ldr	r3, [pc, #60]	; (8004548 <FATFS_LinkDriverEx+0x40>)
{
 800450c:	4605      	mov	r5, r0
  if(disk.nbr <= _VOLUMES)
 800450e:	7a58      	ldrb	r0, [r3, #9]
 8004510:	2801      	cmp	r0, #1
 8004512:	d816      	bhi.n	8004542 <FATFS_LinkDriverEx+0x3a>
  {
    disk.is_initialized[disk.nbr] = 0;
 8004514:	2000      	movs	r0, #0
 8004516:	7a5c      	ldrb	r4, [r3, #9]
 8004518:	b2e4      	uxtb	r4, r4
 800451a:	5518      	strb	r0, [r3, r4]
    disk.drv[disk.nbr] = drv;  
 800451c:	7a5c      	ldrb	r4, [r3, #9]
 800451e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8004522:	6065      	str	r5, [r4, #4]
    disk.lun[disk.nbr] = lun;  
 8004524:	7a5c      	ldrb	r4, [r3, #9]
 8004526:	441c      	add	r4, r3
 8004528:	7222      	strb	r2, [r4, #8]
    DiskNum = disk.nbr++;
 800452a:	7a5a      	ldrb	r2, [r3, #9]
 800452c:	1c54      	adds	r4, r2, #1
 800452e:	b2e4      	uxtb	r4, r4
 8004530:	725c      	strb	r4, [r3, #9]
    path[0] = DiskNum + '0';
    path[1] = ':';
 8004532:	233a      	movs	r3, #58	; 0x3a
 8004534:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 8004536:	232f      	movs	r3, #47	; 0x2f
    path[0] = DiskNum + '0';
 8004538:	3230      	adds	r2, #48	; 0x30
 800453a:	700a      	strb	r2, [r1, #0]
    path[2] = '/';
 800453c:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 800453e:	70c8      	strb	r0, [r1, #3]
    ret = 0;
  }
  
  return ret;
}
 8004540:	bd30      	pop	{r4, r5, pc}
  uint8_t ret = 1;
 8004542:	2001      	movs	r0, #1
 8004544:	e7fc      	b.n	8004540 <FATFS_LinkDriverEx+0x38>
 8004546:	bf00      	nop
 8004548:	20008178 	.word	0x20008178

0800454c <FATFS_LinkDriver>:
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
 800454c:	2200      	movs	r2, #0
 800454e:	f7ff bfdb 	b.w	8004508 <FATFS_LinkDriverEx>
	...

08004554 <SD_initialize>:
  * @param  lun : not used 
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
  Stat = STA_NOINIT;
 8004554:	2301      	movs	r3, #1
{
 8004556:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 8004558:	4c05      	ldr	r4, [pc, #20]	; (8004570 <SD_initialize+0x1c>)
 800455a:	7023      	strb	r3, [r4, #0]
  
  /* Configure the uSD device */
  if(BSP_SD_Init() == MSD_OK)
 800455c:	f7ff ffb2 	bl	80044c4 <BSP_SD_Init>
 8004560:	b918      	cbnz	r0, 800456a <SD_initialize+0x16>
  {
    Stat &= ~STA_NOINIT;
 8004562:	7823      	ldrb	r3, [r4, #0]
 8004564:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004568:	7023      	strb	r3, [r4, #0]
  }

  return Stat;
 800456a:	7820      	ldrb	r0, [r4, #0]
}
 800456c:	bd10      	pop	{r4, pc}
 800456e:	bf00      	nop
 8004570:	2000000c 	.word	0x2000000c

08004574 <SD_status>:
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
  Stat = STA_NOINIT;
 8004574:	2301      	movs	r3, #1
{
 8004576:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 8004578:	4c05      	ldr	r4, [pc, #20]	; (8004590 <SD_status+0x1c>)
 800457a:	7023      	strb	r3, [r4, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800457c:	f7ff ff74 	bl	8004468 <BSP_SD_GetCardState>
 8004580:	b918      	cbnz	r0, 800458a <SD_status+0x16>
  {
    Stat &= ~STA_NOINIT;
 8004582:	7823      	ldrb	r3, [r4, #0]
 8004584:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004588:	7023      	strb	r3, [r4, #0]
  }
  
  return Stat;
 800458a:	7820      	ldrb	r0, [r4, #0]
}
 800458c:	bd10      	pop	{r4, pc}
 800458e:	bf00      	nop
 8004590:	2000000c 	.word	0x2000000c

08004594 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8004594:	b530      	push	{r4, r5, lr}
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;
  
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004596:	4b13      	ldr	r3, [pc, #76]	; (80045e4 <SD_ioctl+0x50>)
{
 8004598:	4615      	mov	r5, r2
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800459a:	781c      	ldrb	r4, [r3, #0]
{
 800459c:	b089      	sub	sp, #36	; 0x24
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800459e:	f014 0401 	ands.w	r4, r4, #1
 80045a2:	d11a      	bne.n	80045da <SD_ioctl+0x46>
  
  switch (cmd)
 80045a4:	2903      	cmp	r1, #3
 80045a6:	d803      	bhi.n	80045b0 <SD_ioctl+0x1c>
 80045a8:	e8df f001 	tbb	[pc, r1]
 80045ac:	120c0619 	.word	0x120c0619
 80045b0:	2404      	movs	r4, #4
  default:
    res = RES_PARERR;
  }
  
  return res;
}
 80045b2:	4620      	mov	r0, r4
 80045b4:	b009      	add	sp, #36	; 0x24
 80045b6:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 80045b8:	4668      	mov	r0, sp
 80045ba:	f7ff ff5f 	bl	800447c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80045be:	9b06      	ldr	r3, [sp, #24]
    *(DWORD*)buff = CardInfo.LogBlockSize;
 80045c0:	602b      	str	r3, [r5, #0]
    break;
 80045c2:	e7f6      	b.n	80045b2 <SD_ioctl+0x1e>
    BSP_SD_GetCardInfo(&CardInfo);
 80045c4:	4668      	mov	r0, sp
 80045c6:	f7ff ff59 	bl	800447c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80045ca:	9b07      	ldr	r3, [sp, #28]
 80045cc:	802b      	strh	r3, [r5, #0]
    break;
 80045ce:	e7f0      	b.n	80045b2 <SD_ioctl+0x1e>
    BSP_SD_GetCardInfo(&CardInfo);
 80045d0:	4668      	mov	r0, sp
 80045d2:	f7ff ff53 	bl	800447c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize;
 80045d6:	9b07      	ldr	r3, [sp, #28]
 80045d8:	e7f2      	b.n	80045c0 <SD_ioctl+0x2c>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80045da:	2403      	movs	r4, #3
 80045dc:	e7e9      	b.n	80045b2 <SD_ioctl+0x1e>
    res = RES_OK;
 80045de:	460c      	mov	r4, r1
 80045e0:	e7e7      	b.n	80045b2 <SD_ioctl+0x1e>
 80045e2:	bf00      	nop
 80045e4:	2000000c 	.word	0x2000000c

080045e8 <SD_write>:
{
 80045e8:	4608      	mov	r0, r1
 80045ea:	b510      	push	{r4, lr}
 80045ec:	4611      	mov	r1, r2
 80045ee:	461a      	mov	r2, r3
  if(BSP_SD_WriteBlocks((uint32_t*)buff, 
 80045f0:	4b07      	ldr	r3, [pc, #28]	; (8004610 <SD_write+0x28>)
 80045f2:	f7ff ff29 	bl	8004448 <BSP_SD_WriteBlocks>
 80045f6:	b140      	cbz	r0, 800460a <SD_write+0x22>
  DRESULT res = RES_ERROR;
 80045f8:	2001      	movs	r0, #1
}
 80045fa:	bd10      	pop	{r4, pc}
      if (timeout-- == 0)
 80045fc:	3c01      	subs	r4, #1
 80045fe:	d0fb      	beq.n	80045f8 <SD_write+0x10>
    while(BSP_SD_GetCardState()!= MSD_OK)
 8004600:	f7ff ff32 	bl	8004468 <BSP_SD_GetCardState>
 8004604:	2800      	cmp	r0, #0
 8004606:	d1f9      	bne.n	80045fc <SD_write+0x14>
 8004608:	e7f7      	b.n	80045fa <SD_write+0x12>
 800460a:	4c02      	ldr	r4, [pc, #8]	; (8004614 <SD_write+0x2c>)
 800460c:	e7f8      	b.n	8004600 <SD_write+0x18>
 800460e:	bf00      	nop
 8004610:	05f5e100 	.word	0x05f5e100
 8004614:	000186a1 	.word	0x000186a1

08004618 <SD_read>:
{
 8004618:	4608      	mov	r0, r1
 800461a:	b510      	push	{r4, lr}
 800461c:	4611      	mov	r1, r2
 800461e:	461a      	mov	r2, r3
  if(BSP_SD_ReadBlocks((uint32_t*)buff, 
 8004620:	4b07      	ldr	r3, [pc, #28]	; (8004640 <SD_read+0x28>)
 8004622:	f7ff ff01 	bl	8004428 <BSP_SD_ReadBlocks>
 8004626:	b140      	cbz	r0, 800463a <SD_read+0x22>
  DRESULT res = RES_ERROR;
 8004628:	2001      	movs	r0, #1
}
 800462a:	bd10      	pop	{r4, pc}
      if (timeout-- == 0)
 800462c:	3c01      	subs	r4, #1
 800462e:	d0fb      	beq.n	8004628 <SD_read+0x10>
    while(BSP_SD_GetCardState()!= MSD_OK)
 8004630:	f7ff ff1a 	bl	8004468 <BSP_SD_GetCardState>
 8004634:	2800      	cmp	r0, #0
 8004636:	d1f9      	bne.n	800462c <SD_read+0x14>
 8004638:	e7f7      	b.n	800462a <SD_read+0x12>
 800463a:	4c02      	ldr	r4, [pc, #8]	; (8004644 <SD_read+0x2c>)
 800463c:	e7f8      	b.n	8004630 <SD_read+0x18>
 800463e:	bf00      	nop
 8004640:	05f5e100 	.word	0x05f5e100
 8004644:	000186a1 	.word	0x000186a1

08004648 <__libc_init_array>:
 8004648:	b570      	push	{r4, r5, r6, lr}
 800464a:	2600      	movs	r6, #0
 800464c:	4d0c      	ldr	r5, [pc, #48]	; (8004680 <__libc_init_array+0x38>)
 800464e:	4c0d      	ldr	r4, [pc, #52]	; (8004684 <__libc_init_array+0x3c>)
 8004650:	1b64      	subs	r4, r4, r5
 8004652:	10a4      	asrs	r4, r4, #2
 8004654:	42a6      	cmp	r6, r4
 8004656:	d109      	bne.n	800466c <__libc_init_array+0x24>
 8004658:	f000 f822 	bl	80046a0 <_init>
 800465c:	2600      	movs	r6, #0
 800465e:	4d0a      	ldr	r5, [pc, #40]	; (8004688 <__libc_init_array+0x40>)
 8004660:	4c0a      	ldr	r4, [pc, #40]	; (800468c <__libc_init_array+0x44>)
 8004662:	1b64      	subs	r4, r4, r5
 8004664:	10a4      	asrs	r4, r4, #2
 8004666:	42a6      	cmp	r6, r4
 8004668:	d105      	bne.n	8004676 <__libc_init_array+0x2e>
 800466a:	bd70      	pop	{r4, r5, r6, pc}
 800466c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004670:	4798      	blx	r3
 8004672:	3601      	adds	r6, #1
 8004674:	e7ee      	b.n	8004654 <__libc_init_array+0xc>
 8004676:	f855 3b04 	ldr.w	r3, [r5], #4
 800467a:	4798      	blx	r3
 800467c:	3601      	adds	r6, #1
 800467e:	e7f2      	b.n	8004666 <__libc_init_array+0x1e>
 8004680:	08006284 	.word	0x08006284
 8004684:	08006284 	.word	0x08006284
 8004688:	08006284 	.word	0x08006284
 800468c:	08006288 	.word	0x08006288

08004690 <memset>:
 8004690:	4603      	mov	r3, r0
 8004692:	4402      	add	r2, r0
 8004694:	4293      	cmp	r3, r2
 8004696:	d100      	bne.n	800469a <memset+0xa>
 8004698:	4770      	bx	lr
 800469a:	f803 1b01 	strb.w	r1, [r3], #1
 800469e:	e7f9      	b.n	8004694 <memset+0x4>

080046a0 <_init>:
 80046a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046a2:	bf00      	nop
 80046a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046a6:	bc08      	pop	{r3}
 80046a8:	469e      	mov	lr, r3
 80046aa:	4770      	bx	lr

080046ac <_fini>:
 80046ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046ae:	bf00      	nop
 80046b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046b2:	bc08      	pop	{r3}
 80046b4:	469e      	mov	lr, r3
 80046b6:	4770      	bx	lr
